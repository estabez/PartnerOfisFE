{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\views\\\\Wdm.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport Toolbar from '../components/TopologyToolbar';\nimport Header from \"../components/Header\";\nimport Sidebar from \"../components/Sidebar\";\nimport TopologyDiagram from '../components/TopologyDiagram';\nimport IconModule from '../IconModule';\nimport RestApiModule from '../RestApiModule'; //Mock\n\nimport mockData from '../mockData/dublicatedataforWDM';\n\nclass WDM extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.useMock = false;\n    this.state = {\n      graph: null,\n      labels: null\n    };\n    this.unformatedData = null;\n    this.restApi = new RestApiModule();\n    this.today = new Date();\n    this.todayDate = '_' + this.today.getDate() + this.today.toLocaleString('default', {\n      month: 'long'\n    }) + this.today.getFullYear();\n    this.fileName = 'WDMTopology' + this.todayDate + '.png';\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.getWdmTopologyData();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  getWdmTopologyData() {\n    if (!this.useMock) {\n      this.restApi.callApi('wdm', {\n        token: this.props.token\n      }).then(response => {\n        if (this._isMounted) this.prepareData(response.WDMTopologyViewData);\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      // mock data\n      this.prepareData(mockData.WDMTopologyViewData);\n    }\n  }\n\n  prepareData(json) {\n    const nodes = [],\n          edges = [],\n          labels = [];\n    const Icons = new IconModule();\n    const Site = Icons.getIconForNode('AGGREGATE_SITE');\n    let graph = null;\n\n    function pushItem(label) {\n      if (label !== null) {\n        labels.push(label);\n        nodes.push({\n          id: label,\n          label,\n          shape: 'image',\n          font: {\n            color: 'black',\n            size: 13\n          },\n          image: Site,\n          size: 25\n        });\n      }\n    }\n\n    if (json) {\n      json.map(item => {\n        const indexA = nodes.findIndex(data => data.label === item.A_SIDE_SITE);\n        const indexZ = nodes.findIndex(data => data.label === item.Z_SIDE_SITE);\n        pushItem(indexA < 0 ? item.A_SIDE_SITE : indexZ < 0 ? item.Z_SIDE_SITE : null);\n        let title = `<strong>Name: </strong>${item.NAME}<br /><strong>Status: </strong>${item.STATUS}<br />`;\n        title += `<strong>A Side Equip: </strong>${item.A_SIDE_SITE}<br />`;\n        title += `<strong>Z Side Equip: </strong>${item.Z_SIDE_SITE}`;\n        edges.push({\n          from: item.A_SIDE_SITE,\n          to: item.Z_SIDE_SITE,\n          title: title\n        });\n      });\n      graph = {\n        nodes,\n        edges\n      };\n      this.unformatedData = graph;\n      this.setState({\n        graph\n      });\n      this.setState({\n        labels: labels.sort()\n      });\n    }\n  }\n\n  async handleSelectNode(selectedNodeId) {\n    let newGraph = JSON.parse(JSON.stringify(this.unformatedData));\n\n    if (newGraph) {\n      newGraph.nodes.map(node => {\n        if (node.label === selectedNodeId) {\n          node.font = {\n            color: 'red',\n            size: this.props.fontSize\n          };\n          node.size = 40;\n        }\n      });\n      this.setState({\n        graph: newGraph\n      });\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          language = _this$props.language,\n          maximize = _this$props.maximize,\n          contentCSS = _this$props.contentCSS;\n    const graph = this.state.graph;\n\n    if (language !== null && graph !== null) {\n      return React.createElement(React.Fragment, null, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row h-100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(Sidebar, {\n        maximize: maximize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: contentCSS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Toolbar, {\n        wrapper: 'card toolbar mt-2',\n        labels: this.state.labels,\n        handleSelectNode: this.handleSelectNode.bind(this),\n        diagramAreaId: 'WdmTopology',\n        snapshotFileName: this.fileName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: 'WdmTopology',\n        className: 'card mt-1 fixedCard',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: 'topologyViewHeader',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, language.wdmTopology), React.createElement(TopologyDiagram, {\n        height: '95%',\n        graph: this.state.graph,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }))))));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.token,\n    language: state.language,\n    maximize: state.maximize,\n    contentCSS: state.contentCSS,\n    fontSize: state.topologySelectedNodeFontSize\n  };\n}\n\nexport default connect(mapStateToProps)(WDM);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/views/Wdm.jsx"],"names":["React","connect","Toolbar","Header","Sidebar","TopologyDiagram","IconModule","RestApiModule","mockData","WDM","Component","constructor","props","_isMounted","useMock","state","graph","labels","unformatedData","restApi","today","Date","todayDate","getDate","toLocaleString","month","getFullYear","fileName","componentDidMount","getWdmTopologyData","componentWillUnmount","callApi","token","then","response","prepareData","WDMTopologyViewData","catch","error","console","log","json","nodes","edges","Icons","Site","getIconForNode","pushItem","label","push","id","shape","font","color","size","image","map","item","indexA","findIndex","data","A_SIDE_SITE","indexZ","Z_SIDE_SITE","title","NAME","STATUS","from","to","setState","sort","handleSelectNode","selectedNodeId","newGraph","JSON","parse","stringify","node","fontSize","render","language","maximize","contentCSS","bind","wdmTopology","mapStateToProps","topologySelectedNodeFontSize"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Toolbar from '../components/TopologyToolbar'\r\nimport Header from \"../components/Header\";\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport TopologyDiagram from '../components/TopologyDiagram'\r\n\r\nimport IconModule from '../IconModule';\r\nimport RestApiModule from '../RestApiModule'\r\n\r\n//Mock\r\nimport mockData from '../mockData/dublicatedataforWDM'\r\n\r\nclass WDM extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.useMock = false;\r\n\r\n        this.state = {\r\n            graph: null,\r\n            labels: null\r\n        }\r\n\r\n        this.unformatedData = null\r\n\r\n        this.restApi = new RestApiModule();\r\n\r\n        this.today = new Date();\r\n        this.todayDate = '_' + this.today.getDate() +  (this.today.toLocaleString('default', { month: 'long' })) + this.today.getFullYear();\r\n        this.fileName = 'WDMTopology' + this.todayDate + '.png';\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n        this.getWdmTopologyData();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    getWdmTopologyData() {\r\n\r\n        if (!this.useMock) {\r\n            this.restApi.callApi('wdm', {\r\n                token: this.props.token\r\n\r\n            }).then((response) => {\r\n                if (this._isMounted)\r\n                    this.prepareData(response.WDMTopologyViewData);\r\n\r\n            }).catch((error) => {\r\n                console.log(error)\r\n            });\r\n        } else {\r\n            // mock data\r\n            this.prepareData(mockData.WDMTopologyViewData);\r\n        }\r\n    }\r\n\r\n    prepareData(json) {\r\n\r\n        const nodes = [], edges = [], labels = [];\r\n        const Icons = new IconModule();\r\n        const Site = Icons.getIconForNode('AGGREGATE_SITE');\r\n\r\n        let graph = null;\r\n\r\n        function pushItem(label) {\r\n\r\n            if (label !== null) {\r\n                labels.push(label);\r\n\r\n                nodes.push({\r\n                    id: label,\r\n                    label,\r\n                    shape: 'image',\r\n                    font: {color: 'black', size: 13},\r\n                    image: Site,\r\n                    size: 25,\r\n                })\r\n            }\r\n        }\r\n\r\n        if (json) {\r\n\r\n            json.map((item) => {\r\n                const indexA = nodes.findIndex(data => data.label === item.A_SIDE_SITE);\r\n                const indexZ = nodes.findIndex(data => data.label === item.Z_SIDE_SITE);\r\n\r\n                pushItem(indexA < 0 ? item.A_SIDE_SITE : indexZ < 0 ? item.Z_SIDE_SITE : null);\r\n\r\n                let title = `<strong>Name: </strong>${item.NAME}<br /><strong>Status: </strong>${item.STATUS}<br />`;\r\n                title += `<strong>A Side Equip: </strong>${item.A_SIDE_SITE}<br />`;\r\n                title += `<strong>Z Side Equip: </strong>${item.Z_SIDE_SITE}`;\r\n\r\n                edges.push({\r\n                    from: item.A_SIDE_SITE,\r\n                    to: item.Z_SIDE_SITE,\r\n                    title: title\r\n                });\r\n\r\n            });\r\n\r\n            graph = {\r\n                nodes,\r\n                edges\r\n            };\r\n\r\n            this.unformatedData = graph;\r\n            this.setState({graph});\r\n            this.setState({labels: labels.sort()});\r\n        }\r\n    }\r\n\r\n    async handleSelectNode(selectedNodeId) {\r\n\r\n        let newGraph = JSON.parse(JSON.stringify(this.unformatedData));\r\n        if (newGraph) {\r\n            newGraph.nodes.map((node) => {\r\n                if (node.label === selectedNodeId) {\r\n                    node.font = {color: 'red', size: this.props.fontSize};\r\n                    node.size = 40;\r\n                }\r\n            });\r\n            this.setState({graph: newGraph});\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {language, maximize, contentCSS} = this.props;\r\n        const {graph} = this.state;\r\n\r\n        if (language !== null && graph !== null) {\r\n\r\n            return (\r\n                <>\r\n                    <Header/>\r\n                    <div className=\"row h-100\">\r\n                        <Sidebar maximize={maximize}/>\r\n                        <div className={contentCSS}>\r\n                            <Toolbar wrapper={'card toolbar mt-2'}\r\n                                     labels={this.state.labels}\r\n                                     handleSelectNode={this.handleSelectNode.bind(this)}\r\n                                     diagramAreaId={'WdmTopology'}\r\n                                     snapshotFileName={this.fileName}\r\n                            />\r\n                            <div id={'WdmTopology'} className={'card mt-1 fixedCard'}>\r\n                                <div className=\"card-body\">\r\n                                    <h4 className={'topologyViewHeader'}>{language.wdmTopology}</h4>\r\n                                    <TopologyDiagram\r\n                                        height={'95%'}\r\n                                        graph={this.state.graph}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )\r\n        } else {\r\n            return (<></>);\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        language: state.language,\r\n        maximize: state.maximize,\r\n        contentCSS: state.contentCSS,\r\n        fontSize: state.topologySelectedNodeFontSize\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(WDM);"]},"metadata":{},"sourceType":"module"}