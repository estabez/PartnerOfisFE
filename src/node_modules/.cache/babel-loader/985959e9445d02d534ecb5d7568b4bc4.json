{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{connect}from\"react-redux\";import MaximizeContent from\"./MaximizeContent\";import{Row,Col,Card,CardBody,Button,ButtonGroup}from'reactstrap';import{modalImportToggle,setShowRevision as _setShowRevision}from\"../redux/actions\";import SelectRegion from'./SelectRegion';import SelectRadioSite from'./SelectRadioSite';import ReactTooltip from'react-tooltip';import Switch from\"react-switch\";// REST\nimport RestApiModule from'../RestApiModule';// Alert\nimport AlertModule from'../AlertModule';var Toolbar=/*#__PURE__*/function(_React$Component){_inherits(Toolbar,_React$Component);var _super=_createSuper(Toolbar);function Toolbar(props){var _this;_classCallCheck(this,Toolbar);_this=_super.call(this,props);_this._isMounted=false;_this.restApi=new RestApiModule();_this.alert=new AlertModule();return _this;}_createClass(Toolbar,[{key:\"componentDidMount\",value:function componentDidMount(){this._isMounted=true;}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState,snapshot){ReactTooltip.rebuild();}},{key:\"openImportModal\",value:function openImportModal(){var _this2=this;var _this$props=this.props,token=_this$props.token,setModalImport=_this$props.setModalImport,language=_this$props.language;this.restApi.callApi('getImportStatus',{token:token}).then(function(response){console.log(response);var isImportOngoing=response.isImportOngoing;if(!isImportOngoing.isLock){setModalImport();}else{var message=language.importSection.ongoingImportText.replace('{username}',isImportOngoing.uname);_this2.alert.showMessage('warning',language.importSection.ongoingImportTitle,message,false);}});}},{key:\"handleChange\",value:function handleChange(){this.props.setShowRevision();this.props.revision();}},{key:\"render\",value:function render(){var _this3=this;var _this$props2=this.props,language=_this$props2.language,wrapper=_this$props2.wrapper,tooltipPlacement=_this$props2.tooltipPlacement,showRevision=_this$props2.showRevision,editOn=_this$props2.editOn,isDataExist=_this$props2.isDataExist,height=_this$props2.height;if(language&&this._isMounted){return/*#__PURE__*/React.createElement(Card,{className:wrapper},/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{xs:2}),/*#__PURE__*/React.createElement(Col,{xs:2}),/*#__PURE__*/React.createElement(Col,{xs:8,className:\"text-right tools\"},/*#__PURE__*/React.createElement(\"span\",{className:'mr-2'}),Object.entries(language.matrixToolbar).map(function(group,ind,arr){return/*#__PURE__*/React.createElement(ButtonGroup,{className:'mr-2',key:group[0]},group[1].map(function(item,key){if(item.clickEvent==='edit'||item.id==='saveOptions'){item.showMe=!editOn;}// disable buttons if edit mode on\nvar disableAttr=false;if(item.id!=='saveOptions'){return/*#__PURE__*/React.createElement(Button,{key:key,\"data-tip\":item.title,\"data-place\":tooltipPlacement,disabled:disableAttr,className:item.showMe?undefined:'d-none',onClick:item.clickEvent==='import'?_this3.openImportModal.bind(_this3):_this3.props[item.clickEvent],color:item.btnClass},/*#__PURE__*/React.createElement(\"i\",{className:\"icon \".concat(item.icon)}));}else if(item.id==='saveOptions'&&editOn){return/*#__PURE__*/React.createElement(\"div\",{className:\"dropdown\",key:key},/*#__PURE__*/React.createElement(Button,{\"data-tip\":item.title,\"data-place\":tooltipPlacement,color:item.btnClass,\"data-toggle\":\"dropdown\"},/*#__PURE__*/React.createElement(\"i\",{className:\"icon \".concat(item.icon)})),/*#__PURE__*/React.createElement(\"div\",{className:\"dropdown-menu dropdown-menu-right\"},item.children.map(function(child,childKey){var showOption=_this3.props.newRowAdded===true?child.showOnNewRow:true;var divClass=\"\".concat(child.class,\" \").concat(showOption?'':' d-none');return/*#__PURE__*/React.createElement(\"div\",{className:divClass,onClick:_this3.props[child.clickEvent],key:childKey},/*#__PURE__*/React.createElement(\"i\",{className:\"icon \".concat(child.icon,\" mr-2\")}),child.title);})));}}));}),/*#__PURE__*/React.createElement(MaximizeContent,null)))));}else{return/*#__PURE__*/React.createElement(React.Fragment,null);}}}]);return Toolbar;}(React.Component);function mapStateToProps(state){return{token:state.token,language:state.language,editOn:state.editOn,maximize:state.maximize,tooltipPlacement:state.tooltipPlacement,showRevision:state.showRevision};}function mapDispatchToProps(dispatch){return{setModalImport:function setModalImport(){return dispatch(modalImportToggle());},setShowRevision:function setShowRevision(){return dispatch(_setShowRevision());}};}export default connect(mapStateToProps,mapDispatchToProps)(Toolbar);","map":{"version":3,"sources":["C:/Users/soperasyon27/Desktop/FE/src18mart/src/src/components/Toolbar.jsx"],"names":["React","connect","MaximizeContent","Row","Col","Card","CardBody","Button","ButtonGroup","modalImportToggle","setShowRevision","SelectRegion","SelectRadioSite","ReactTooltip","Switch","RestApiModule","AlertModule","Toolbar","props","_isMounted","restApi","alert","prevProps","prevState","snapshot","rebuild","token","setModalImport","language","callApi","then","response","console","log","isImportOngoing","isLock","message","importSection","ongoingImportText","replace","uname","showMessage","ongoingImportTitle","revision","wrapper","tooltipPlacement","showRevision","editOn","isDataExist","height","Object","entries","matrixToolbar","map","group","ind","arr","item","key","clickEvent","id","showMe","disableAttr","title","undefined","openImportModal","bind","btnClass","icon","children","child","childKey","showOption","newRowAdded","showOnNewRow","divClass","class","Component","mapStateToProps","state","maximize","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport MaximizeContent from \"./MaximizeContent\";\r\nimport {Row, Col, Card, CardBody, Button, ButtonGroup} from 'reactstrap';\r\nimport {modalImportToggle, setShowRevision} from \"../redux/actions\";\r\nimport SelectRegion from './SelectRegion';\r\nimport SelectRadioSite from './SelectRadioSite';\r\nimport ReactTooltip from 'react-tooltip'\r\nimport Switch from \"react-switch\";\r\n\r\n// REST\r\nimport RestApiModule from '../RestApiModule'\r\n// Alert\r\nimport AlertModule from '../AlertModule'\r\n\r\nclass Toolbar extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.restApi = new RestApiModule();\r\n        this.alert = new AlertModule();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        ReactTooltip.rebuild();\r\n    }\r\n\r\n\r\n    openImportModal() {\r\n\r\n        const {token, setModalImport, language} = this.props\r\n\r\n        this.restApi.callApi('getImportStatus', {\r\n            token\r\n        }).then(response => {\r\n\r\n            console.log(response);\r\n            const {isImportOngoing} = response;\r\n\r\n            if (!isImportOngoing.isLock) {\r\n                setModalImport()\r\n\r\n            } else {\r\n                const message = language.importSection.ongoingImportText.replace('{username}', isImportOngoing.uname);\r\n\r\n                this.alert.showMessage(\r\n                    'warning',\r\n                    language.importSection.ongoingImportTitle,\r\n                    message,\r\n                    false)\r\n            }\r\n        })\r\n    }\r\n\r\n    handleChange() {\r\n        this.props.setShowRevision();\r\n        this.props.revision();\r\n    }\r\n\r\n    render() {\r\n\r\n        const {language, wrapper, tooltipPlacement, showRevision, editOn, isDataExist,height} = this.props;\r\n\r\n        if (language && this._isMounted) {\r\n\r\n\r\n            return (\r\n                <Card className={wrapper}>\r\n                    <CardBody>\r\n\r\n                        <Row>\r\n                            <Col xs={2}>\r\n\r\n                            </Col>\r\n\r\n                            <Col xs={2}>\r\n\r\n                            </Col>\r\n                            <Col xs={8} className=\"text-right tools\">\r\n                                <span className={'mr-2'}>\r\n\r\n                                </span>\r\n\r\n                                {\r\n                                    Object.entries(language.matrixToolbar).map((group, ind, arr) => {\r\n                                        return (\r\n                                            <ButtonGroup className={'mr-2'} key={group[0]}>\r\n                                                {group[1].map((item, key) => {\r\n\r\n                                                    if ((item.clickEvent === 'edit' ||\r\n                                                        item.id === 'saveOptions')) {\r\n                                                        item.showMe = !editOn\r\n                                                    }\r\n\r\n                                                    // disable buttons if edit mode on\r\n                                                    let disableAttr = false;\r\n\r\n\r\n                                                    if (item.id !== 'saveOptions') {\r\n                                                        return (\r\n                                                            <Button key={key}\r\n                                                                    data-tip={item.title}\r\n                                                                    data-place={tooltipPlacement}\r\n                                                                    disabled={disableAttr}\r\n                                                                    className={item.showMe\r\n                                                                        ? undefined\r\n                                                                        : 'd-none'\r\n                                                                    }\r\n                                                                    onClick={item.clickEvent === 'import'\r\n                                                                        ? this.openImportModal.bind(this)\r\n                                                                        : this.props[item.clickEvent]\r\n                                                                    }\r\n                                                                    color={item.btnClass}>\r\n                                                                <i className={`icon ${item.icon}`}/>\r\n                                                            </Button>\r\n                                                        )\r\n                                                    } else if (item.id === 'saveOptions' && editOn) {\r\n\r\n                                                        return (\r\n\r\n                                                            <div className=\"dropdown\" key={key}>\r\n                                                                <Button data-tip={item.title}\r\n                                                                        data-place={tooltipPlacement}\r\n                                                                        color={item.btnClass}\r\n                                                                        data-toggle=\"dropdown\">\r\n                                                                    <i className={`icon ${item.icon}`}/>\r\n                                                                </Button>\r\n                                                                <div className=\"dropdown-menu dropdown-menu-right\">\r\n                                                                    {item.children.map((child, childKey) => {\r\n\r\n                                                                        const showOption = this.props.newRowAdded === true\r\n                                                                            ? child.showOnNewRow\r\n                                                                            : true;\r\n\r\n                                                                        const divClass = `${child.class} ${\r\n                                                                            (showOption) ? '' : ' d-none'\r\n                                                                        }`;\r\n\r\n                                                                        return (\r\n                                                                            <div className={divClass}\r\n                                                                                 onClick={this.props[child.clickEvent]}\r\n                                                                                 key={childKey}>\r\n                                                                                <i className={`icon ${child.icon} mr-2`}/>\r\n                                                                                {child.title}\r\n                                                                            </div>\r\n                                                                        )\r\n                                                                    })\r\n                                                                    }\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        )\r\n                                                    }\r\n                                                })\r\n                                                }\r\n                                            </ButtonGroup>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                <MaximizeContent/>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        language: state.language,\r\n        editOn: state.editOn,\r\n        maximize: state.maximize,\r\n        tooltipPlacement: state.tooltipPlacement,\r\n        showRevision: state.showRevision\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModalImport: () => dispatch(modalImportToggle()),\r\n        setShowRevision: () => dispatch(setShowRevision())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);"]},"metadata":{},"sourceType":"module"}