{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{connect}from\"react-redux\";import Toolbar from'../components/TopologyToolbar';import Header from\"../components/Header\";import Sidebar from\"../components/Sidebar\";import ModalTemplate from'../components/Modal';import TopologyDiagram from'../components/TopologyDiagram';import{modalToggle,modalTitle,setTopologyFirstLevel as _setTopologyFirstLevel,setTopologySecondLevel as _setTopologySecondLevel,setTopologySecondLevelDropdownLabels}from\"../redux/actions\";import IconModule from'../IconModule';import RestApiModule from'../RestApiModule';import AlertModule from'../AlertModule';import EmptyDataset from\"../components/EmptyDataset\";import{Card,CardBody}from'reactstrap';var Ran=/*#__PURE__*/function(_React$Component){_inherits(Ran,_React$Component);var _super=_createSuper(Ran);function Ran(props){var _this;_classCallCheck(this,Ran);_this=_super.call(this,props);_this._isMounted=false;_this.events={doubleClick:function doubleClick(event){var nodes=event.nodes;var nodeID=nodes[0];if(nodeID){// type must be aggreg_site\nvar node=_this.props.graph.nodes.find(function(item){return item.id===nodeID;});if(node.type==='AGGREGATE_SITE'){_this.getDataByAggregSite(nodeID);_this.props.setModalTitle(nodeID);}}}};_this.Icons=new IconModule();_this.restApi=new RestApiModule();_this.alert=new AlertModule();_this.state={firstLevelData:null,dropdownLabels:null,dataExist:true};_this.unformatedData=null;_this.unformatedDataSecondLevel=null;_this.today=new Date();_this.todayDate='_'+_this.today.getDate()+_this.today.toLocaleString('default',{month:'long'})+_this.today.getFullYear();_this.fileName='RanTopology'+_this.todayDate+'.png';// init first data\n_this.getDataByRegion();return _this;}_createClass(Ran,[{key:\"componentDidMount\",value:function componentDidMount(){this._isMounted=true;}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this._isMounted=false;}},{key:\"setStateAsync\",value:function setStateAsync(state){var _this2=this;return new Promise(function(resolve){_this2.setState(state,resolve);});}},{key:\"getDataByRegion\",value:function getDataByRegion(){var _this3=this;var _this$props=this.props,token=_this$props.token,region=_this$props.region;this.restApi.callApi('ranFirst',{token:token,region:region}).then(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(response){var d;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:d=response.RANTopologyFirstLevelViewData;if(!(_this3._isMounted&&d&&d.length>0)){_context.next=7;break;}_context.next=4;return _this3.setStateAsync({firstLevelData:d,dataExist:true});case 4:_this3.prepareFirstLevelData();_context.next=8;break;case 7:_this3.setStateAsync({dataExist:false});case 8:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}()).catch(function(error){console.log(error);_this3.setStateAsync({dataExist:false});});}},{key:\"getDataByAggregSite\",value:function(){var _getDataByAggregSite=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id){var _this4=this;var token;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:token=this.props.token;this.restApi.callApi('ranSecond',{selectedNode:id,token:token}).then(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response){var d;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:d=response.RANTopologySecondLevelViewData;if(!(d.length>0)){_context2.next=4;break;}_context2.next=4;return _this4.prepareSecondLevelData(d,id);case 4:_this4.props.setModal();case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x3){return _ref2.apply(this,arguments);};}()).catch(function(error){console.log(error);});case 2:case\"end\":return _context3.stop();}}},_callee3,this);}));function getDataByAggregSite(_x2){return _getDataByAggregSite.apply(this,arguments);}return getDataByAggregSite;}()},{key:\"prepareFirstLevelData\",value:function prepareFirstLevelData(){var _this5=this;var nodes=[],edges=[],labels=[];function pushItem(id,type,Icons){if(type==='AGGREGATE_SITE'){labels.push(id);}nodes.push({id:id,label:id,type:type,shape:'image',font:{color:'black',size:'13'},size:25,image:Icons.getIconForNode(type)});}this.state.firstLevelData.map(function(item){var indexA=nodes.findIndex(function(data){return data.id===item.NODE_A;});if(indexA<0){pushItem(item.NODE_A,item.NODE_A_TYPE,_this5.Icons);}var indexB=nodes.findIndex(function(data){return data.id===item.NODE_B;});if(indexB<0){pushItem(item.NODE_B,item.NODE_B_TYPE,_this5.Icons);}edges.push({from:item.NODE_A,to:item.NODE_B});});// this row for store the first state of graph data.\n// Once we select a node, it will turn to red font, others will stay black.\nthis.unformatedData={nodes:nodes,edges:edges};// once the data is ready to show, redux is updating.\nthis.props.setTopologyFirstLevel({nodes:nodes,edges:edges});this.setState({dropdownLabels:labels.sort()});}},{key:\"prepareSecondLevelData\",value:function prepareSecondLevelData(data,aggregSite){var _this6=this;var nodes=[],edges=[],labels=[];function pushItem(id,Icons){var radioIcon=Icons.getIconForNode('RADIO_SITE');var aggregIcon=Icons.getIconForNode('AGGREGATE_SITE');nodes.push({id:id,label:id,shape:'image',font:{color:'black',size:'13'},size:25,image:id===aggregSite?aggregIcon:radioIcon});if(id!==aggregSite)labels.push(id);}if(data){data.map(function(item){var indexA=nodes.findIndex(function(data){return data.id===item.A_SITE;});if(indexA<0){pushItem(item.A_SITE,_this6.Icons);}var indexB=nodes.findIndex(function(data){return data.id===item.Z_SITE;});if(indexB<0){pushItem(item.Z_SITE,_this6.Icons);}edges.push({from:item.A_SITE,to:item.Z_SITE});});// this row for store the first state of graph data.\n// Once we select a node, it will turn to red font, others will stay black.\nthis.unformatedDataSecondLevel={nodes:nodes,edges:edges};// set the second level topology diagram.\n// It will update the redux and it trigger to rerender of modal window.\nthis.props.setTopologySecondLevel({nodes:nodes,edges:edges});// set the secondLevel topology view dropdown list\nthis.props.setTopologySecondLevelDropDown({dropdownList:labels});}}},{key:\"handleSelectAggregSite\",value:function(){var _handleSelectAggregSite=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(selectedNodeId){var _this7=this;var newGraph;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:newGraph=JSON.parse(JSON.stringify(this.unformatedData));if(newGraph){newGraph.nodes.map(function(node){if(node.id===selectedNodeId){node.font={color:'red',size:_this7.props.fontSize};node.size=40;}});this.props.setTopologyFirstLevel(newGraph);}case 2:case\"end\":return _context4.stop();}}},_callee4,this);}));function handleSelectAggregSite(_x4){return _handleSelectAggregSite.apply(this,arguments);}return handleSelectAggregSite;}()},{key:\"render\",value:function render(){var _this$props2=this.props,language=_this$props2.language,maximize=_this$props2.maximize,contentCSS=_this$props2.contentCSS,graph=_this$props2.graph;var diagramAreaIdLevelOne='diagramLevel1';var diagramAreaIdLevelTwo='diagramLevel2';if(language!==null){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Header,null),/*#__PURE__*/React.createElement(\"div\",{className:\"row h-100\"},/*#__PURE__*/React.createElement(Sidebar,{maximize:maximize}),/*#__PURE__*/React.createElement(\"div\",{className:contentCSS},/*#__PURE__*/React.createElement(Toolbar,{wrapper:'card toolbar mt-2',labels:this.state.dropdownLabels,handleAggregSiteChange:this.handleSelectAggregSite.bind(this),handleRegionChange:this.getDataByRegion.bind(this),topologyLevel:1,diagramAreaId:diagramAreaIdLevelOne,snapshotFileName:this.fileName}),/*#__PURE__*/React.createElement(Card,{id:diagramAreaIdLevelOne,className:'mt-1 fixedCard'},/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(\"h4\",{className:'topologyViewHeader'},language.ranTopology),this.state.dataExist&&graph&&/*#__PURE__*/React.createElement(TopologyDiagram,{id:'diagramLevel1',height:'95%',graph:graph,events:this.events}),!this.state.dataExist&&/*#__PURE__*/React.createElement(EmptyDataset,{page:'ran',showButton:true}))))),/*#__PURE__*/React.createElement(ModalTemplate,{diagramAreaId:diagramAreaIdLevelTwo}));}else{return/*#__PURE__*/React.createElement(React.Fragment,null);}}}]);return Ran;}(React.Component);function mapStateToProps(state){return{token:state.token,region:state.region,language:state.language,maximize:state.maximize,contentCSS:state.contentCSS,graph:state.topologyFirstLevel,fontSize:state.topologySelectedNodeFontSize,authUser:state.user};}function mapDispatchToProps(dispatch){return{setModal:function setModal(){return dispatch(modalToggle());},setModalTitle:function setModalTitle(content){return dispatch(modalTitle(content));},setTopologyFirstLevel:function setTopologyFirstLevel(graph){return dispatch(_setTopologyFirstLevel(graph));},setTopologySecondLevel:function setTopologySecondLevel(graph){return dispatch(_setTopologySecondLevel(graph));},setTopologySecondLevelDropDown:function setTopologySecondLevelDropDown(labels){return dispatch(setTopologySecondLevelDropdownLabels(labels));}};}export default connect(mapStateToProps,mapDispatchToProps)(Ran);","map":{"version":3,"sources":["C:/Users/soperasyon27/Desktop/FE/src18mart/src/src/views/Ran.jsx"],"names":["React","connect","Toolbar","Header","Sidebar","ModalTemplate","TopologyDiagram","modalToggle","modalTitle","setTopologyFirstLevel","setTopologySecondLevel","setTopologySecondLevelDropdownLabels","IconModule","RestApiModule","AlertModule","EmptyDataset","Card","CardBody","Ran","props","_isMounted","events","doubleClick","event","nodes","nodeID","node","graph","find","item","id","type","getDataByAggregSite","setModalTitle","Icons","restApi","alert","state","firstLevelData","dropdownLabels","dataExist","unformatedData","unformatedDataSecondLevel","today","Date","todayDate","getDate","toLocaleString","month","getFullYear","fileName","getDataByRegion","Promise","resolve","setState","token","region","callApi","then","response","d","RANTopologyFirstLevelViewData","length","setStateAsync","prepareFirstLevelData","catch","error","console","log","selectedNode","RANTopologySecondLevelViewData","prepareSecondLevelData","setModal","edges","labels","pushItem","push","label","shape","font","color","size","image","getIconForNode","map","indexA","findIndex","data","NODE_A","NODE_A_TYPE","indexB","NODE_B","NODE_B_TYPE","from","to","sort","aggregSite","radioIcon","aggregIcon","A_SITE","Z_SITE","setTopologySecondLevelDropDown","dropdownList","selectedNodeId","newGraph","JSON","parse","stringify","fontSize","language","maximize","contentCSS","diagramAreaIdLevelOne","diagramAreaIdLevelTwo","handleSelectAggregSite","bind","ranTopology","Component","mapStateToProps","topologyFirstLevel","topologySelectedNodeFontSize","authUser","user","mapDispatchToProps","dispatch","content"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Toolbar from '../components/TopologyToolbar'\r\nimport Header from \"../components/Header\";\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport ModalTemplate from '../components/Modal'\r\nimport TopologyDiagram from '../components/TopologyDiagram'\r\nimport {\r\n    modalToggle, modalTitle,\r\n    setTopologyFirstLevel,\r\n    setTopologySecondLevel,\r\n    setTopologySecondLevelDropdownLabels\r\n} from \"../redux/actions\";\r\n\r\nimport IconModule from '../IconModule';\r\nimport RestApiModule from '../RestApiModule'\r\nimport AlertModule from '../AlertModule'\r\nimport EmptyDataset from \"../components/EmptyDataset\";\r\nimport {Card, CardBody} from 'reactstrap';\r\n\r\n\r\nclass Ran extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.Icons = new IconModule();\r\n        this.restApi = new RestApiModule();\r\n        this.alert = new AlertModule();\r\n\r\n        this.state = {\r\n            firstLevelData: null,\r\n            dropdownLabels: null,\r\n            dataExist: true\r\n        }\r\n\r\n        this.unformatedData = null\r\n        this.unformatedDataSecondLevel = null\r\n\r\n        this.today = new Date();\r\n        this.todayDate = '_' + this.today.getDate() +  (this.today.toLocaleString('default', { month: 'long' })) + this.today.getFullYear();\r\n        this.fileName = 'RanTopology' + this.todayDate + '.png';\r\n\r\n        // init first data\r\n        this.getDataByRegion();\r\n    }\r\n\r\n    events = {\r\n        doubleClick: (event) => {\r\n            const {nodes} = event;\r\n            const nodeID = nodes[0];\r\n\r\n            if (nodeID) {\r\n                // type must be aggreg_site\r\n                const node = this.props.graph.nodes.find((item) => {\r\n                    return item.id === nodeID\r\n                });\r\n                if (node.type === 'AGGREGATE_SITE') {\r\n                    this.getDataByAggregSite(nodeID);\r\n\r\n                    this.props.setModalTitle(nodeID);\r\n\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    setStateAsync(state) {\r\n        return new Promise((resolve) => {\r\n            this.setState(state, resolve)\r\n        });\r\n    }\r\n\r\n    getDataByRegion() {\r\n\r\n        const {token, region} = this.props;\r\n\r\n        this.restApi.callApi('ranFirst', {\r\n            token,\r\n            region\r\n\r\n        }).then(async (response) => {\r\n\r\n            const d = response.RANTopologyFirstLevelViewData;\r\n\r\n            if (this._isMounted && (d && d.length > 0)) {\r\n                await this.setStateAsync({firstLevelData: d, dataExist: true});\r\n\r\n                this.prepareFirstLevelData();\r\n\r\n            } else {\r\n                this.setStateAsync({dataExist: false})\r\n            }\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n            this.setStateAsync({dataExist: false})\r\n        });\r\n\r\n    }\r\n\r\n    async getDataByAggregSite(id) {\r\n\r\n        const {token} = this.props;\r\n\r\n        this.restApi.callApi('ranSecond', {\r\n            selectedNode: id,\r\n            token\r\n\r\n        }).then(async (response) => {\r\n\r\n            const d = response.RANTopologySecondLevelViewData;\r\n\r\n            if (d.length > 0) await this.prepareSecondLevelData(d, id);\r\n\r\n            this.props.setModal();\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n        });\r\n    }\r\n\r\n    prepareFirstLevelData() {\r\n\r\n        let nodes = [], edges = [], labels = [];\r\n\r\n        function pushItem(id, type, Icons) {\r\n\r\n            if (type === 'AGGREGATE_SITE') {\r\n                labels.push(id);\r\n            }\r\n            nodes.push({\r\n                id: id,\r\n                label: id,\r\n                type: type,\r\n                shape: 'image',\r\n                font: {color: 'black', size: '13'},\r\n                size: 25,\r\n                image: Icons.getIconForNode(type)\r\n            })\r\n        }\r\n\r\n        this.state.firstLevelData.map((item) => {\r\n\r\n            const indexA = nodes.findIndex(data => data.id === item.NODE_A);\r\n            if (indexA < 0) {\r\n                pushItem(item.NODE_A, item.NODE_A_TYPE, this.Icons);\r\n            }\r\n\r\n            const indexB = nodes.findIndex(data => data.id === item.NODE_B);\r\n            if (indexB < 0) {\r\n                pushItem(item.NODE_B, item.NODE_B_TYPE, this.Icons);\r\n            }\r\n\r\n            edges.push({\r\n                from: item.NODE_A,\r\n                to: item.NODE_B\r\n            });\r\n        });\r\n\r\n        // this row for store the first state of graph data.\r\n        // Once we select a node, it will turn to red font, others will stay black.\r\n        this.unformatedData = {nodes, edges};\r\n\r\n        // once the data is ready to show, redux is updating.\r\n        this.props.setTopologyFirstLevel({\r\n            nodes,\r\n            edges\r\n        });\r\n\r\n        this.setState({dropdownLabels: labels.sort()});\r\n\r\n    }\r\n\r\n    prepareSecondLevelData(data, aggregSite) {\r\n\r\n        let nodes = [], edges = [], labels = [];\r\n\r\n        function pushItem(id, Icons) {\r\n\r\n            const radioIcon = Icons.getIconForNode('RADIO_SITE');\r\n            const aggregIcon = Icons.getIconForNode('AGGREGATE_SITE');\r\n\r\n            nodes.push({\r\n                id: id,\r\n                label: id,\r\n                shape: 'image',\r\n                font: {color: 'black', size: '13'},\r\n                size: 25,\r\n                image: id === aggregSite ? aggregIcon : radioIcon\r\n            })\r\n\r\n            if (id !== aggregSite) labels.push(id);\r\n        }\r\n\r\n        if (data) {\r\n            data.map((item) => {\r\n\r\n                const indexA = nodes.findIndex(data => data.id === item.A_SITE);\r\n                if (indexA < 0) {\r\n                    pushItem(item.A_SITE, this.Icons);\r\n                }\r\n\r\n                const indexB = nodes.findIndex(data => data.id === item.Z_SITE);\r\n                if (indexB < 0) {\r\n                    pushItem(item.Z_SITE, this.Icons);\r\n                }\r\n\r\n                edges.push({\r\n                    from: item.A_SITE,\r\n                    to: item.Z_SITE\r\n                });\r\n            });\r\n\r\n            // this row for store the first state of graph data.\r\n            // Once we select a node, it will turn to red font, others will stay black.\r\n            this.unformatedDataSecondLevel = {nodes, edges};\r\n\r\n            // set the second level topology diagram.\r\n            // It will update the redux and it trigger to rerender of modal window.\r\n            this.props.setTopologySecondLevel({\r\n                nodes,\r\n                edges\r\n            });\r\n\r\n            // set the secondLevel topology view dropdown list\r\n            this.props.setTopologySecondLevelDropDown({\r\n                dropdownList: labels\r\n            })\r\n        }\r\n    }\r\n\r\n    async handleSelectAggregSite(selectedNodeId) {\r\n\r\n        let newGraph = JSON.parse(JSON.stringify(this.unformatedData));\r\n\r\n        if (newGraph) {\r\n            newGraph.nodes.map((node) => {\r\n                if (node.id === selectedNodeId) {\r\n                    node.font = {color: 'red', size: this.props.fontSize};\r\n                    node.size = 40;\r\n                }\r\n            });\r\n            this.props.setTopologyFirstLevel(newGraph);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {language, maximize, contentCSS, graph} = this.props;\r\n        const diagramAreaIdLevelOne = 'diagramLevel1';\r\n        const diagramAreaIdLevelTwo = 'diagramLevel2';\r\n\r\n        if (language !== null) {\r\n            return (\r\n                <>\r\n                    <Header/>\r\n                    <div className=\"row h-100\">\r\n                        <Sidebar maximize={maximize}/>\r\n\r\n                        <div className={contentCSS}>\r\n\r\n                            <Toolbar wrapper={'card toolbar mt-2'}\r\n                                     labels={this.state.dropdownLabels}\r\n                                     handleAggregSiteChange={this.handleSelectAggregSite.bind(this)}\r\n                                     handleRegionChange={this.getDataByRegion.bind(this)}\r\n                                     topologyLevel={1}\r\n                                     diagramAreaId={diagramAreaIdLevelOne}\r\n                                     snapshotFileName={this.fileName}\r\n                            />\r\n\r\n                            <Card id={diagramAreaIdLevelOne} className={'mt-1 fixedCard'}>\r\n                                <CardBody>\r\n                                    <h4 className={'topologyViewHeader'}>{language.ranTopology}</h4>\r\n\r\n                                    {(this.state.dataExist && graph) &&\r\n                                    <TopologyDiagram\r\n                                        id={'diagramLevel1'}\r\n                                        height={'95%'}\r\n                                        graph={graph}\r\n                                        events={this.events}/>\r\n                                    }\r\n\r\n                                    {!this.state.dataExist &&\r\n                                    <EmptyDataset page={'ran'} showButton={true}/>\r\n                                    }\r\n                                </CardBody>\r\n                            </Card>\r\n                        </div>\r\n                    </div>\r\n                    <ModalTemplate diagramAreaId={diagramAreaIdLevelTwo} />\r\n                </>\r\n            )\r\n        } else {\r\n            return (<></>);\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        region: state.region,\r\n        language: state.language,\r\n        maximize: state.maximize,\r\n        contentCSS: state.contentCSS,\r\n        graph: state.topologyFirstLevel,\r\n        fontSize: state.topologySelectedNodeFontSize,\r\n        authUser: state.user\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModal: () => dispatch(modalToggle()),\r\n        setModalTitle: (content) => dispatch(modalTitle(content)),\r\n        setTopologyFirstLevel: (graph) => dispatch(setTopologyFirstLevel(graph)),\r\n        setTopologySecondLevel: (graph) => dispatch(setTopologySecondLevel(graph)),\r\n        setTopologySecondLevelDropDown: (labels) => dispatch(setTopologySecondLevelDropdownLabels(labels))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Ran);"]},"metadata":{},"sourceType":"module"}