{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\components\\\\Modal.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Modal, ModalHeader, ModalBody, Alert } from 'reactstrap';\nimport { modalTitle, modalToggle, setTopologySecondLevel } from \"../redux/actions\";\nimport TopologyDiagram from '../components/TopologyDiagram';\nimport ToolbarRan from \"./TopologyToolbar\";\n\nclass ModalTemplate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSelectNode = selectedNodeId => {\n      const _this$props = this.props,\n            graph = _this$props.graph,\n            fontSize = _this$props.fontSize;\n      let newGraph = JSON.parse(JSON.stringify(graph));\n      newGraph.nodes.map(node => {\n        node.font = {\n          color: 'black',\n          size: 13\n        };\n\n        if (node.id === selectedNodeId) {\n          node.font = {\n            color: 'red',\n            size: fontSize\n          };\n          node.size = 40;\n        }\n      });\n      this.props.setTopologySecondLevel(newGraph);\n    };\n  }\n\n  toggle() {\n    if (this.props.open) {\n      setTimeout(() => {\n        // this is need for clear second level data\n        this.props.setTopologySecondLevel(null);\n      }, 500);\n    }\n\n    this.props.setModal();\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          language = _this$props2.language,\n          title = _this$props2.title,\n          graph = _this$props2.graph,\n          diagramAreaId = _this$props2.diagramAreaId,\n          labels = _this$props2.labels;\n\n    if (language !== null) {\n      const sizeOfModal = graph ? 'xxl' : 'md';\n      return React.createElement(Modal, {\n        isOpen: this.props.open,\n        size: sizeOfModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggle.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, title), React.createElement(ModalBody, {\n        id: diagramAreaId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, labels && React.createElement(ToolbarRan, {\n        handleSelectNode: this.handleSelectNode.bind(this),\n        labels: labels.dropdownList,\n        topologyLevel: 2,\n        diagramAreaId: diagramAreaId,\n        snapshotFileName: 'RanTopologySecondLevel.png',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), graph && React.createElement(TopologyDiagram, {\n        graph: graph,\n        height: '85%',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), !graph && React.createElement(Alert, {\n        color: 'danger',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, language.aggregSiteNoData)));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    language: state.language,\n    open: state.modalToggle,\n    title: state.modalTitle,\n    graph: state.topologySecondLevel,\n    labels: state.topologySecondLevelDropdownLabels,\n    fontSize: state.topologySelectedNodeFontSize\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setModal: () => dispatch(modalToggle()),\n    setModalTitle: content => dispatch(modalTitle(content)),\n    setTopologySecondLevel: graph => dispatch(setTopologySecondLevel(graph))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalTemplate);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/Modal.jsx"],"names":["React","connect","Modal","ModalHeader","ModalBody","Alert","modalTitle","modalToggle","setTopologySecondLevel","TopologyDiagram","ToolbarRan","ModalTemplate","Component","handleSelectNode","selectedNodeId","props","graph","fontSize","newGraph","JSON","parse","stringify","nodes","map","node","font","color","size","id","toggle","open","setTimeout","setModal","render","language","title","diagramAreaId","labels","sizeOfModal","bind","dropdownList","aggregSiteNoData","mapStateToProps","state","topologySecondLevel","topologySecondLevelDropdownLabels","topologySelectedNodeFontSize","mapDispatchToProps","dispatch","setModalTitle","content"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Modal, ModalHeader, ModalBody, Alert} from 'reactstrap';\r\nimport {modalTitle, modalToggle, setTopologySecondLevel} from \"../redux/actions\";\r\nimport TopologyDiagram from '../components/TopologyDiagram'\r\nimport ToolbarRan from \"./TopologyToolbar\";\r\n\r\nclass ModalTemplate extends React.Component {\r\n\r\n    toggle() {\r\n        if (this.props.open) {\r\n            setTimeout(() => {\r\n                // this is need for clear second level data\r\n                this.props.setTopologySecondLevel(null)\r\n            }, 500)\r\n        }\r\n        this.props.setModal();\r\n    }\r\n\r\n    handleSelectNode = selectedNodeId => {\r\n\r\n        const {graph, fontSize} = this.props;\r\n\r\n        let newGraph = JSON.parse(JSON.stringify(graph));\r\n\r\n        newGraph.nodes.map((node) => {\r\n            node.font = {color: 'black', size: 13}\r\n            if (node.id === selectedNodeId) {\r\n                node.font = {color: 'red', size: fontSize};\r\n                node.size = 40;\r\n            }\r\n        });\r\n        this.props.setTopologySecondLevel(newGraph);\r\n\r\n    };\r\n\r\n    render() {\r\n        const {language, title, graph, diagramAreaId, labels} = this.props;\r\n\r\n        if (language !== null) {\r\n            const sizeOfModal = graph ? 'xxl' : 'md'\r\n            return (\r\n                <Modal isOpen={this.props.open} size={sizeOfModal}>\r\n\r\n                    <ModalHeader toggle={this.toggle.bind(this)}>{title}</ModalHeader>\r\n\r\n                    <ModalBody id={diagramAreaId}>\r\n                        {labels &&\r\n                        <ToolbarRan handleSelectNode={this.handleSelectNode.bind(this)}\r\n                                    labels={labels.dropdownList}\r\n                                    topologyLevel={2}\r\n                                    diagramAreaId={diagramAreaId}\r\n                                    snapshotFileName={'RanTopologySecondLevel.png'}/>\r\n                        }\r\n                        {graph &&\r\n                        <TopologyDiagram graph={graph} height={'85%'}/>\r\n                        }\r\n                        {!graph &&\r\n                            <Alert color={'danger'}>\r\n                                {language.aggregSiteNoData}\r\n                            </Alert>\r\n                        }\r\n                    </ModalBody>\r\n                </Modal>\r\n            )\r\n        } else {\r\n            return (<></>)\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        language: state.language,\r\n        open: state.modalToggle,\r\n        title: state.modalTitle,\r\n        graph: state.topologySecondLevel,\r\n        labels: state.topologySecondLevelDropdownLabels,\r\n        fontSize: state.topologySelectedNodeFontSize\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModal: () => dispatch(modalToggle()),\r\n        setModalTitle: (content) => dispatch(modalTitle(content)),\r\n        setTopologySecondLevel: (graph) => dispatch(setTopologySecondLevel(graph))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalTemplate);"]},"metadata":{},"sourceType":"module"}