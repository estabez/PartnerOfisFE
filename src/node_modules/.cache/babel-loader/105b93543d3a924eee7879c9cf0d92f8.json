{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\SSCM\\\\ss\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\SSCM\\\\ss\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\SSCM\\\\ss\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\SSCM\\\\ss\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";/*\r\n* Authentication Manage Module\r\n*\r\n*/import RestApiModule from'./RestApiModule';import CryptoModule from'./CryptoModule';import store from'./redux/store';import{setToken,setAuthUser,setRegions,setSelectedRegion,setRadioSites}from'./redux/actions';var AuthModule=/*#__PURE__*/function(){function AuthModule(){_classCallCheck(this,AuthModule);this.store=store;this.restApi=new RestApiModule();this.crypto=new CryptoModule();this.roleDefinitions=[];}_createClass(AuthModule,[{key:\"login\",value:function login(u,p){var _this=this;return new Promise(function(res,rej){_this.restApi.callApi('login',{username:u,password:_this.crypto.encrypt(p)}).then(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(response){var token;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:token=response.token;_context.next=3;return _this.registerUser(token,u).then(function(r){return res(r);});case 3:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}()).catch(function(err){rej({loginError:true,err:err});});});}},{key:\"constructRoleDefinitions\",value:function constructRoleDefinitions(token){var _this2=this;return new Promise(function(res,rej){_this2.restApi.callApi('getConfig',{token:token}).then(function(response){_this2.roleDefinitions=JSON.parse(response.configurations.roleDefinitions);res(true);});});}},{key:\"registerUser\",value:function registerUser(token,u){return new Promise(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(res,rej){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:res(true);//await this.constructRoleDefinitions(token);\n/*  await this.userRegions(token).then(async (regions) => {\r\n\r\n                this.store.dispatch(setRegions(regions));\r\n                this.store.dispatch(setSelectedRegion(regions[0]));\r\n\r\n                // Set radio site list for default region\r\n                await this.defaultRadioSiteList(token, regions[0]);\r\n\r\n            }).catch((empty) => {\r\n                this.store.dispatch(setRegions(empty));\r\n                this.store.dispatch(setSelectedRegion(null));\r\n\r\n            });\r\n*/ /*   this.roleDef(token).then(role => {\r\n\r\n                const user = {\r\n                    name: u,\r\n                    role\r\n                };\r\n\r\n                this.store.dispatch(setToken(token));\r\n                this.store.dispatch(setAuthUser(user));\r\n                res(true);\r\n            }).catch(() =>{\r\n                rej(true)\r\n            })*/case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2,_x3){return _ref2.apply(this,arguments);};}());}},{key:\"userRegions\",value:function userRegions(token){var _this3=this;// this method changed to get all picklist in db\n// In prev version we got only user's regions\nreturn new Promise(function(res,rej){_this3.restApi.callApi('getPickList',{pickListName:\"regionPicklist\",token:token}).then(function(response){var regions=response.pickList.map(function(item){return item.regionPicklist_value;});res(regions.sort());}).catch(function(err){rej([]);});});}},{key:\"defaultRadioSiteList\",value:function defaultRadioSiteList(token,region){var _this4=this;// It'll set radio site list for default region for user.\n// Radio site list will change once region changed\nreturn new Promise(function(res,rej){_this4.restApi.callApi('getRadioListByRegion',{region:region,token:token}).then(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response){var list;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return response.List.map(function(item){return item.value;});case 2:list=_context3.sent;_this4.store.dispatch(setRadioSites(list.sort()));res(true);case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x4){return _ref3.apply(this,arguments);};}()).catch(function(err){//this.store.dispatch(setRadioSites([]));\nrej(false);});});}},{key:\"getRole\",value:function getRole(role){if(this.roleDefinitions){return this.roleDefinitions.find(function(item){return item.roleName===role;});}}},{key:\"roleDef\",value:function roleDef(token){var _this5=this;return new Promise(function(res,rej){_this5.restApi.callApi('getRoles',{token:token}).then(function(response){var roleDefinition={mainPage:'',permittedColumns:[],permittedPages:[]};if(response){//console.log(response)\nresponse.roles.map(function(item){var _this5$getRole=_this5.getRole(item.role),mainPage=_this5$getRole.mainPage,permittedColumns=_this5$getRole.permittedColumns,permittedPages=_this5$getRole.permittedPages;if(permittedColumns!==null&&typeof permittedColumns==='object'){permittedColumns.map(function(col){if(!roleDefinition.permittedColumns.includes(col))roleDefinition.permittedColumns.push(col);});}if(permittedPages!==null&&typeof permittedPages==='object'){permittedPages.map(function(col){if(!roleDefinition.permittedPages.includes(col))roleDefinition.permittedPages.push(col);});}if(roleDefinition.mainPage===''){roleDefinition.mainPage=mainPage;}});}res(roleDefinition);}).catch(function(e){return rej(e);});});}}]);return AuthModule;}();export default AuthModule;","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/SSCM/ss/src/src/AuthModule.js"],"names":["RestApiModule","CryptoModule","store","setToken","setAuthUser","setRegions","setSelectedRegion","setRadioSites","AuthModule","restApi","crypto","roleDefinitions","u","p","Promise","res","rej","callApi","username","password","encrypt","then","response","token","registerUser","r","catch","err","loginError","JSON","parse","configurations","pickListName","regions","pickList","map","item","regionPicklist_value","sort","region","List","value","list","dispatch","role","find","roleName","roleDefinition","mainPage","permittedColumns","permittedPages","roles","getRole","col","includes","push","e"],"mappings":"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","sourcesContent":["/*\r\n* Authentication Manage Module\r\n*\r\n*/\r\n\r\nimport RestApiModule from './RestApiModule'\r\nimport CryptoModule from './CryptoModule'\r\n\r\nimport store from './redux/store'\r\nimport {setToken, setAuthUser, setRegions, setSelectedRegion, setRadioSites} from './redux/actions'\r\n\r\nclass AuthModule {\r\n\r\n    constructor() {\r\n        this.store = store;\r\n        this.restApi = new RestApiModule();\r\n        this.crypto = new CryptoModule();\r\n\r\n        this.roleDefinitions = [];\r\n    }\r\n\r\n    login(u, p) {\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.restApi.callApi('login', {\r\n\r\n                username: u,\r\n                password: this.crypto.encrypt(p)\r\n\r\n            }).then(async (response) => {\r\n\r\n                const {token} = response;\r\n\r\n                await this.registerUser(token, u).then(r => res(r));\r\n\r\n            }).catch((err) => {\r\n                rej({\r\n                    loginError: true,\r\n                    err: err\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    constructRoleDefinitions(token) {\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.restApi.callApi('getConfig', {\r\n                token\r\n            }).then(response => {\r\n                this.roleDefinitions = JSON.parse(response.configurations.roleDefinitions);\r\n                res(true)\r\n            })\r\n        })\r\n    }\r\n\r\n    registerUser(token, u) {\r\n\r\n        return new Promise (async (res, rej) => {\r\n            res(true);\r\n            //await this.constructRoleDefinitions(token);\r\n\r\n          /*  await this.userRegions(token).then(async (regions) => {\r\n\r\n                this.store.dispatch(setRegions(regions));\r\n                this.store.dispatch(setSelectedRegion(regions[0]));\r\n\r\n                // Set radio site list for default region\r\n                await this.defaultRadioSiteList(token, regions[0]);\r\n\r\n            }).catch((empty) => {\r\n                this.store.dispatch(setRegions(empty));\r\n                this.store.dispatch(setSelectedRegion(null));\r\n\r\n            });\r\n*/\r\n         /*   this.roleDef(token).then(role => {\r\n\r\n                const user = {\r\n                    name: u,\r\n                    role\r\n                };\r\n\r\n                this.store.dispatch(setToken(token));\r\n                this.store.dispatch(setAuthUser(user));\r\n                res(true);\r\n            }).catch(() =>{\r\n                rej(true)\r\n            })*/\r\n        })\r\n    }\r\n\r\n    userRegions(token) {\r\n        // this method changed to get all picklist in db\r\n        // In prev version we got only user's regions\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.restApi.callApi('getPickList', {\r\n                pickListName: \"regionPicklist\",\r\n                token\r\n            }).then((response) => {\r\n\r\n                const regions = response.pickList.map((item) => {\r\n                    return item.regionPicklist_value;\r\n                });\r\n\r\n                res(regions.sort());\r\n            }).catch(err => {\r\n                rej([])\r\n            })\r\n        });\r\n    }\r\n\r\n    defaultRadioSiteList(token, region) {\r\n        // It'll set radio site list for default region for user.\r\n        // Radio site list will change once region changed\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.restApi.callApi('getRadioListByRegion', {\r\n                region,\r\n                token\r\n            }).then(async (response) => {\r\n\r\n                const list = await response.List.map((item) => {\r\n                    return item.value;\r\n                });\r\n\r\n\r\n                this.store.dispatch(setRadioSites(list.sort()));\r\n\r\n                res(true);\r\n            }).catch(err => {\r\n                //this.store.dispatch(setRadioSites([]));\r\n\r\n                rej(false)\r\n            })\r\n        });\r\n    }\r\n\r\n    getRole(role) {\r\n        if (this.roleDefinitions) {\r\n            return this.roleDefinitions.find((item) => {\r\n                return (item.roleName === role)\r\n            })\r\n        }\r\n    }\r\n\r\n    roleDef(token) {\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.restApi.callApi('getRoles', {\r\n                token\r\n            }).then((response) => {\r\n\r\n                let roleDefinition = {\r\n                    mainPage: '',\r\n                    permittedColumns: [],\r\n                    permittedPages: []\r\n                }\r\n\r\n                if (response) {\r\n                    //console.log(response)\r\n                    response.roles.map(item => {\r\n\r\n                        const {mainPage, permittedColumns, permittedPages} = this.getRole(item.role);\r\n\r\n                        if (permittedColumns !== null && typeof permittedColumns === 'object') {\r\n                            permittedColumns.map(col => {\r\n                                if (!roleDefinition.permittedColumns.includes(col))\r\n                                    roleDefinition.permittedColumns.push(col);\r\n                            })\r\n                        }\r\n\r\n                        if (permittedPages !== null && typeof permittedPages === 'object') {\r\n                            permittedPages.map(col => {\r\n                                if (!roleDefinition.permittedPages.includes(col))\r\n                                    roleDefinition.permittedPages.push(col);\r\n                            })\r\n                        }\r\n\r\n                        if (roleDefinition.mainPage === '') {\r\n                            roleDefinition.mainPage = mainPage;\r\n                        }\r\n                    })\r\n                }\r\n                res(roleDefinition);\r\n\r\n            }).catch(e => rej(e));\r\n        })\r\n    }\r\n}\r\n\r\nexport default AuthModule;"]},"metadata":{},"sourceType":"module"}