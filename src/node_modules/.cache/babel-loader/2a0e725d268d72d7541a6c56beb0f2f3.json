{"ast":null,"code":"// CONSTS\nexport const SET_LANG = 'SET_LANG';\nexport const SET_AUTH_USER = 'SET_AUTH_USER';\nexport const SET_MAXIMIZE = 'SET_MAXIMIZE';\nexport const SET_TOKEN = 'SET_TOKEN';\nexport const SET_COMPANY = 'SET_COMPANY';\nexport const SET_REGIONS = 'SET_REGIONS';\nexport const SET_REGION = 'SET_REGION';\nexport const SET_RADIO_SITES = 'SET_RADIO_SITES';\nexport const SET_RADIO_SITE = 'SET_RADIO_SITE'; // MODAL CONSTS\n\nexport const MODAL_TOGGLE = 'MODAL_TOGGLE';\nexport const MODAL_TITLE = 'MODAL_TITLE'; // MODAL IMPORT CONSTS\n\nexport const MODAL_IMPORT_TOGGLE = 'MODAL_IMPORT_TOGGLE'; // SPINNER CONSTS\n\nexport const SPINNER_TOGGLE = 'SPINNER_TOGGLE'; // MODAL Export CONSTS\n\nexport const MODAL_EXPORT_TOGGLE = 'MODAL_EXPORT_TOGGLE'; //EXCEL TO JSON CONSTS\n\nexport const HANDLE_FILE = 'HANDLE_FILE'; // TOPOLOGY CONSTS\n\nexport const SET_TOPOLOGY_FIRST_LEVEL = 'SET_TOPOLOGY_FIRST_LEVEL';\nexport const SET_TOPOLOGY_SECOND_LEVEL = 'SET_TOPOLOGY_SECOND_LEVEL';\nexport const SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS = 'SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS'; // EDIT ON HANDSONTABLE\n\nexport const EDIT_ON_TOGGLE = \"EDIT_ON_TOGGLE\"; //SET IMPORT POLLING\n\nexport const IMPORT_POLLING = 'IMPORT_POLLING'; // SHOW REVISION DATA\n\nexport const SHOW_REVISION = \"SHOW_REVISION\"; // Language settings\n\nexport const setLang = (langFile, lang) => ({\n  type: SET_LANG,\n  payload: {\n    langFile,\n    lang\n  }\n}); // Save the authenticated user data into redux\n\nexport const setAuthUser = user => ({\n  type: SET_AUTH_USER,\n  user\n}); // Save provided web token from server\n\nexport const setToken = token => ({\n  type: SET_TOKEN,\n  token\n});\nexport const setCompany = company => ({\n  type: SET_COMPANY,\n  company\n}); // set user regions into redux\n\nexport const setRegions = regions => ({\n  type: SET_REGIONS,\n  regions\n}); // set selected region from selection component\n\nexport const setSelectedRegion = region => ({\n  type: SET_REGION,\n  region\n}); // set region's radio sites into redux\n\nexport const setRadioSites = radioSites => ({\n  type: SET_RADIO_SITES,\n  radioSites\n}); // set selected radio site from selection component\n\nexport const setSelectedRadioSite = radioSite => ({\n  type: SET_RADIO_SITE,\n  radioSite\n}); // Maximizing setting for content and toolbar\n\nexport const setMaximize = () => ({\n  type: SET_MAXIMIZE\n}); // Show second level topology diagram in modal window for ran\n// modalToggle first state is false, modal will show if this value change to true.\n\nexport const modalToggle = () => ({\n  type: MODAL_TOGGLE\n}); // Set the modal window title\n\nexport const modalTitle = title => ({\n  type: MODAL_TITLE,\n  title\n}); //Modal IMport toggle\n\nexport const modalImportToggle = () => ({\n  type: MODAL_IMPORT_TOGGLE\n}); //Modal Export toggle\n\nexport const modalExportToggle = () => ({\n  type: MODAL_EXPORT_TOGGLE\n}); //Spinner toggle\n\nexport const spinnerToggle = () => ({\n  type: SPINNER_TOGGLE\n}); //Excel to JSON handler\n\nexport const handleFile = () => ({\n  type: HANDLE_FILE\n}); // Topology diagram default state graph data\n\nexport const setTopologyFirstLevel = data => ({\n  type: SET_TOPOLOGY_FIRST_LEVEL,\n  payload: {\n    data\n  }\n}); // Topology diagram second state graph data. This is only need for ran topology\n\nexport const setTopologySecondLevel = data => ({\n  type: SET_TOPOLOGY_SECOND_LEVEL,\n  payload: {\n    data\n  }\n}); // Topology diagram second level dropdown labels, this is only need for ran topology second level\n\nexport const setTopologySecondLevelDropdownLabels = data => ({\n  type: SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS,\n  payload: {\n    data\n  }\n}); // Edit mode flag on handsontable\n\nexport const editOnToggle = () => ({\n  type: EDIT_ON_TOGGLE\n}); // Set import polling redux\n\nexport const setImportPolling = data => ({\n  type: IMPORT_POLLING,\n  data\n}); // Set show revision flag\n\nexport const setShowRevision = () => ({\n  type: SHOW_REVISION\n});","map":{"version":3,"sources":["C:/Users/soperasyon27/Desktop/FE/src18mart/src/src/redux/actions/index.js"],"names":["SET_LANG","SET_AUTH_USER","SET_MAXIMIZE","SET_TOKEN","SET_COMPANY","SET_REGIONS","SET_REGION","SET_RADIO_SITES","SET_RADIO_SITE","MODAL_TOGGLE","MODAL_TITLE","MODAL_IMPORT_TOGGLE","SPINNER_TOGGLE","MODAL_EXPORT_TOGGLE","HANDLE_FILE","SET_TOPOLOGY_FIRST_LEVEL","SET_TOPOLOGY_SECOND_LEVEL","SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS","EDIT_ON_TOGGLE","IMPORT_POLLING","SHOW_REVISION","setLang","langFile","lang","type","payload","setAuthUser","user","setToken","token","setCompany","company","setRegions","regions","setSelectedRegion","region","setRadioSites","radioSites","setSelectedRadioSite","radioSite","setMaximize","modalToggle","modalTitle","title","modalImportToggle","modalExportToggle","spinnerToggle","handleFile","setTopologyFirstLevel","data","setTopologySecondLevel","setTopologySecondLevelDropdownLabels","editOnToggle","setImportPolling","setShowRevision"],"mappings":"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","sourcesContent":["// CONSTS\r\nexport const SET_LANG = 'SET_LANG';\r\nexport const SET_AUTH_USER = 'SET_AUTH_USER';\r\nexport const SET_MAXIMIZE = 'SET_MAXIMIZE';\r\nexport const SET_TOKEN = 'SET_TOKEN';\r\nexport const SET_COMPANY = 'SET_COMPANY';\r\nexport const SET_REGIONS = 'SET_REGIONS';\r\nexport const SET_REGION = 'SET_REGION';\r\nexport const SET_RADIO_SITES = 'SET_RADIO_SITES';\r\nexport const SET_RADIO_SITE = 'SET_RADIO_SITE';\r\n\r\n// MODAL CONSTS\r\nexport const MODAL_TOGGLE = 'MODAL_TOGGLE';\r\nexport const MODAL_TITLE = 'MODAL_TITLE';\r\n\r\n// MODAL IMPORT CONSTS\r\nexport const MODAL_IMPORT_TOGGLE = 'MODAL_IMPORT_TOGGLE';\r\n\r\n// SPINNER CONSTS\r\nexport const SPINNER_TOGGLE = 'SPINNER_TOGGLE';\r\n\r\n// MODAL Export CONSTS\r\nexport const MODAL_EXPORT_TOGGLE = 'MODAL_EXPORT_TOGGLE';\r\n\r\n//EXCEL TO JSON CONSTS\r\nexport const HANDLE_FILE = 'HANDLE_FILE';\r\n\r\n// TOPOLOGY CONSTS\r\nexport const SET_TOPOLOGY_FIRST_LEVEL = 'SET_TOPOLOGY_FIRST_LEVEL';\r\nexport const SET_TOPOLOGY_SECOND_LEVEL = 'SET_TOPOLOGY_SECOND_LEVEL';\r\nexport const SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS = 'SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS';\r\n\r\n// EDIT ON HANDSONTABLE\r\nexport const EDIT_ON_TOGGLE = \"EDIT_ON_TOGGLE\";\r\n\r\n//SET IMPORT POLLING\r\nexport const IMPORT_POLLING = 'IMPORT_POLLING';\r\n\r\n// SHOW REVISION DATA\r\nexport const SHOW_REVISION = \"SHOW_REVISION\";\r\n\r\n// Language settings\r\nexport const setLang = (langFile, lang) => ({\r\n    type: SET_LANG,\r\n    payload: {\r\n        langFile,\r\n        lang\r\n    }\r\n});\r\n\r\n// Save the authenticated user data into redux\r\nexport const setAuthUser = (user) => ({\r\n    type: SET_AUTH_USER,\r\n    user\r\n});\r\n\r\n// Save provided web token from server\r\nexport const setToken = (token) => ({\r\n    type: SET_TOKEN,\r\n    token\r\n});\r\n\r\nexport const setCompany = (company) => ({\r\n    type: SET_COMPANY,\r\n    company\r\n});\r\n\r\n// set user regions into redux\r\nexport const setRegions = (regions) => ({\r\n    type: SET_REGIONS,\r\n    regions\r\n});\r\n\r\n// set selected region from selection component\r\nexport const setSelectedRegion = (region) => ({\r\n    type: SET_REGION,\r\n    region\r\n});\r\n\r\n// set region's radio sites into redux\r\nexport const setRadioSites = (radioSites) => ({\r\n    type: SET_RADIO_SITES,\r\n    radioSites\r\n});\r\n\r\n// set selected radio site from selection component\r\nexport const setSelectedRadioSite = (radioSite) => ({\r\n    type: SET_RADIO_SITE,\r\n    radioSite\r\n});\r\n\r\n// Maximizing setting for content and toolbar\r\nexport const setMaximize = () => ({\r\n    type: SET_MAXIMIZE\r\n});\r\n\r\n// Show second level topology diagram in modal window for ran\r\n// modalToggle first state is false, modal will show if this value change to true.\r\nexport const modalToggle = () => ({\r\n    type: MODAL_TOGGLE\r\n});\r\n\r\n// Set the modal window title\r\nexport const modalTitle = (title) => ({\r\n    type: MODAL_TITLE,\r\n    title\r\n});\r\n\r\n//Modal IMport toggle\r\nexport const modalImportToggle = () => ({\r\n    type: MODAL_IMPORT_TOGGLE\r\n});\r\n\r\n//Modal Export toggle\r\nexport const modalExportToggle = () => ({\r\n    type: MODAL_EXPORT_TOGGLE\r\n});\r\n\r\n//Spinner toggle\r\nexport const spinnerToggle = () => ({\r\n    type:SPINNER_TOGGLE\r\n});\r\n\r\n\r\n//Excel to JSON handler\r\nexport const handleFile = () => ({\r\n    type: HANDLE_FILE\r\n});\r\n\r\n// Topology diagram default state graph data\r\nexport const setTopologyFirstLevel = (data) => ({\r\n    type: SET_TOPOLOGY_FIRST_LEVEL,\r\n    payload: {\r\n        data\r\n    }\r\n});\r\n\r\n// Topology diagram second state graph data. This is only need for ran topology\r\nexport const setTopologySecondLevel = (data) => ({\r\n    type: SET_TOPOLOGY_SECOND_LEVEL,\r\n    payload: {\r\n        data\r\n    }\r\n});\r\n\r\n// Topology diagram second level dropdown labels, this is only need for ran topology second level\r\nexport const setTopologySecondLevelDropdownLabels = (data) => ({\r\n    type: SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS,\r\n    payload: {\r\n        data\r\n    }\r\n});\r\n\r\n// Edit mode flag on handsontable\r\nexport const editOnToggle = () => ({\r\n    type: EDIT_ON_TOGGLE\r\n});\r\n\r\n// Set import polling redux\r\nexport const setImportPolling = (data) => ({\r\n    type: IMPORT_POLLING,\r\n    data\r\n})\r\n\r\n// Set show revision flag\r\nexport const setShowRevision = () => ({\r\n    type: SHOW_REVISION\r\n})\r\n"]},"metadata":{},"sourceType":"module"}