{"ast":null,"code":"/*\r\n* Rest Api module\r\n* Use for call rest api methods from one hand\r\n* It includes error handler\r\n*\r\n*/\nimport axios from 'axios';\nimport AlertModule from './AlertModule';\n\nclass RestApiModule {\n  constructor() {\n    this.alert = new AlertModule();\n    const _process$env = process.env,\n          environment = _process$env.REACT_APP_ENV,\n          preprod = _process$env.REACT_APP_API_GATEWAY_PREPROD,\n          prod = _process$env.REACT_APP_API_GATEWAY_PROD,\n          dev = _process$env.REACT_APP_API_GATEWAY;\n    this.serverPath = environment === \"preprod\" ? preprod : environment === \"prod\" ? prod : dev;\n    this.endpoints = {\n      getConfig: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: \"/GetConfigFileStream\"\n      },\n      login: {\n        serviceName: process.env.REACT_APP_AUTH_SERVICE,\n        methodName: \"/LoginWithCredentials\"\n      },\n      logout: {\n        serviceName: process.env.REACT_APP_AUTH_SERVICE,\n        methodName: \"/Logout\"\n      },\n      checkToken: {\n        serviceName: process.env.REACT_APP_AUTH_SERVICE,\n        methodName: \"/LoginWithToken\"\n      },\n      getRoles: {\n        serviceName: process.env.REACT_APP_AUTH_SERVICE,\n        methodName: \"/GetUserRolesList\"\n      },\n      getRegions: {\n        serviceName: process.env.REACT_APP_AUTH_SERVICE,\n        methodName: \"/GetUserRegions\"\n      },\n      ranFirst: {\n        serviceName: process.env.REACT_APP_RAN_SERVICE,\n        methodName: \"/GetRANTopologyFirstLevelforRegion\"\n      },\n      ranSecond: {\n        serviceName: process.env.REACT_APP_RAN_SERVICE,\n        methodName: \"/GetRANTopologySecondLevelforAggregSite\"\n      },\n      core: {\n        serviceName: process.env.REACT_APP_CORE_SERVICE,\n        methodName: \"/CoreTopologyView\"\n      },\n      wdm: {\n        serviceName: process.env.REACT_APP_WDM_SERVICE,\n        methodName: \"/WDMTopologyView\"\n      },\n      getMatrixDataCount: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: \"/GetConnectivityMatrixCountbyRegion\"\n      },\n      getMatrixData: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: \"/GetConnectivtyMatrixforRegion\"\n      },\n      saveRow: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: \"/SaveRow\"\n      },\n      getPickList: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/GetPickList'\n      },\n      checkRadioSite: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/CheckIfRadioSiteExists'\n      },\n      checkNewAggrSite: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/CheckIfAggregSiteExists'\n      },\n      checkOldAggrSite: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/CheckIfPreAggregSiteExists'\n      },\n      checkBscName: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/CheckBSCNameExists'\n      },\n      checkRncName: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/CheckRNCNameExists'\n      },\n      getIpListByIpTechno: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/GetIpEquipListByIPTechno'\n      },\n      getMWListByTechMWSite: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/GetMWEquipListByTechMWSite'\n      },\n      getMWAggreListByTechnoMWAggre: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/GetMWEquipAggreListByTechnoMWAggre'\n      },\n      getIpListByIPTechno: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/GetIpEquipListByIPTechno'\n      },\n      getMWPortListByMWEquip: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/GetMWPortListByMWEquip'\n      },\n      getMWPortAggreListByMWEquipmentAggre: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/GetMWPortAggreListByMWEquipmentAggre'\n      },\n      getIpPortListUnderIpEquip: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/GetIpPortListUnderIpEquip'\n      },\n      exportData: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/ExportDataMatrixToExcel'\n      },\n      importData: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/ImportDataMatrixFromExcel'\n      },\n      getRadioListByRegion: {\n        serviceName: process.env.REACT_APP_MATRIX_SERVICE,\n        methodName: '/GetRadioSiteByRegion'\n      }\n    };\n  }\n\n  callApi(endpoint, dto) {\n    return new Promise((res, rej) => {\n      const _this$endpoints$endpo = this.endpoints[endpoint],\n            serviceName = _this$endpoints$endpo.serviceName,\n            methodName = _this$endpoints$endpo.methodName;\n      axios({\n        method: \"POST\",\n        url: `${this.serverPath}${serviceName}${methodName}`,\n        data: dto\n      }).then(async response => {\n        //console.log(response);\n        const _response$data = response.data,\n              exec_status = _response$data.exec_status,\n              error_code = _response$data.error_code,\n              error_message = _response$data.error_message;\n\n        if (exec_status === 'success') {\n          res(response.data);\n        }\n\n        if (exec_status === 'error') {\n          const message = error_message ? error_message : \"Null exception\";\n\n          if (+error_code === 10) {\n            this.alert.showMessage('error', 'Error', message, true);\n          } else {\n            this.alert.showMessage('error', 'Error', message, false);\n          }\n\n          rej(false);\n        }\n      }).catch(err => {\n        this.alert.showMessage('error', 'Error', err, false);\n        rej(false);\n      });\n    });\n  }\n\n  getImportEndpoint(endpoint) {\n    const _this$endpoints$endpo2 = this.endpoints[endpoint],\n          serviceName = _this$endpoints$endpo2.serviceName,\n          methodName = _this$endpoints$endpo2.methodName;\n    return `${this.serverPath}${serviceName}${methodName}`;\n  }\n\n}\n\nexport default RestApiModule;","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/RestApiModule.js"],"names":["axios","AlertModule","RestApiModule","constructor","alert","process","env","environment","REACT_APP_ENV","preprod","REACT_APP_API_GATEWAY_PREPROD","prod","REACT_APP_API_GATEWAY_PROD","dev","REACT_APP_API_GATEWAY","serverPath","endpoints","getConfig","serviceName","REACT_APP_MATRIX_SERVICE","methodName","login","REACT_APP_AUTH_SERVICE","logout","checkToken","getRoles","getRegions","ranFirst","REACT_APP_RAN_SERVICE","ranSecond","core","REACT_APP_CORE_SERVICE","wdm","REACT_APP_WDM_SERVICE","getMatrixDataCount","getMatrixData","saveRow","getPickList","checkRadioSite","checkNewAggrSite","checkOldAggrSite","checkBscName","checkRncName","getIpListByIpTechno","getMWListByTechMWSite","getMWAggreListByTechnoMWAggre","getIpListByIPTechno","getMWPortListByMWEquip","getMWPortAggreListByMWEquipmentAggre","getIpPortListUnderIpEquip","exportData","importData","getRadioListByRegion","callApi","endpoint","dto","Promise","res","rej","method","url","data","then","response","exec_status","error_code","error_message","message","showMessage","catch","err","getImportEndpoint"],"mappings":"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","sourcesContent":["/*\r\n* Rest Api module\r\n* Use for call rest api methods from one hand\r\n* It includes error handler\r\n*\r\n*/\r\n\r\nimport axios from 'axios';\r\nimport AlertModule from './AlertModule'\r\n\r\nclass RestApiModule {\r\n\r\n    constructor() {\r\n        this.alert = new AlertModule();\r\n\r\n        const {\r\n            REACT_APP_ENV: environment,\r\n            REACT_APP_API_GATEWAY_PREPROD: preprod,\r\n            REACT_APP_API_GATEWAY_PROD: prod,\r\n            REACT_APP_API_GATEWAY: dev\r\n        } = process.env;\r\n\r\n        this.serverPath = (environment === \"preprod\")\r\n            ? preprod\r\n            : (environment === \"prod\")\r\n                ? prod\r\n                : dev;\r\n\r\n        this.endpoints = {\r\n            getConfig: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: \"/GetConfigFileStream\"\r\n            },\r\n            login: {\r\n                serviceName: process.env.REACT_APP_AUTH_SERVICE,\r\n                methodName: \"/LoginWithCredentials\"\r\n            },\r\n            logout: {\r\n                serviceName: process.env.REACT_APP_AUTH_SERVICE,\r\n                methodName: \"/Logout\"\r\n            },\r\n            checkToken: {\r\n                serviceName: process.env.REACT_APP_AUTH_SERVICE,\r\n                methodName: \"/LoginWithToken\"\r\n            },\r\n            getRoles:{\r\n                serviceName: process.env.REACT_APP_AUTH_SERVICE,\r\n                methodName: \"/GetUserRolesList\"\r\n            },\r\n            getRegions: {\r\n                serviceName: process.env.REACT_APP_AUTH_SERVICE,\r\n                methodName: \"/GetUserRegions\"\r\n            },\r\n            ranFirst: {\r\n                serviceName: process.env.REACT_APP_RAN_SERVICE,\r\n                methodName: \"/GetRANTopologyFirstLevelforRegion\",\r\n            },\r\n            ranSecond: {\r\n                serviceName: process.env.REACT_APP_RAN_SERVICE,\r\n                methodName: \"/GetRANTopologySecondLevelforAggregSite\"\r\n            },\r\n            core: {\r\n                serviceName: process.env.REACT_APP_CORE_SERVICE,\r\n                methodName: \"/CoreTopologyView\"\r\n            },\r\n            wdm: {\r\n                serviceName: process.env.REACT_APP_WDM_SERVICE,\r\n                methodName: \"/WDMTopologyView\"\r\n            },\r\n            getMatrixDataCount: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: \"/GetConnectivityMatrixCountbyRegion\"\r\n            },\r\n            getMatrixData: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: \"/GetConnectivtyMatrixforRegion\"\r\n            },\r\n            saveRow: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: \"/SaveRow\"\r\n            },\r\n            getPickList: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/GetPickList'\r\n            },\r\n            checkRadioSite: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/CheckIfRadioSiteExists'\r\n            },\r\n            checkNewAggrSite: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/CheckIfAggregSiteExists'\r\n            },\r\n            checkOldAggrSite: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/CheckIfPreAggregSiteExists'\r\n            },\r\n            checkBscName: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/CheckBSCNameExists'\r\n            },\r\n            checkRncName: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/CheckRNCNameExists'\r\n            },\r\n            getIpListByIpTechno: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/GetIpEquipListByIPTechno'\r\n            },\r\n            getMWListByTechMWSite: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/GetMWEquipListByTechMWSite'\r\n            },\r\n            getMWAggreListByTechnoMWAggre: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/GetMWEquipAggreListByTechnoMWAggre'\r\n            },\r\n            getIpListByIPTechno: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/GetIpEquipListByIPTechno'\r\n            },\r\n            getMWPortListByMWEquip: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/GetMWPortListByMWEquip'\r\n            },\r\n            getMWPortAggreListByMWEquipmentAggre: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/GetMWPortAggreListByMWEquipmentAggre'\r\n            },\r\n            getIpPortListUnderIpEquip: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/GetIpPortListUnderIpEquip'\r\n            },\r\n            exportData: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/ExportDataMatrixToExcel'\r\n            },\r\n            importData: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/ImportDataMatrixFromExcel'\r\n            },\r\n            getRadioListByRegion: {\r\n                serviceName: process.env.REACT_APP_MATRIX_SERVICE,\r\n                methodName: '/GetRadioSiteByRegion'\r\n            }\r\n        }\r\n    }\r\n\r\n    callApi(endpoint, dto) {\r\n\r\n        return new Promise((res, rej) => {\r\n            const {serviceName, methodName} = this.endpoints[endpoint];\r\n\r\n            axios({\r\n                method: \"POST\",\r\n                url: `${this.serverPath}${serviceName}${methodName}`,\r\n                data: dto\r\n            }).then(async (response) => {\r\n\r\n                //console.log(response);\r\n\r\n                const {exec_status, error_code, error_message} = response.data;\r\n\r\n                if (exec_status === 'success') {\r\n                    res(response.data);\r\n                }\r\n\r\n                if (exec_status === 'error') {\r\n\r\n                    const message = error_message ? error_message : \"Null exception\"\r\n\r\n                    if (+error_code === 10) {\r\n                        this.alert.showMessage('error', 'Error', message, true);\r\n                    } else {\r\n                        this.alert.showMessage('error', 'Error', message, false);\r\n                    }\r\n\r\n                    rej(false)\r\n                }\r\n\r\n            }).catch((err) => {\r\n\r\n                this.alert.showMessage('error', 'Error', err, false);\r\n                rej(false)\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    getImportEndpoint(endpoint) {\r\n\r\n        const {serviceName, methodName} = this.endpoints[endpoint];\r\n\r\n        return `${this.serverPath}${serviceName}${methodName}`;\r\n    }\r\n}\r\n\r\nexport default RestApiModule;"]},"metadata":{},"sourceType":"module"}