{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{connect}from\"react-redux\";import Toolbar from'../components/TopologyToolbar';import Header from\"../components/Header\";import Sidebar from\"../components/Sidebar\";import TopologyDiagram from'../components/TopologyDiagram';import IconModule from'../IconModule';import RestApiModule from'../RestApiModule';import EmptyDataset from\"../components/EmptyDataset\";var Core=/*#__PURE__*/function(_React$Component){_inherits(Core,_React$Component);var _super=_createSuper(Core);function Core(props){var _this;_classCallCheck(this,Core);_this=_super.call(this,props);_this._isMounted=false;_this.state={graph:null,labels:null,dataExist:true};_this.unformatedData=null;_this.restApi=new RestApiModule();_this.today=new Date();_this.todayDate='_'+_this.today.getDate()+_this.today.toLocaleString('default',{month:'long'})+_this.today.getFullYear();_this.fileName='CoreTopology'+_this.todayDate+'.png';return _this;}_createClass(Core,[{key:\"componentDidMount\",value:function componentDidMount(){this._isMounted=true;this.getCoreTopologyData();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this._isMounted=false;}},{key:\"getCoreTopologyData\",value:function getCoreTopologyData(){var _this2=this;this.restApi.callApi('core',{token:this.props.token}).then(function(response){var d=response.CoreTopologyViewData?response.CoreTopologyViewData:[];if(_this2._isMounted&&d.length>0){_this2.prepareData(d);}else{_this2.setState({dataExist:false});}}).catch(function(error){console.log(error);_this2.setState({dataExist:false});});}},{key:\"prepareData\",value:function prepareData(json){var nodes=[],edges=[],labels=[];var Icons=new IconModule();var graph=null;function pushItem(id,label,icon){labels.push(label);nodes.push({id:id,label:label,shape:'image',font:{color:'black',size:14},image:icon,size:25});}if(json){json.map(function(item){var index1=nodes.findIndex(function(data){return data.id===item.CONTROLLER_INST_ID;});var index2=nodes.findIndex(function(data){return data.id===item.MGW_INST_ID;});if(index1<0){pushItem(item.CONTROLLER_INST_ID,item.CONTROLLER_NAME,Icons.getIconForNode(item.CONTROLLER_TYPE));}if(index2<0){pushItem(item.MGW_INST_ID,item.MGW_NAME,Icons.getIconForNode('AGGREGATE_SITE'));}edges.push({from:item.CONTROLLER_INST_ID,to:item.MGW_INST_ID,dashes:true});});graph={nodes:nodes,edges:edges};this.unformatedData=graph;this.setState({graph:graph});this.setState({labels:labels.sort()});}}},{key:\"handleSelectNode\",value:function(){var _handleSelectNode=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(selectedNodeId){var _this3=this;var newGraph;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:newGraph=JSON.parse(JSON.stringify(this.unformatedData));if(newGraph){newGraph.nodes.map(function(node){if(node.label===selectedNodeId){node.font={color:'red',size:_this3.props.fontSize};node.size=50;}});this.setState({graph:newGraph});}case 2:case\"end\":return _context.stop();}}},_callee,this);}));function handleSelectNode(_x){return _handleSelectNode.apply(this,arguments);}return handleSelectNode;}()},{key:\"render\",value:function render(){var _this$props=this.props,language=_this$props.language,maximize=_this$props.maximize,contentCSS=_this$props.contentCSS;var _this$state=this.state,graph=_this$state.graph,dataExist=_this$state.dataExist,labels=_this$state.labels;if(language){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Header,null),/*#__PURE__*/React.createElement(\"div\",{className:\"row h-100\"},/*#__PURE__*/React.createElement(Sidebar,{maximize:maximize}),/*#__PURE__*/React.createElement(\"div\",{className:contentCSS},dataExist&&graph&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Toolbar,{wrapper:'card toolbar mt-2',labels:labels,handleSelectNode:this.handleSelectNode.bind(this),diagramAreaId:'CoreTopology',snapshotFileName:this.fileName}),/*#__PURE__*/React.createElement(\"div\",{id:'CoreTopology',className:'card mt-1 fixedCard'},/*#__PURE__*/React.createElement(\"div\",{className:\"card-body\"},/*#__PURE__*/React.createElement(\"h4\",{className:'topologyViewHeader'},language.coreTopology),/*#__PURE__*/React.createElement(TopologyDiagram,{height:'95% ',graph:graph})))),!dataExist&&/*#__PURE__*/React.createElement(EmptyDataset,{page:'core',showButton:true}))));}else{return/*#__PURE__*/React.createElement(React.Fragment,null);}}}]);return Core;}(React.Component);function mapStateToProps(state){return{token:state.token,language:state.language,maximize:state.maximize,contentCSS:state.contentCSS,fontSize:state.topologySelectedNodeFontSize};}export default connect(mapStateToProps)(Core);","map":{"version":3,"sources":["C:/Users/soperasyon27/Desktop/FE/src18mart/src/src/views/Core.jsx"],"names":["React","connect","Toolbar","Header","Sidebar","TopologyDiagram","IconModule","RestApiModule","EmptyDataset","Core","props","_isMounted","state","graph","labels","dataExist","unformatedData","restApi","today","Date","todayDate","getDate","toLocaleString","month","getFullYear","fileName","getCoreTopologyData","callApi","token","then","response","d","CoreTopologyViewData","length","prepareData","setState","catch","error","console","log","json","nodes","edges","Icons","pushItem","id","label","icon","push","shape","font","color","size","image","map","item","index1","findIndex","data","CONTROLLER_INST_ID","index2","MGW_INST_ID","CONTROLLER_NAME","getIconForNode","CONTROLLER_TYPE","MGW_NAME","from","to","dashes","sort","selectedNodeId","newGraph","JSON","parse","stringify","node","fontSize","language","maximize","contentCSS","handleSelectNode","bind","coreTopology","Component","mapStateToProps","topologySelectedNodeFontSize"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Toolbar from '../components/TopologyToolbar'\r\nimport Header from \"../components/Header\";\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport TopologyDiagram from '../components/TopologyDiagram'\r\n\r\nimport IconModule from '../IconModule';\r\nimport RestApiModule from '../RestApiModule'\r\nimport EmptyDataset from \"../components/EmptyDataset\";\r\n\r\nclass Core extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            graph: null,\r\n            labels: null,\r\n            dataExist: true\r\n        }\r\n\r\n        this.unformatedData = null\r\n\r\n        this.restApi = new RestApiModule();\r\n\r\n        this.today = new Date();\r\n\r\n        this.todayDate = '_' + this.today.getDate() +  (this.today.toLocaleString('default', { month: 'long' })) + this.today.getFullYear();\r\n        this.fileName = 'CoreTopology' + this.todayDate + '.png';\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n        this.getCoreTopologyData();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    getCoreTopologyData() {\r\n\r\n        this.restApi.callApi('core', {\r\n            token: this.props.token\r\n\r\n        }).then((response) => {\r\n\r\n            const d = response.CoreTopologyViewData ? response.CoreTopologyViewData : [];\r\n\r\n            if (this._isMounted && d.length > 0) {\r\n\r\n                this.prepareData(d);\r\n\r\n            } else {\r\n\r\n                this.setState({dataExist: false})\r\n            }\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n            this.setState({dataExist: false})\r\n        });\r\n    }\r\n\r\n    prepareData(json) {\r\n\r\n        const nodes = [], edges = [], labels = [];\r\n        const Icons = new IconModule();\r\n        let graph = null;\r\n\r\n        function pushItem(id, label, icon) {\r\n\r\n            labels.push(label);\r\n\r\n            nodes.push({\r\n                id,\r\n                label,\r\n                shape: 'image',\r\n                font: {color: 'black', size:14},\r\n                image: icon,\r\n                size: 25,\r\n            })\r\n        }\r\n\r\n        if (json) {\r\n\r\n            json.map((item) => {\r\n                const index1 = nodes.findIndex(data => data.id === item.CONTROLLER_INST_ID);\r\n                const index2 = nodes.findIndex(data => data.id === item.MGW_INST_ID);\r\n\r\n                if (index1 < 0) {\r\n                    pushItem(item.CONTROLLER_INST_ID,\r\n                        item.CONTROLLER_NAME,\r\n                        Icons.getIconForNode(item.CONTROLLER_TYPE)\r\n                    );\r\n                }\r\n\r\n                if (index2 < 0) {\r\n                    pushItem(item.MGW_INST_ID,\r\n                        item.MGW_NAME,\r\n                        Icons.getIconForNode('AGGREGATE_SITE')\r\n                    );\r\n                }\r\n\r\n                edges.push({\r\n                    from: item.CONTROLLER_INST_ID,\r\n                    to: item.MGW_INST_ID,\r\n                    dashes: true,\r\n                });\r\n            });\r\n\r\n            graph = {\r\n                nodes,\r\n                edges\r\n            };\r\n\r\n            this.unformatedData = graph;\r\n            this.setState({graph});\r\n            this.setState({labels: labels.sort()});\r\n        }\r\n    }\r\n\r\n    async handleSelectNode(selectedNodeId) {\r\n\r\n        let newGraph = JSON.parse(JSON.stringify(this.unformatedData));\r\n        if (newGraph) {\r\n            newGraph.nodes.map((node) => {\r\n                if (node.label === selectedNodeId) {\r\n                    node.font = {color: 'red', size: this.props.fontSize};\r\n                    node.size = 50;\r\n                }\r\n            });\r\n            this.setState({graph: newGraph});\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {language, maximize, contentCSS} = this.props;\r\n        const {graph, dataExist, labels} = this.state;\r\n\r\n        if (language) {\r\n\r\n            return (\r\n                <>\r\n                    <Header/>\r\n                    <div className=\"row h-100\">\r\n                        <Sidebar maximize={maximize}/>\r\n                        <div className={contentCSS}>\r\n                            {(dataExist && graph) &&\r\n                            <>\r\n                                <Toolbar wrapper={'card toolbar mt-2'}\r\n                                         labels={labels}\r\n                                         handleSelectNode={this.handleSelectNode.bind(this)}\r\n                                         diagramAreaId={'CoreTopology'}\r\n                                         snapshotFileName={this.fileName}\r\n                                />\r\n                                <div id={'CoreTopology'} className={'card mt-1 fixedCard'}>\r\n                                    <div className=\"card-body\">\r\n                                        <h4 className={'topologyViewHeader'}>{language.coreTopology}</h4>\r\n                                        <TopologyDiagram\r\n                                            height={'95% '}\r\n                                            graph={graph}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                            }\r\n\r\n                            {!dataExist &&\r\n                            <EmptyDataset page={'core'} showButton={true}/>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )\r\n        } else {\r\n            return (<></>);\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        language: state.language,\r\n        maximize: state.maximize,\r\n        contentCSS: state.contentCSS,\r\n        fontSize: state.topologySelectedNodeFontSize\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Core);"]},"metadata":{},"sourceType":"module"}