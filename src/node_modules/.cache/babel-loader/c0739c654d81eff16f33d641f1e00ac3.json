{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\components\\\\ModalImport.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { modalImportToggle, spinnerToggle } from \"../redux/actions\";\nimport FileUploadProgress from 'react-fileupload-progress';\nimport XLSX from \"xlsx\";\nimport { make_cols } from \"./MakeColumns\";\nimport { SheetJSFT } from './types';\nimport { groupingMap } from '../matrixDataMap';\nimport RestApiModule from '../RestApiModule';\nimport { Row, Col, Card, CardBody, CardTitle, CardText, CardHeader, CardFooter, Alert, Button } from 'reactstrap';\nimport { saveAs } from 'file-saver';\n\nclass ModalImportTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: null,\n      data: [],\n      cols: [],\n      fileJSON: {},\n      isExcelHeadersValid: null,\n      progress: -1,\n      showButton1: true,\n      showButton2: false,\n      showButton3: false\n    };\n    const _process$env = process.env,\n          REACT_APP_API_GATEWAY = _process$env.REACT_APP_API_GATEWAY,\n          REACT_APP_MATRIX_SERVICE = _process$env.REACT_APP_MATRIX_SERVICE;\n    this.uploadFileUrl = `${REACT_APP_API_GATEWAY}${REACT_APP_MATRIX_SERVICE}/ImportDataMatrixFromExcel`;\n    this.restApi = new RestApiModule();\n    this.fileInput = React.createRef();\n    this.styleBar = {\n      width: 0\n    };\n  }\n\n  handleSelectFile(e) {\n    const files = e.target.files;\n    const JSONOb = {\n      \"importResult\": [{\n        \"totalcount\": 79,\n        \"log\": \" (1)BEN-1028(Ready)\\n mwEquip:NR Port GE-03 (Dir. BEN-1008):not exist in EAImwPort:Port4 GE:not exist in EAImwEquipmentAggre:NR8250 Dir. BEJ-1004):not exist in EAIipEquipment:ME-BEN-1012-01:not exist in EAIipPort:Gi0/3/1:not exist in EAI \",\n        \"successCount\": 78,\n        \"errorcount\": 1\n      }],\n      \"exec_status\": \"success\"\n    };\n    const test = JSON.parse(JSON.stringify(JSONOb));\n    const importresult = test.importResult;\n    console.log(importresult[0].log);\n    if (files && files[0]) this.setState({\n      file: files[0],\n      showButton2: true\n    });\n  }\n\n  handleFile() {\n    /* Boilerplate to set up FileReader */\n    this.props.setSpinner();\n\n    try {\n      const reader = new FileReader();\n      const rABS = !!reader.readAsBinaryString;\n\n      reader.onload = e => {\n        /* Parse data */\n        const bstr = e.target.result;\n        const wb = XLSX.read(bstr, {\n          type: rABS ? 'binary' : 'array',\n          bookVBA: true,\n          sheetRows: 0\n        });\n        /* Get first worksheet */\n\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n\n        const data = XLSX.utils.sheet_to_json(ws, {\n          header: 1,\n          defval: \"\"\n        });\n        /* Update state */\n\n        this.setState({\n          data: data,\n          cols: make_cols(ws['!ref'])\n        }, () => {\n          this.state.fileJSON = JSON.stringify(this.state.data, null, 2);\n          this.handleJSONHeaders();\n        });\n        this.props.setSpinner();\n      };\n\n      if (rABS) {\n        reader.readAsBinaryString(this.state.file);\n      } else {\n        reader.readAsArrayBuffer(this.state.file);\n      }\n    } catch (e) {\n      this.setState({\n        showButton3: false\n      });\n      this.props.setSpinner();\n    }\n  }\n\n  handleJSONHeaders() {\n    const headerMap = JSON.parse(JSON.stringify(groupingMap));\n    const excelHeadersArray = JSON.parse(this.state.fileJSON)[1];\n    const columnsMap = headerMap.reduce((fullArr, item) => {\n      const cols = item.columns.reduce((arr, col) => {\n        if (col.id !== undefined) arr.push(col.id);\n        return arr;\n      }, []);\n      return [...fullArr, ...cols];\n    }, []);\n    const isSame = JSON.stringify(excelHeadersArray) === JSON.stringify(columnsMap);\n    this.setState({\n      isExcelHeadersValid: isSame,\n      showButton3: isSame,\n      showButton2: !isSame\n    });\n  }\n\n  handleTxtReport() {\n    var blob = new Blob([\"Hello, world!\"], {\n      type: \"text/plain;charset=utf-8\"\n    });\n    saveAs(blob, \"Import Report.txt\");\n  }\n\n  toggle() {\n    this.setState({\n      file: null,\n      isExcelHeadersValid: null,\n      showButton2: false,\n      showButton3: false,\n      progress: 0\n    });\n    this.props.setModalImport();\n  }\n\n  customFormRenderer(onSubmit) {\n    const language = this.props.language;\n    return React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: 'success',\n      size: \"lg\",\n      block: true,\n      hidden: !this.state.showButton3,\n      onClick: e => {\n        this.setState({\n          showButton3: false\n        });\n        onSubmit(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, language.upload, React.createElement(\"i\", {\n      className: `icon icon-upload ml-2`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }))));\n  }\n\n  formGetter() {\n    return JSON.stringify({\n      token: this.props.token,\n      importedExcelAsJSON: this.state.fileJSON\n    });\n  }\n\n  customProgressRenderer(progressFile, hasError, cancelHandler) {\n    const progress = this.state.progress;\n\n    if (hasError || progress > -1) {\n      const language = this.props.language;\n      let progressBar = Object.assign({}, this.styleBar);\n      progressBar.width = `${progress}%`; //console.log(importActionResponse.importResult);\n      //const a = JSON.parse(JSON.stringify(importActionResponse));\n      //console.log(a);\n      //const {importResult} = importActionResponse;\n\n      const importActionResponse = this.state.importActionResponse;\n      let importResult1;\n\n      if (importActionResponse) {\n        const a = JSON.parse(JSON.stringify(importActionResponse)); //console.log(a);\n\n        console.log(a.importResult);\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"progressWrapper text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Import progress: \", `${progress}%`), React.createElement(\"div\", {\n        className: \"progressBar\",\n        style: progressBar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      })))), progress === 100 && importResult1 && React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(Card, {\n        body: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, language.importSection.summaryLabel), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(Card, {\n        color: \"primary\",\n        inverse: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        tag: \"h5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, language.importSection.totalRowCount), React.createElement(CardText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, language.importSection.totalRowText), React.createElement(Alert, {\n        tag: \"h4\",\n        color: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, `${importResult1.totalcount} ${language.importSection.rows}`)))), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(Card, {\n        color: \"success\",\n        inverse: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        tag: \"h5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, language.importSection.successRowCount), React.createElement(CardText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, language.importSection.successRowText), React.createElement(Alert, {\n        tag: \"h4\",\n        color: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, `${importResult1.succssCount} ${language.importSection.rows}`)))), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(Card, {\n        color: \"danger\",\n        inverse: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        tag: \"h5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, language.importSection.failedRowCount), React.createElement(CardText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, language.importSection.failedRowText), React.createElement(Alert, {\n        tag: \"h4\",\n        color: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, `${importResult1.errorCount} ${language.importSection.rows}`))))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"primary\",\n        className: \"mt-3\",\n        block: true,\n        size: \"lg\",\n        outline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, language.importSection.downloadLogFile, React.createElement(\"i\", {\n        className: `icon icon-download-save ml-2`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      })))))))));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n  render() {\n    const language = this.props.language;\n\n    if (language) {\n      return React.createElement(Modal, {\n        isOpen: this.props.open,\n        size: 'lg',\n        centered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggle.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, language.importDataMatrixFile), React.createElement(ModalBody, {\n        className: 'import-file',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: fileInput => this.fileInput = fileInput,\n        type: \"file\",\n        accept: SheetJSFT,\n        onChange: this.handleSelectFile.bind(this),\n        hidden: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: '12',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, !this.state.file && React.createElement(\"div\", {\n        className: 'choose-file-wrapper',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"chose-file\",\n        onClick: () => this.fileInput.click(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, language.chooseFile)), this.state.file && React.createElement(\"div\", {\n        className: 'choose-file-wrapper',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, language.importSection.selectedFileLabel, this.state.file.name))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }), this.state.file && React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, this.state.showButton2 && React.createElement(Button, {\n        color: 'primary',\n        className: 'mt-3 mb-3',\n        size: \"lg\",\n        block: true,\n        onClick: this.handleFile.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, language.validate, React.createElement(\"i\", {\n        className: `icon icon-file ml-2`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      })), this.state.isExcelHeadersValid === true && React.createElement(Alert, {\n        color: \"success\",\n        className: 'mt-2',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: `icon icon-check mr-2`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }), language.importSection.selectedFileValid), this.state.isExcelHeadersValid === false && React.createElement(Alert, {\n        color: \"danger\",\n        className: 'mt-2',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: `icon icon-cross mr-2`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }), language.importSection.selectedFileNotValid))), React.createElement(FileUploadProgress, {\n        url: this.uploadFileUrl,\n        method: \"POST\",\n        beforeSend: request => {\n          this.props.setSpinner();\n          this.setState({\n            progress: 25\n          });\n          request.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n          return request;\n        },\n        onProgress: (e, request, progress) => {\n          //console.log('progress', e, request, progress);\n          this.setState({\n            progress: 50\n          });\n        },\n        onLoad: (e, request) => {\n          console.log('load', e, request);\n          this.setState({\n            progress: 100,\n            importActionResponse: request.response\n          });\n          this.props.setSpinner();\n        },\n        onError: (e, request) => {\n          //console.log('error', e, request);\n          this.props.setSpinner();\n        },\n        onAbort: (e, request) => {\n          //console.log('abort', e, request);\n          this.props.setSpinner();\n        },\n        formGetter: this.formGetter.bind(this),\n        formRenderer: this.customFormRenderer.bind(this),\n        progressRenderer: this.customProgressRenderer.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    open: state.modalImportToggle,\n    import: state.import,\n    language: state.language,\n    token: state.token\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setModalImport: () => dispatch(modalImportToggle()),\n    setSpinner: () => dispatch(spinnerToggle())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalImportTemplate);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/ModalImport.jsx"],"names":["React","connect","Modal","ModalHeader","ModalBody","modalImportToggle","spinnerToggle","FileUploadProgress","XLSX","make_cols","SheetJSFT","groupingMap","RestApiModule","Row","Col","Card","CardBody","CardTitle","CardText","CardHeader","CardFooter","Alert","Button","saveAs","ModalImportTemplate","Component","constructor","props","state","file","data","cols","fileJSON","isExcelHeadersValid","progress","showButton1","showButton2","showButton3","process","env","REACT_APP_API_GATEWAY","REACT_APP_MATRIX_SERVICE","uploadFileUrl","restApi","fileInput","createRef","styleBar","width","handleSelectFile","e","files","target","JSONOb","test","JSON","parse","stringify","importresult","importResult","console","log","setState","handleFile","setSpinner","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","sheetRows","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","defval","handleJSONHeaders","readAsArrayBuffer","headerMap","excelHeadersArray","columnsMap","reduce","fullArr","item","columns","arr","col","id","undefined","push","isSame","handleTxtReport","blob","Blob","toggle","setModalImport","customFormRenderer","onSubmit","language","upload","formGetter","token","importedExcelAsJSON","customProgressRenderer","progressFile","hasError","cancelHandler","progressBar","Object","assign","importActionResponse","importResult1","a","importSection","summaryLabel","totalRowCount","totalRowText","totalcount","rows","successRowCount","successRowText","succssCount","failedRowCount","failedRowText","errorCount","downloadLogFile","render","open","bind","importDataMatrixFile","click","chooseFile","selectedFileLabel","name","validate","selectedFileValid","selectedFileNotValid","request","setRequestHeader","response","mapStateToProps","import","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Modal, ModalHeader, ModalBody} from 'reactstrap';\r\nimport {modalImportToggle, spinnerToggle} from \"../redux/actions\";\r\nimport FileUploadProgress from 'react-fileupload-progress';\r\nimport XLSX from \"xlsx\";\r\nimport {make_cols} from \"./MakeColumns\";\r\nimport {SheetJSFT} from './types';\r\nimport {groupingMap} from '../matrixDataMap';\r\nimport RestApiModule from '../RestApiModule';\r\nimport {Row, Col, Card, CardBody, CardTitle, CardText, CardHeader, CardFooter, Alert, Button} from 'reactstrap';\r\n\r\nimport {saveAs} from 'file-saver';\r\n\r\nclass ModalImportTemplate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file: null,\r\n            data: [],\r\n            cols: [],\r\n            fileJSON: {},\r\n            isExcelHeadersValid: null,\r\n            progress: -1,\r\n            showButton1: true,\r\n            showButton2: false,\r\n            showButton3: false,\r\n        }\r\n        const {REACT_APP_API_GATEWAY, REACT_APP_MATRIX_SERVICE} = process.env;\r\n\r\n        this.uploadFileUrl = `${REACT_APP_API_GATEWAY}${REACT_APP_MATRIX_SERVICE}/ImportDataMatrixFromExcel`;\r\n        this.restApi = new RestApiModule();\r\n\r\n        this.fileInput = React.createRef();\r\n\r\n        this.styleBar = {\r\n            width: 0,\r\n        }\r\n    }\r\n\r\n\r\n    handleSelectFile(e) {\r\n        const files = e.target.files;\r\n\r\n\r\n        const JSONOb = {\"importResult\":[{\"totalcount\":79,\"log\":\" (1)BEN-1028(Ready)\\n mwEquip:NR Port GE-03 (Dir. BEN-1008):not exist in EAImwPort:Port4 GE:not exist in EAImwEquipmentAggre:NR8250 Dir. BEJ-1004):not exist in EAIipEquipment:ME-BEN-1012-01:not exist in EAIipPort:Gi0/3/1:not exist in EAI \",\"successCount\":78,\"errorcount\":1}],\"exec_status\":\"success\"};\r\n        const test = JSON.parse(JSON.stringify(JSONOb))\r\n        const importresult = test.importResult;\r\n        console.log(importresult[0].log);\r\n\r\n\r\n        if (files && files[0])\r\n            this.setState({\r\n                file: files[0],\r\n                showButton2: true\r\n            });\r\n    };\r\n\r\n    handleFile() {\r\n        /* Boilerplate to set up FileReader */\r\n        this.props.setSpinner();\r\n        try {\r\n\r\n            const reader = new FileReader();\r\n            const rABS = !!reader.readAsBinaryString;\r\n            reader.onload = (e) => {\r\n                /* Parse data */\r\n                const bstr = e.target.result;\r\n                const wb = XLSX.read(bstr, {type: rABS ? 'binary' : 'array', bookVBA: true, sheetRows: 0});\r\n                /* Get first worksheet */\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n\r\n                /* Convert array of arrays */\r\n                const data = XLSX.utils.sheet_to_json(ws, {\r\n                    header: 1,\r\n                    defval: \"\"\r\n                });\r\n\r\n                /* Update state */\r\n                this.setState({data: data, cols: make_cols(ws['!ref'])}, () => {\r\n                    this.state.fileJSON = JSON.stringify(this.state.data, null, 2);\r\n                    this.handleJSONHeaders();\r\n\r\n                });\r\n                this.props.setSpinner();\r\n            };\r\n\r\n            if (rABS) {\r\n                reader.readAsBinaryString(this.state.file);\r\n            } else {\r\n                reader.readAsArrayBuffer(this.state.file);\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n            this.setState({showButton3: false})\r\n            this.props.setSpinner();\r\n        }\r\n\r\n    }\r\n\r\n    handleJSONHeaders () {\r\n\r\n        const headerMap = JSON.parse(JSON.stringify(groupingMap));\r\n        const excelHeadersArray = (JSON.parse(this.state.fileJSON))[1];\r\n\r\n        const columnsMap = headerMap.reduce((fullArr, item) => {\r\n            const cols = item.columns.reduce((arr, col) => {\r\n                if (col.id !== undefined) arr.push(col.id)\r\n                return arr;\r\n            }, []);\r\n            return [...fullArr, ...cols]\r\n        }, [])\r\n\r\n        const isSame = JSON.stringify(excelHeadersArray) === JSON.stringify(columnsMap);\r\n        this.setState({isExcelHeadersValid: isSame, showButton3: isSame, showButton2: !isSame});\r\n    }\r\n\r\n\r\n    handleTxtReport() {\r\n        var blob = new Blob([\"Hello, world!\"], {type: \"text/plain;charset=utf-8\"});\r\n        saveAs(blob, \"Import Report.txt\");\r\n    }\r\n\r\n\r\n    toggle() {\r\n        this.setState({\r\n            file: null,\r\n            isExcelHeadersValid: null,\r\n            showButton2: false,\r\n            showButton3: false,\r\n            progress: 0\r\n        })\r\n        this.props.setModalImport();\r\n    }\r\n\r\n    customFormRenderer(onSubmit) {\r\n        const {language} = this.props;\r\n\r\n        return (\r\n            <Row>\r\n                <Col>\r\n                    <Button color={'success'} size={\"lg\"} block\r\n                            hidden={!this.state.showButton3}\r\n                            onClick={(e) => {\r\n                                this.setState({showButton3: false});\r\n                                onSubmit(e)\r\n                            }}>\r\n                        {language.upload}\r\n                        <i className={`icon icon-upload ml-2`}/>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    formGetter() {\r\n        return JSON.stringify({\r\n            token: this.props.token,\r\n            importedExcelAsJSON: this.state.fileJSON\r\n        });\r\n    }\r\n\r\n    customProgressRenderer(progressFile, hasError, cancelHandler) {\r\n        const {progress} = this.state;\r\n\r\n        if (hasError || progress > -1) {\r\n\r\n            const {language} = this.props;\r\n\r\n            let progressBar = Object.assign({}, this.styleBar);\r\n            progressBar.width = `${progress}%`;\r\n\r\n            //console.log(importActionResponse.importResult);\r\n            //const a = JSON.parse(JSON.stringify(importActionResponse));\r\n            //console.log(a);\r\n            //const {importResult} = importActionResponse;\r\n\r\n            const {importActionResponse} = this.state;\r\n\r\n            let importResult1;\r\n\r\n            if (importActionResponse) {\r\n\r\n                const a = JSON.parse(JSON.stringify(importActionResponse));\r\n               //console.log(a);\r\n               console.log(a.importResult);\r\n\r\n            }\r\n                return (\r\n                    <>\r\n                        <Row>\r\n                            <Col>\r\n                                <div className={\"progressWrapper text-center\"}>\r\n                                    <span>Import progress: {`${progress}%`}</span>\r\n                                    <div className={\"progressBar\"} style={progressBar} />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        {(progress === 100 && importResult1) &&\r\n                        <Row>\r\n                            <Col>\r\n                                <Card body={false}>\r\n                                    <CardHeader>\r\n                                        {language.importSection.summaryLabel}\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <Card color={\"primary\"} inverse>\r\n                                                    <CardBody>\r\n                                                        <CardTitle tag={\"h5\"}>{language.importSection.totalRowCount}</CardTitle>\r\n                                                        <CardText>{language.importSection.totalRowText}</CardText>\r\n                                                        <Alert tag={\"h4\"} color={\"info\"}>\r\n                                                            {`${importResult1.totalcount} ${language.importSection.rows}`}\r\n                                                        </Alert>\r\n                                                    </CardBody>\r\n                                                </Card>\r\n                                            </Col>\r\n                                            <Col>\r\n                                                <Card color={\"success\"} inverse>\r\n                                                    <CardBody>\r\n                                                        <CardTitle tag={\"h5\"}>{language.importSection.successRowCount}</CardTitle>\r\n                                                        <CardText>{language.importSection.successRowText}</CardText>\r\n                                                        <Alert tag={\"h4\"} color={\"info\"}>\r\n                                                            {`${importResult1.succssCount} ${language.importSection.rows}`}\r\n                                                        </Alert>\r\n                                                    </CardBody>\r\n                                                </Card>\r\n                                            </Col>\r\n                                            <Col>\r\n                                                <Card color={\"danger\"} inverse>\r\n                                                    <CardBody>\r\n                                                        <CardTitle tag={\"h5\"}>{language.importSection.failedRowCount}</CardTitle>\r\n                                                        <CardText>{language.importSection.failedRowText}</CardText>\r\n                                                        <Alert tag={\"h4\"} color={\"info\"}>\r\n                                                            {`${importResult1.errorCount} ${language.importSection.rows}`}\r\n                                                        </Alert>\r\n                                                    </CardBody>\r\n                                                </Card>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <hr/>\r\n                                                <Button color={\"primary\"} className={\"mt-3\"} block size={\"lg\"} outline>\r\n                                                    {language.importSection.downloadLogFile}\r\n                                                    <i className={`icon icon-download-save ml-2`}/>\r\n                                                </Button>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                        }\r\n                    </>\r\n                );\r\n\r\n\r\n\r\n\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {language} = this.props;\r\n        if (language) {\r\n            return (\r\n                <Modal isOpen={this.props.open} size={'lg'} centered={true}>\r\n                    <ModalHeader toggle={this.toggle.bind(this)}>{language.importDataMatrixFile}</ModalHeader>\r\n                    <ModalBody className={'import-file'}>\r\n\r\n                        <input ref={fileInput => this.fileInput = fileInput} type=\"file\"\r\n                               accept={SheetJSFT} onChange={this.handleSelectFile.bind(this)} hidden={true}  />\r\n\r\n                        <Row>\r\n                            <Col md={'12'}>\r\n                                {!this.state.file &&\r\n                                <div className={'choose-file-wrapper'}>\r\n                                    <Button className={\"chose-file\"} onClick={() => this.fileInput.click()}>\r\n                                        {language.chooseFile}\r\n                                    </Button>\r\n                                </div>\r\n                                }\r\n                                {this.state.file &&\r\n                                <div className={'choose-file-wrapper'}>\r\n                                    <h4>\r\n                                        {language.importSection.selectedFileLabel}\r\n                                        {this.state.file.name}\r\n                                    </h4>\r\n                                </div>\r\n                                }\r\n                            </Col>\r\n                            <hr/>\r\n\r\n                            {this.state.file &&\r\n                            <Col>\r\n                                {this.state.showButton2 &&\r\n                                <Button color={'primary'} className={'mt-3 mb-3'} size={\"lg\"} block\r\n                                        onClick={this.handleFile.bind(this)}>\r\n                                    {language.validate}\r\n                                    <i className={`icon icon-file ml-2`}/>\r\n                                </Button>\r\n                                }\r\n                                {this.state.isExcelHeadersValid === true &&\r\n                                <Alert color=\"success\" className={'mt-2'}>\r\n                                    <i className={`icon icon-check mr-2`}/>\r\n                                    {language.importSection.selectedFileValid}\r\n                                </Alert>\r\n                                }\r\n                                {this.state.isExcelHeadersValid === false &&\r\n                                <Alert color=\"danger\" className={'mt-2'}>\r\n                                    <i className={`icon icon-cross mr-2`}/>\r\n                                    {language.importSection.selectedFileNotValid}\r\n                                </Alert>\r\n                                }\r\n                            </Col>\r\n                            }\r\n                        </Row>\r\n\r\n                        <FileUploadProgress\r\n                            url={this.uploadFileUrl}\r\n                            method={\"POST\"}\r\n                            beforeSend={(request) => {\r\n                                this.props.setSpinner();\r\n                                this.setState({progress: 25});\r\n                                request.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\r\n                                return request\r\n                            }}\r\n                            onProgress={(e, request, progress) => {\r\n                                //console.log('progress', e, request, progress);\r\n                                this.setState({progress: 50});\r\n                            }}\r\n                            onLoad={(e, request) => {\r\n                                console.log('load', e, request);\r\n                                this.setState({progress: 100, importActionResponse: request.response});\r\n                                this.props.setSpinner();\r\n                            }}\r\n                            onError={(e, request) => {\r\n                                //console.log('error', e, request);\r\n                                this.props.setSpinner();\r\n                            }}\r\n                            onAbort={(e, request) => {\r\n                                //console.log('abort', e, request);\r\n                                this.props.setSpinner();\r\n                            }}\r\n                            formGetter={this.formGetter.bind(this)}\r\n                            formRenderer={this.customFormRenderer.bind(this)}\r\n                            progressRenderer={this.customProgressRenderer.bind(this)}\r\n\r\n                        />\r\n                    </ModalBody>\r\n\r\n                </Modal>\r\n            )\r\n        } else {\r\n            return (<></>)\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        open: state.modalImportToggle,\r\n        import: state.import,\r\n        language: state.language,\r\n        token: state.token\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModalImport: () => dispatch(modalImportToggle()),\r\n        setSpinner: () => dispatch(spinnerToggle()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalImportTemplate);"]},"metadata":{},"sourceType":"module"}