{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _classCallCheck from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";/*\r\n* Authentication Manage Module\r\n*\r\n*/import RestApiModule from'./RestApiModule';import RoleModule from'./RoleModule';import CryptoModule from'./CryptoModule';import store from'./redux/store';import{setToken,setAuthUser,setRegions,setSelectedRegion}from'./redux/actions';var AuthModule=/*#__PURE__*/function(){function AuthModule(){_classCallCheck(this,AuthModule);this.store=store;this.restApi=new RestApiModule();this.crypto=new CryptoModule();}_createClass(AuthModule,[{key:\"login\",value:function login(u,p){var _this=this;return new Promise(function(res,rej){_this.restApi.callApi('login',{username:_this.crypto.encrypt(u),password:_this.crypto.encrypt(p)}).then(function _callee(response){var token;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:token=response.token;_context.next=3;return _regeneratorRuntime.awrap(_this.registerUser(token,u).then(function(r){return res(r);}));case 3:case\"end\":return _context.stop();}}});}).catch(function(err){rej({loginError:true,err:err});});});}},{key:\"registerUser\",value:function registerUser(token,u){var _this2=this;return new Promise(function _callee3(res,rej){return _regeneratorRuntime.async(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return _regeneratorRuntime.awrap(_this2.userRegions(token).then(function _callee2(regions){return _regeneratorRuntime.async(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_this2.store.dispatch(setRegions(regions));_this2.store.dispatch(setSelectedRegion(regions[0]));case 2:case\"end\":return _context2.stop();}}});}).catch(function(empty){_this2.store.dispatch(setRegions(empty));_this2.store.dispatch(setSelectedRegion(null));}));case 2:_this2.roleDef(token).then(function(role){var user={name:u,role:role};_this2.store.dispatch(setToken(token));_this2.store.dispatch(setAuthUser(user));res(true);});case 3:case\"end\":return _context3.stop();}}});});}},{key:\"userRegions\",value:function userRegions(token){var _this3=this;return new Promise(function(res,rej){_this3.restApi.callApi('getRegions',{token:token}).then(function(response){var regions=response.regions.map(function(item){return item.Region;});res(regions);}).catch(function(err){rej([]);});});}},{key:\"roleDef\",value:function roleDef(token){var _this4=this;return new Promise(function(res,rej){_this4.roleModule=new RoleModule(token);_this4.restApi.callApi('getRoles',{token:token}).then(function(response){var roleDefinition={mainPage:'',permittedColumns:[],permittedPages:[]};response.roles.map(function(item){var _this4$roleModule$get=_this4.roleModule.getRole(item.role),mainPage=_this4$roleModule$get.mainPage,permittedColumns=_this4$roleModule$get.permittedColumns,permittedPages=_this4$roleModule$get.permittedPages;if(permittedColumns!==null&&typeof permittedColumns==='object'){permittedColumns.map(function(col){if(!roleDefinition.permittedColumns.includes(col))roleDefinition.permittedColumns.push(col);});}if(permittedPages!==null&&typeof permittedPages==='object'){permittedPages.map(function(col){if(!roleDefinition.permittedPages.includes(col))roleDefinition.permittedPages.push(col);});}if(roleDefinition.mainPage===''){roleDefinition.mainPage=mainPage;}});res(roleDefinition);}).catch(function(e){return rej(e);});});}}]);return AuthModule;}();export default AuthModule;","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/AuthModule.js"],"names":["RestApiModule","RoleModule","CryptoModule","store","setToken","setAuthUser","setRegions","setSelectedRegion","AuthModule","restApi","crypto","u","p","Promise","res","rej","callApi","username","encrypt","password","then","response","token","registerUser","r","catch","err","loginError","userRegions","regions","dispatch","empty","roleDef","role","user","name","map","item","Region","roleModule","roleDefinition","mainPage","permittedColumns","permittedPages","roles","getRole","col","includes","push","e"],"mappings":"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","sourcesContent":["/*\r\n* Authentication Manage Module\r\n*\r\n*/\r\n\r\nimport RestApiModule from './RestApiModule'\r\nimport RoleModule from './RoleModule'\r\nimport CryptoModule from './CryptoModule'\r\n\r\nimport store from './redux/store'\r\nimport {setToken, setAuthUser, setRegions, setSelectedRegion} from './redux/actions'\r\n\r\nclass AuthModule {\r\n\r\n    constructor() {\r\n        this.store = store;\r\n        this.restApi = new RestApiModule();\r\n        this.crypto = new CryptoModule();\r\n    }\r\n\r\n    login(u, p) {\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.restApi.callApi('login', {\r\n\r\n                username: this.crypto.encrypt(u),\r\n                password: this.crypto.encrypt(p)\r\n\r\n            }).then(async (response) => {\r\n\r\n                const {token} = response;\r\n\r\n                await this.registerUser(token, u).then(r => res(r));\r\n\r\n            }).catch((err) => {\r\n                rej({\r\n                    loginError: true,\r\n                    err: err\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    registerUser(token, u) {\r\n\r\n        return new Promise (async (res, rej) => {\r\n\r\n            await this.userRegions(token).then(async (regions) => {\r\n\r\n                this.store.dispatch(setRegions(regions));\r\n                this.store.dispatch(setSelectedRegion(regions[0]));\r\n\r\n            }).catch((empty) => {\r\n                this.store.dispatch(setRegions(empty));\r\n                this.store.dispatch(setSelectedRegion(null));\r\n\r\n            });\r\n\r\n            this.roleDef(token).then(role => {\r\n\r\n                const user = {\r\n                    name: u,\r\n                    role\r\n                };\r\n\r\n                this.store.dispatch(setToken(token));\r\n                this.store.dispatch(setAuthUser(user));\r\n                res(true);\r\n            })\r\n        })\r\n    }\r\n\r\n    userRegions(token) {\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.restApi.callApi('getRegions', {\r\n                token\r\n            }).then((response) => {\r\n\r\n                const regions = response.regions.map((item) => {\r\n                    return item.Region;\r\n                });\r\n\r\n                res(regions);\r\n            }).catch(err => {\r\n                rej([])\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    roleDef(token) {\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.roleModule = new RoleModule(token);\r\n\r\n            this.restApi.callApi('getRoles', {\r\n                token\r\n            }).then((response) => {\r\n\r\n                let roleDefinition = {\r\n                    mainPage: '',\r\n                    permittedColumns: [],\r\n                    permittedPages: []\r\n                }\r\n\r\n                response.roles.map(item => {\r\n\r\n                    const {mainPage, permittedColumns, permittedPages} = this.roleModule.getRole(item.role);\r\n\r\n                    if (permittedColumns !== null && typeof permittedColumns === 'object') {\r\n                        permittedColumns.map(col => {\r\n                            if (!roleDefinition.permittedColumns.includes(col))\r\n                                roleDefinition.permittedColumns.push(col);\r\n                        })\r\n                    }\r\n\r\n                    if (permittedPages !== null && typeof permittedPages === 'object') {\r\n                        permittedPages.map(col => {\r\n                            if (!roleDefinition.permittedPages.includes(col))\r\n                                roleDefinition.permittedPages.push(col);\r\n                        })\r\n                    }\r\n\r\n                    if (roleDefinition.mainPage === '') {\r\n                        roleDefinition.mainPage = mainPage;\r\n                    }\r\n                })\r\n\r\n                res(roleDefinition);\r\n\r\n            }).catch(e => rej(e));\r\n        })\r\n    }\r\n}\r\n\r\nexport default AuthModule;"]},"metadata":{},"sourceType":"module"}