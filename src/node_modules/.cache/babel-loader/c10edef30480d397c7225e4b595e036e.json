{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\components\\\\ToolbarMatrix.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport MaximizeContent from \"./MaximizeContent\";\nimport { Row, Col, Card, CardBody, Button, ButtonGroup } from 'reactstrap';\nimport { modalImportToggle, modalExportToggle } from \"../redux/actions\";\nimport SelectRegion from './SelectRegion';\nimport SelectRadioSite from './SelectRadioSite';\n\nclass ToolbarMatrix extends React.Component {\n  render() {\n    const _this$props = this.props,\n          language = _this$props.language,\n          wrapper = _this$props.wrapper;\n\n    if (language) {\n      return React.createElement(Card, {\n        className: wrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(SelectRegion, {\n        handleRegionChange: this.props.handleRegionChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      })), React.createElement(Col, {\n        xs: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(SelectRadioSite, {\n        handleRadioSiteChange: this.props.handleRadioSiteChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      })), React.createElement(Col, {\n        xs: 8,\n        className: \"text-right tools\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(ButtonGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, language.matrixViewToolbar.map((item, key) => {\n        if (item.clickEvent === 'edit' || item.id === 'saveOptions') {\n          item.showMe = !this.props.editOn;\n        } // disable buttons if edit mode on\n\n\n        let disableAttr = this.props.editOn ? item.showMe : false; // if data empty just import button can be clickable\n\n        if (!this.props.isDataExist) {\n          disableAttr = !(item.clickEvent === 'import');\n        }\n\n        if (item.id !== 'saveOptions') {\n          return React.createElement(Button, {\n            key: key,\n            \"data-tip\": item.title,\n            \"data-place\": 'top',\n            disabled: disableAttr,\n            className: item.showMe ? undefined : 'd-none',\n            onClick: item.clickEvent === 'import' ? this.props.setModalImport : item.clickEvent === 'edit' ? this.props.editClick : item.clickEvent === 'new' ? this.props.newClick : item.clickEvent === 'history' ? this.props.historyToggle : item.clickEvent === 'export' ? this.props.setModalExport : undefined,\n            color: item.btnClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: `icon ${item.icon}`,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76\n            },\n            __self: this\n          }));\n        } else if (item.id === 'saveOptions' && this.props.editOn) {\n          return React.createElement(\"div\", {\n            className: \"dropdown\",\n            key: key,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83\n            },\n            __self: this\n          }, React.createElement(Button, {\n            \"data-tip\": item.title,\n            \"data-place\": 'top',\n            color: item.btnClass,\n            \"data-toggle\": \"dropdown\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: `icon ${item.icon}`,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          })), React.createElement(\"div\", {\n            className: \"dropdown-menu dropdown-menu-right\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90\n            },\n            __self: this\n          }, item.children.map((child, childKey) => {\n            const showOption = this.props.newRowAdded === true ? child.showOnNewRow : true;\n            const divClass = `${child.class} ${showOption ? '' : ' d-none'}`;\n            return React.createElement(\"div\", {\n              className: divClass,\n              onClick: child.clickEvent === 'cancel' ? this.props.cancelClick : child.clickEvent === 'save-history' ? this.props.saveHistoryClick : child.clickEvent === 'save' ? this.props.saveClick : undefined,\n              key: childKey,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 102\n              },\n              __self: this\n            }, React.createElement(\"i\", {\n              className: `icon ${child.icon} mr-2`,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 112\n              },\n              __self: this\n            }), child.title);\n          })));\n        }\n      })), React.createElement(MaximizeContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      })))));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    language: state.language,\n    editOn: state.editOn\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setModalImport: () => dispatch(modalImportToggle()),\n    setModalExport: () => dispatch(modalExportToggle())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToolbarMatrix);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/ToolbarMatrix.jsx"],"names":["React","connect","MaximizeContent","Row","Col","Card","CardBody","Button","ButtonGroup","modalImportToggle","modalExportToggle","SelectRegion","SelectRadioSite","ToolbarMatrix","Component","render","props","language","wrapper","handleRegionChange","bind","handleRadioSiteChange","matrixViewToolbar","map","item","key","clickEvent","id","showMe","editOn","disableAttr","isDataExist","title","undefined","setModalImport","editClick","newClick","historyToggle","setModalExport","btnClass","icon","children","child","childKey","showOption","newRowAdded","showOnNewRow","divClass","class","cancelClick","saveHistoryClick","saveClick","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport MaximizeContent from \"./MaximizeContent\";\r\nimport {Row, Col, Card, CardBody, Button, ButtonGroup} from 'reactstrap';\r\nimport {modalImportToggle, modalExportToggle} from \"../redux/actions\";\r\nimport SelectRegion from './SelectRegion';\r\nimport SelectRadioSite from './SelectRadioSite';\r\n\r\nclass ToolbarMatrix extends React.Component {\r\n\r\n    render() {\r\n\r\n        const {language, wrapper} = this.props;\r\n\r\n        if (language) {\r\n\r\n            return (\r\n                <Card className={wrapper}>\r\n                    <CardBody>\r\n\r\n                        <Row>\r\n                            <Col xs={2}>\r\n                                <SelectRegion\r\n                                    handleRegionChange={this.props.handleRegionChange.bind(this)}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col xs={2}>\r\n                                <SelectRadioSite\r\n                                    handleRadioSiteChange={this.props.handleRadioSiteChange.bind(this)}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={8} className=\"text-right tools\">\r\n\r\n                                <ButtonGroup>\r\n                                {\r\n                                language.matrixViewToolbar.map((item, key) => {\r\n\r\n                                    if ((item.clickEvent === 'edit' ||\r\n                                        item.id === 'saveOptions')) {\r\n                                        item.showMe = !this.props.editOn\r\n                                    }\r\n\r\n                                    // disable buttons if edit mode on\r\n                                    let disableAttr = this.props.editOn ? item.showMe : false;\r\n\r\n                                    // if data empty just import button can be clickable\r\n                                    if (!this.props.isDataExist) {\r\n                                        disableAttr = !(item.clickEvent === 'import');\r\n\r\n                                    }\r\n\r\n                                    if (item.id !== 'saveOptions') {\r\n                                        return (\r\n                                            <Button key={key}\r\n                                                    data-tip={item.title}\r\n                                                    data-place={'top'}\r\n                                                    disabled={disableAttr}\r\n                                                    className={item.showMe\r\n                                                        ? undefined\r\n                                                        : 'd-none'\r\n                                                    }\r\n                                                    onClick={item.clickEvent === 'import'\r\n                                                        ? this.props.setModalImport\r\n                                                        : item.clickEvent === 'edit'\r\n                                                            ? this.props.editClick\r\n                                                            : item.clickEvent === 'new'\r\n                                                                ? this.props.newClick\r\n                                                                : item.clickEvent === 'history'\r\n                                                                    ? this.props.historyToggle\r\n                                                                    : item.clickEvent === 'export'\r\n                                                                        ? this.props.setModalExport\r\n                                                                        : undefined\r\n                                                    }\r\n                                                    color={item.btnClass}>\r\n                                                <i className={`icon ${item.icon}`}/>\r\n                                            </Button>\r\n                                        )\r\n                                    } else if (item.id === 'saveOptions' && this.props.editOn) {\r\n\r\n                                        return (\r\n\r\n                                            <div className=\"dropdown\" key={key}>\r\n                                                <Button data-tip={item.title}\r\n                                                        data-place={'top'}\r\n                                                        color={item.btnClass}\r\n                                                        data-toggle=\"dropdown\">\r\n                                                    <i className={`icon ${item.icon}`}/>\r\n                                                </Button>\r\n                                                <div className=\"dropdown-menu dropdown-menu-right\">\r\n                                                    {item.children.map((child, childKey) => {\r\n\r\n                                                        const showOption = this.props.newRowAdded === true\r\n                                                            ? child.showOnNewRow\r\n                                                            : true;\r\n\r\n                                                        const divClass = `${child.class} ${\r\n                                                            (showOption) ? '' : ' d-none'\r\n                                                            }`;\r\n\r\n                                                        return (\r\n                                                            <div className={divClass}\r\n                                                               onClick={child.clickEvent === 'cancel'\r\n                                                                   ? this.props.cancelClick\r\n                                                                   : child.clickEvent === 'save-history'\r\n                                                                       ? this.props.saveHistoryClick\r\n                                                                       : child.clickEvent === 'save'\r\n                                                                           ? this.props.saveClick\r\n                                                                           : undefined\r\n                                                               }\r\n                                                               key={childKey}>\r\n                                                                <i className={`icon ${child.icon} mr-2`}/>\r\n                                                                {child.title}\r\n                                                            </div>\r\n                                                        )\r\n                                                    })\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                })\r\n                                }\r\n                                </ButtonGroup>\r\n\r\n                                <MaximizeContent/>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        language: state.language,\r\n        editOn: state.editOn\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModalImport: () => dispatch(modalImportToggle()),\r\n        setModalExport: () => dispatch(modalExportToggle())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToolbarMatrix);"]},"metadata":{},"sourceType":"module"}