{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\SSCM\\\\ss\\\\src\\\\src\\\\components\\\\TopologyToolbar.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Button, Card, CardBody, Row, Col, Input } from 'reactstrap';\nimport html2canvas from \"html2canvas\";\nimport { saveAs } from 'file-saver';\nimport 'canvas-toBlob';\nimport dataURLtoBlob from 'blueimp-canvas-to-blob';\nimport MaximizeContent from \"./MaximizeContent\";\nimport SelectRegion from './SelectRegion';\nimport ReactTooltip from 'react-tooltip';\n\nclass TopologyToolbar extends React.Component {\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    ReactTooltip.rebuild();\n  }\n\n  handleSnapshotClick() {\n    const {\n      diagramAreaId,\n      snapshotFileName,\n      topologyLevel\n    } = this.props;\n    const elem = document.getElementById(diagramAreaId);\n\n    if (elem) {\n      const nav = elem.querySelector('.vis-navigation');\n      let card = null;\n\n      if (topologyLevel === 2) {\n        card = elem.querySelector('.card');\n        card.classList.add('d-none');\n      }\n\n      nav.classList.add('d-none');\n      html2canvas(elem).then(function (canvas) {\n        const blob = dataURLtoBlob(canvas.toDataURL());\n        saveAs(blob, snapshotFileName);\n        nav.classList.remove('d-none');\n        if (topologyLevel === 2) card.classList.remove('d-none');\n      });\n    }\n  }\n\n  render() {\n    const {\n      language,\n      labels,\n      topologyLevel,\n      wrapper,\n      tooltipPlacement,\n      handleAggregSiteChange,\n      handleRegionChange,\n      handleSelectNode\n    } = this.props;\n    const snapShotButtonOffset = topologyLevel === 1 ? 'offset-6' : 'offset-8';\n\n    if (language) {\n      return /*#__PURE__*/React.createElement(Card, {\n        className: wrapper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }\n      }, topologyLevel === 1 && /*#__PURE__*/React.createElement(Col, {\n        xs: 4,\n        sm: 3,\n        md: 2,\n        lg: 2,\n        xl: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(SelectRegion, {\n        handleRegionChange: handleRegionChange.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 33\n        }\n      })), topologyLevel === 1 && /*#__PURE__*/React.createElement(Col, {\n        xs: 4,\n        sm: 3,\n        md: 2,\n        lg: 2,\n        xl: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 29\n        }\n      }, labels && /*#__PURE__*/React.createElement(Input, {\n        type: 'select',\n        className: 'custom-select',\n        onChange: ev => handleAggregSiteChange(ev.target.value),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 37\n        }\n      }, \"Aggre Site\"), labels.map((value, index) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: value,\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 48\n          }\n        }, value);\n      }))), topologyLevel !== 1 && /*#__PURE__*/React.createElement(Col, {\n        xs: 4,\n        sm: 3,\n        md: 2,\n        lg: 2,\n        xl: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }\n      }, labels && /*#__PURE__*/React.createElement(Input, {\n        type: 'select',\n        className: 'custom-select',\n        onChange: ev => handleSelectNode(ev.target.value),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 37\n        }\n      }, language.selectNode), labels.map((value, index) => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: value,\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 48\n          }\n        }, value);\n      }))), /*#__PURE__*/React.createElement(Col, {\n        xs: 4,\n        sm: 3,\n        md: 2,\n        lg: 2,\n        xl: 2,\n        className: `${snapShotButtonOffset} text-right`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        \"data-place\": tooltipPlacement,\n        \"data-tip\": language.snapshotButtonText,\n        color: 'primary',\n        onClick: this.handleSnapshotClick.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: `icon icon-camera-photo`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 37\n        }\n      })), topologyLevel !== 2 && /*#__PURE__*/React.createElement(MaximizeContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 33\n        }\n      })))));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    language: state.language,\n    tooltipPlacement: state.tooltipPlacement\n  };\n}\n\nexport default connect(mapStateToProps)(TopologyToolbar);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/SSCM/ss/src/src/components/TopologyToolbar.jsx"],"names":["React","connect","Button","Card","CardBody","Row","Col","Input","html2canvas","saveAs","dataURLtoBlob","MaximizeContent","SelectRegion","ReactTooltip","TopologyToolbar","Component","componentDidUpdate","prevProps","prevState","snapshot","rebuild","handleSnapshotClick","diagramAreaId","snapshotFileName","topologyLevel","props","elem","document","getElementById","nav","querySelector","card","classList","add","then","canvas","blob","toDataURL","remove","render","language","labels","wrapper","tooltipPlacement","handleAggregSiteChange","handleRegionChange","handleSelectNode","snapShotButtonOffset","bind","ev","target","value","map","index","selectNode","snapshotButtonText","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Button, Card, CardBody, Row, Col, Input} from 'reactstrap';\r\nimport html2canvas from \"html2canvas\";\r\nimport {saveAs} from 'file-saver';\r\nimport 'canvas-toBlob';\r\nimport dataURLtoBlob from 'blueimp-canvas-to-blob';\r\n\r\nimport MaximizeContent from \"./MaximizeContent\";\r\nimport SelectRegion from './SelectRegion';\r\nimport ReactTooltip from 'react-tooltip'\r\n\r\n\r\nclass TopologyToolbar extends React.Component {\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        ReactTooltip.rebuild();\r\n    }\r\n\r\n    handleSnapshotClick(){\r\n        const {diagramAreaId, snapshotFileName, topologyLevel} = this.props;\r\n\r\n        const elem = document.getElementById(diagramAreaId);\r\n\r\n        if (elem) {\r\n\r\n            const nav = elem.querySelector('.vis-navigation');\r\n\r\n            let card = null;\r\n            if (topologyLevel === 2) {\r\n                card = elem.querySelector('.card');\r\n\r\n                card.classList.add('d-none');\r\n            }\r\n\r\n            nav.classList.add('d-none');\r\n            html2canvas(elem).then(function(canvas) {\r\n                const blob = dataURLtoBlob(canvas.toDataURL());\r\n                saveAs(blob, snapshotFileName);\r\n                nav.classList.remove('d-none');\r\n\r\n                if (topologyLevel === 2) card.classList.remove('d-none');\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {language, labels, topologyLevel, wrapper, tooltipPlacement,\r\n            handleAggregSiteChange, handleRegionChange, handleSelectNode} = this.props;\r\n\r\n        const snapShotButtonOffset = topologyLevel === 1 ? 'offset-6' : 'offset-8';\r\n\r\n        if (language) {\r\n\r\n            return (\r\n\r\n                <Card className={wrapper}>\r\n                    <CardBody>\r\n                        <Row>\r\n                            {topologyLevel === 1 &&\r\n                            <Col xs={4} sm={3} md={2} lg={2} xl={2}>\r\n                                <SelectRegion handleRegionChange={handleRegionChange.bind(this)} />\r\n                            </Col>\r\n                            }\r\n\r\n                            {topologyLevel === 1 &&\r\n                            <Col xs={4} sm={3} md={2} lg={2} xl={2}>\r\n                                {labels &&\r\n                                <Input type={'select'} className={'custom-select'}\r\n                                       onChange={ev => handleAggregSiteChange(ev.target.value)}>\r\n                                    <option value=\"0\">Aggre Site</option>\r\n                                    {labels.map((value, index) => {\r\n                                        return <option value={value} key={index}>{value}</option>\r\n                                    })}\r\n                                </Input>\r\n                                }\r\n                            </Col>\r\n                            }\r\n\r\n                            {topologyLevel !== 1 &&\r\n                            <Col xs={4} sm={3} md={2} lg={2} xl={2}>\r\n                                {labels &&\r\n                                <Input type={'select'} className={'custom-select'}\r\n                                       onChange={ev => handleSelectNode(ev.target.value)}>\r\n                                    <option value=\"0\" >{language.selectNode}</option>\r\n                                    {labels.map((value, index) => {\r\n                                        return <option value={value} key={index}>{value}</option>\r\n                                    })}\r\n                                </Input>\r\n                                }\r\n                            </Col>\r\n                            }\r\n\r\n                            <Col xs={4} sm={3} md={2} lg={2} xl={2} className={`${snapShotButtonOffset} text-right`}>\r\n                                <Button data-place={tooltipPlacement}\r\n                                        data-tip={language.snapshotButtonText}\r\n                                        color={'primary'}\r\n                                        onClick={this.handleSnapshotClick.bind(this)}>\r\n                                    <i className={`icon icon-camera-photo`}/>\r\n                                </Button>\r\n\r\n                                {topologyLevel !== 2 &&\r\n                                <MaximizeContent/>\r\n                                }\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        language: state.language,\r\n        tooltipPlacement: state.tooltipPlacement\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TopologyToolbar);"]},"metadata":{},"sourceType":"module"}