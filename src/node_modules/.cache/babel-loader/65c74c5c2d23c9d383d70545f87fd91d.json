{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{connect}from\"react-redux\";import{Button,Card,CardBody,Row,Col,Input}from'reactstrap';import html2canvas from\"html2canvas\";import{saveAs}from'file-saver';import'canvas-toBlob';import dataURLtoBlob from'blueimp-canvas-to-blob';import MaximizeContent from\"./MaximizeContent\";import SelectRegion from'./SelectRegion';import ReactTooltip from'react-tooltip';var TopologyToolbar=/*#__PURE__*/function(_React$Component){_inherits(TopologyToolbar,_React$Component);var _super=_createSuper(TopologyToolbar);function TopologyToolbar(){_classCallCheck(this,TopologyToolbar);return _super.apply(this,arguments);}_createClass(TopologyToolbar,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState,snapshot){ReactTooltip.rebuild();}},{key:\"handleSnapshotClick\",value:function handleSnapshotClick(){var _this$props=this.props,diagramAreaId=_this$props.diagramAreaId,snapshotFileName=_this$props.snapshotFileName,topologyLevel=_this$props.topologyLevel;var elem=document.getElementById(diagramAreaId);if(elem){var nav=elem.querySelector('.vis-navigation');var card=null;if(topologyLevel===2){card=elem.querySelector('.card');card.classList.add('d-none');}nav.classList.add('d-none');html2canvas(elem).then(function(canvas){var blob=dataURLtoBlob(canvas.toDataURL());saveAs(blob,snapshotFileName);nav.classList.remove('d-none');if(topologyLevel===2)card.classList.remove('d-none');});}}},{key:\"render\",value:function render(){var _this$props2=this.props,language=_this$props2.language,labels=_this$props2.labels,topologyLevel=_this$props2.topologyLevel,wrapper=_this$props2.wrapper,tooltipPlacement=_this$props2.tooltipPlacement,handleAggregSiteChange=_this$props2.handleAggregSiteChange,handleRegionChange=_this$props2.handleRegionChange,handleSelectNode=_this$props2.handleSelectNode;var snapShotButtonOffset=topologyLevel===1?'offset-6':'offset-8';if(language){return/*#__PURE__*/React.createElement(Card,{className:wrapper},/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(Row,null,topologyLevel===1&&/*#__PURE__*/React.createElement(Col,{xs:4,sm:3,md:2,lg:2,xl:2},/*#__PURE__*/React.createElement(SelectRegion,{handleRegionChange:handleRegionChange.bind(this)})),topologyLevel===1&&/*#__PURE__*/React.createElement(Col,{xs:4,sm:3,md:2,lg:2,xl:2},labels&&/*#__PURE__*/React.createElement(Input,{type:'select',className:'custom-select',onChange:function onChange(ev){return handleAggregSiteChange(ev.target.value);}},/*#__PURE__*/React.createElement(\"option\",{value:\"0\"},\"Aggre Site\"),labels.map(function(value,index){return/*#__PURE__*/React.createElement(\"option\",{value:value,key:index},value);}))),topologyLevel!==1&&/*#__PURE__*/React.createElement(Col,{xs:4,sm:3,md:2,lg:2,xl:2},labels&&/*#__PURE__*/React.createElement(Input,{type:'select',className:'custom-select',onChange:function onChange(ev){return handleSelectNode(ev.target.value);}},/*#__PURE__*/React.createElement(\"option\",{value:\"0\"},language.selectNode),labels.map(function(value,index){return/*#__PURE__*/React.createElement(\"option\",{value:value,key:index},value);}))),/*#__PURE__*/React.createElement(Col,{xs:4,sm:3,md:2,lg:2,xl:2,className:\"\".concat(snapShotButtonOffset,\" text-right\")},/*#__PURE__*/React.createElement(Button,{\"data-place\":tooltipPlacement,\"data-tip\":language.snapshotButtonText,color:'primary',onClick:this.handleSnapshotClick.bind(this)},/*#__PURE__*/React.createElement(\"i\",{className:\"icon icon-camera-photo\"})),topologyLevel!==2&&/*#__PURE__*/React.createElement(MaximizeContent,null)))));}else{return/*#__PURE__*/React.createElement(React.Fragment,null);}}}]);return TopologyToolbar;}(React.Component);function mapStateToProps(state){return{language:state.language,tooltipPlacement:state.tooltipPlacement};}export default connect(mapStateToProps)(TopologyToolbar);","map":{"version":3,"sources":["C:/Users/soperasyon27/Desktop/FE/src18mart/src/src/components/TopologyToolbar.jsx"],"names":["React","connect","Button","Card","CardBody","Row","Col","Input","html2canvas","saveAs","dataURLtoBlob","MaximizeContent","SelectRegion","ReactTooltip","TopologyToolbar","prevProps","prevState","snapshot","rebuild","props","diagramAreaId","snapshotFileName","topologyLevel","elem","document","getElementById","nav","querySelector","card","classList","add","then","canvas","blob","toDataURL","remove","language","labels","wrapper","tooltipPlacement","handleAggregSiteChange","handleRegionChange","handleSelectNode","snapShotButtonOffset","bind","ev","target","value","map","index","selectNode","snapshotButtonText","handleSnapshotClick","Component","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Button, Card, CardBody, Row, Col, Input} from 'reactstrap';\r\nimport html2canvas from \"html2canvas\";\r\nimport {saveAs} from 'file-saver';\r\nimport 'canvas-toBlob';\r\nimport dataURLtoBlob from 'blueimp-canvas-to-blob';\r\n\r\nimport MaximizeContent from \"./MaximizeContent\";\r\nimport SelectRegion from './SelectRegion';\r\nimport ReactTooltip from 'react-tooltip'\r\n\r\n\r\nclass TopologyToolbar extends React.Component {\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        ReactTooltip.rebuild();\r\n    }\r\n\r\n    handleSnapshotClick(){\r\n        const {diagramAreaId, snapshotFileName, topologyLevel} = this.props;\r\n\r\n        const elem = document.getElementById(diagramAreaId);\r\n\r\n        if (elem) {\r\n\r\n            const nav = elem.querySelector('.vis-navigation');\r\n\r\n            let card = null;\r\n            if (topologyLevel === 2) {\r\n                card = elem.querySelector('.card');\r\n\r\n                card.classList.add('d-none');\r\n            }\r\n\r\n            nav.classList.add('d-none');\r\n            html2canvas(elem).then(function(canvas) {\r\n                const blob = dataURLtoBlob(canvas.toDataURL());\r\n                saveAs(blob, snapshotFileName);\r\n                nav.classList.remove('d-none');\r\n\r\n                if (topologyLevel === 2) card.classList.remove('d-none');\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {language, labels, topologyLevel, wrapper, tooltipPlacement,\r\n            handleAggregSiteChange, handleRegionChange, handleSelectNode} = this.props;\r\n\r\n        const snapShotButtonOffset = topologyLevel === 1 ? 'offset-6' : 'offset-8';\r\n\r\n        if (language) {\r\n\r\n            return (\r\n\r\n                <Card className={wrapper}>\r\n                    <CardBody>\r\n                        <Row>\r\n                            {topologyLevel === 1 &&\r\n                            <Col xs={4} sm={3} md={2} lg={2} xl={2}>\r\n                                <SelectRegion handleRegionChange={handleRegionChange.bind(this)} />\r\n                            </Col>\r\n                            }\r\n\r\n                            {topologyLevel === 1 &&\r\n                            <Col xs={4} sm={3} md={2} lg={2} xl={2}>\r\n                                {labels &&\r\n                                <Input type={'select'} className={'custom-select'}\r\n                                       onChange={ev => handleAggregSiteChange(ev.target.value)}>\r\n                                    <option value=\"0\">Aggre Site</option>\r\n                                    {labels.map((value, index) => {\r\n                                        return <option value={value} key={index}>{value}</option>\r\n                                    })}\r\n                                </Input>\r\n                                }\r\n                            </Col>\r\n                            }\r\n\r\n                            {topologyLevel !== 1 &&\r\n                            <Col xs={4} sm={3} md={2} lg={2} xl={2}>\r\n                                {labels &&\r\n                                <Input type={'select'} className={'custom-select'}\r\n                                       onChange={ev => handleSelectNode(ev.target.value)}>\r\n                                    <option value=\"0\" >{language.selectNode}</option>\r\n                                    {labels.map((value, index) => {\r\n                                        return <option value={value} key={index}>{value}</option>\r\n                                    })}\r\n                                </Input>\r\n                                }\r\n                            </Col>\r\n                            }\r\n\r\n                            <Col xs={4} sm={3} md={2} lg={2} xl={2} className={`${snapShotButtonOffset} text-right`}>\r\n                                <Button data-place={tooltipPlacement}\r\n                                        data-tip={language.snapshotButtonText}\r\n                                        color={'primary'}\r\n                                        onClick={this.handleSnapshotClick.bind(this)}>\r\n                                    <i className={`icon icon-camera-photo`}/>\r\n                                </Button>\r\n\r\n                                {topologyLevel !== 2 &&\r\n                                <MaximizeContent/>\r\n                                }\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        language: state.language,\r\n        tooltipPlacement: state.tooltipPlacement\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TopologyToolbar);"]},"metadata":{},"sourceType":"module"}