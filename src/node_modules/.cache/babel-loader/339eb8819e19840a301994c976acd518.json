{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\components\\\\ModalImport.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { modalImportToggle, spinnerToggle, setImportPolling } from \"../redux/actions\";\nimport FileUploadProgress from 'react-fileupload-progress';\nimport XLSX from \"xlsx\";\nimport { groupingMap } from '../matrixDataMap';\nimport RestApiModule from '../RestApiModule';\nimport { Row, Col, Card, CardBody, CardTitle, CardText, CardHeader, Alert, Button } from 'reactstrap';\nimport { saveAs } from 'file-saver'; // Alert module import\n\nimport AlertModule from '../AlertModule';\n\nclass ModalImport extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: null,\n      isExcelHeadersValid: null,\n      progress: -1,\n      showButton1: true,\n      showButton2: false,\n      showButton3: false\n    };\n    this.fileJSON = {};\n    this.data = [];\n    this.cols = []; //const {REACT_APP_API_GATEWAY, REACT_APP_MATRIX_SERVICE} = process.env;\n    //`${REACT_APP_API_GATEWAY}${REACT_APP_MATRIX_SERVICE}/ImportDataMatrixFromExcel`;\n\n    this.restApi = new RestApiModule();\n    this.alert = new AlertModule();\n    this.fileInput = React.createRef();\n    this.uploadFileUrl = this.restApi.getImportEndpoint('importData');\n    this.styleBar = {\n      width: 0\n    };\n    this.progressAction = null; // handle interval\n  }\n\n  handleSelectFile(e) {\n    function checkFileType(file) {\n      const allowedTypes = process.env.REACT_APP_ACCEPTED_IMPORT_FILE_EXT.split(\",\");\n      const extension = file.name.substring(file.name.lastIndexOf('.'));\n      return allowedTypes.includes(extension);\n    }\n\n    const files = e.target.files;\n    if (files && files[0]) if (checkFileType(files[0])) {\n      this.setState({\n        file: files[0],\n        showButton2: true,\n        isExcelHeadersValid: null\n      });\n    } else {\n      const {\n        language\n      } = this.props;\n      this.alert.showMessage(\"error\", language.importSection.wrongFileExtTitle, language.importSection.wrongFileExt, false);\n    }\n  }\n\n  handleFile() {\n    /* Boilerplate to set up FileReader */\n    this.props.setSpinner();\n\n    try {\n      const reader = new FileReader();\n      const rABS = !!reader.readAsBinaryString;\n\n      reader.onload = e => {\n        /* Parse data */\n        const bstr = e.target.result;\n        const wb = XLSX.read(bstr, {\n          type: rABS ? 'binary' : 'array',\n          bookVBA: true,\n          sheetRows: 0\n        });\n        /* Get first worksheet */\n\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n\n        const data = XLSX.utils.sheet_to_json(ws, {\n          header: 1,\n          defval: \"\"\n        });\n        /* Store the json data */\n\n        this.fileJSON = JSON.stringify(data, null, 2);\n        this.handleJSONHeaders();\n        this.props.setSpinner();\n      };\n\n      if (rABS) {\n        reader.readAsBinaryString(this.state.file);\n      } else {\n        reader.readAsArrayBuffer(this.state.file);\n      }\n    } catch (e) {\n      this.setState({\n        showButton3: false\n      });\n      this.props.setSpinner();\n    }\n  }\n\n  handleJSONHeaders() {\n    const headerMap = JSON.parse(JSON.stringify(groupingMap));\n    const excelHeadersArray = JSON.parse(this.fileJSON)[1];\n    const columnsMap = headerMap.reduce((fullArr, item) => {\n      const cols = item.columns.reduce((arr, col) => {\n        if (col.importColumnId !== undefined) arr.push(col.importColumnId);\n        return arr;\n      }, []);\n      return [...fullArr, ...cols];\n    }, []);\n    const isSame = JSON.stringify(excelHeadersArray).replace(/ /g, '').toLowerCase() === JSON.stringify(columnsMap).toLowerCase();\n    this.setState({\n      isExcelHeadersValid: isSame,\n      showButton3: isSame,\n      showButton2: !isSame\n    });\n\n    if (!isSame) {\n      this.setState({\n        file: null,\n        showButton2: false\n      });\n    }\n  }\n\n  downloadLogFile() {\n    const {\n      importActionResponse\n    } = this.state;\n\n    if (importActionResponse) {\n      const today = new Date();\n      const todayDate = '_' + today.getDate() + today.toLocaleString('default', {\n        month: 'long'\n      }) + today.getFullYear();\n      const {\n        importResult\n      } = JSON.parse(importActionResponse);\n      const {\n        log\n      } = importResult[0];\n      const blob = new Blob([log], {\n        type: \"text/plain;charset=utf-8\"\n      });\n      saveAs(blob, `importDetailedLog${todayDate}.txt`);\n    }\n  }\n\n  toggle() {\n    this.setState({\n      file: null,\n      isExcelHeadersValid: null,\n      importActionResponse: null,\n      showButton2: false,\n      showButton3: false,\n      progress: -1\n    });\n    this.props.setModalImport();\n  }\n\n  customFormRenderer(onSubmit) {\n    const {\n      language,\n      token\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: 'success',\n      size: \"lg\",\n      block: true,\n      hidden: !this.state.showButton3,\n      onClick: e => {\n        this.restApi.callApi(\"getLocksCount\", {\n          token\n        }).then(res => {\n          const {\n            count\n          } = res.locksCount;\n          const lockCountMessage = language.importSection.locksCountForLastStep.replace('{count}', count);\n          this.alert.getConfirmation(\"warning\", language.importSection.warningTitleForLastStep, `${language.importSection.warningMessageForLastStep}<br><br>${lockCountMessage}`).then(response => {\n            if (response === true) {\n              // if user start an import action do not make observable request for check import status\n              this.props.setImportPolling(false); // Add this request for 1 time to set DB\n\n              this.restApi.callApi('getImportStatus', {\n                token\n              });\n              this.setState({\n                showButton3: false\n              });\n              onSubmit(e);\n            }\n          });\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }\n    }, language.upload, /*#__PURE__*/React.createElement(\"i\", {\n      className: `icon icon-upload ml-2`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n  formGetter() {\n    return JSON.stringify({\n      token: this.props.token,\n      importedExcelAsJSON: this.fileJSON\n    });\n  }\n\n  customProgressRenderer(progressFile, hasError, cancelHandler) {\n    const {\n      language\n    } = this.props;\n\n    function countOfRowsText(count) {\n      return +count > 1 ? `${count} ${language.importSection.rows}` : `${count} ${language.importSection.rows.slice(0, -1)}`;\n    }\n\n    const {\n      progress\n    } = this.state;\n\n    if (hasError || progress > -1) {\n      let progressBar = Object.assign({}, this.styleBar);\n      progressBar.width = `${progress}%`;\n      let result = null;\n      const {\n        importActionResponse\n      } = this.state;\n\n      if (importActionResponse && progress === 100) {\n        const jsonResponse = JSON.parse(importActionResponse);\n        const {\n          importResult,\n          exec_status,\n          error_code,\n          error_message\n        } = jsonResponse;\n        if (importResult) result = importResult[0];\n\n        if (exec_status === \"error\") {\n          this.setState({\n            progress: 0\n          });\n          const message = error_message ? error_message : \"Null exception\";\n\n          if (+error_code === 10) {\n            this.alert.showMessage('error', 'Error', message, true);\n          } else {\n            this.alert.showMessage('error', 'Error', message, false);\n          }\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, !hasError && /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"progressWrapper text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 33\n        }\n      }, \"Import progress: \", `${progress}%`), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"progressBar\",\n        style: progressBar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 33\n        }\n      })))), hasError && /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Alert, {\n        color: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"icon icon-triangle-warning mr-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 33\n        }\n      }), language.importSection.progressError))), progress === 100 && result && !hasError && /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        body: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(CardHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 33\n        }\n      }, language.importSection.summaryLabel), /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        color: \"primary\",\n        inverse: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(CardTitle, {\n        tag: \"h5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 53\n        }\n      }, language.importSection.totalRowCount), /*#__PURE__*/React.createElement(CardText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 53\n        }\n      }, language.importSection.totalRowText), /*#__PURE__*/React.createElement(Alert, {\n        tag: \"h4\",\n        color: \"info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 53\n        }\n      }, countOfRowsText(result.totalcount))))), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        color: \"success\",\n        inverse: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(CardTitle, {\n        tag: \"h5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 53\n        }\n      }, language.importSection.successRowCount), /*#__PURE__*/React.createElement(CardText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 53\n        }\n      }, language.importSection.successRowText), /*#__PURE__*/React.createElement(Alert, {\n        tag: \"h4\",\n        color: \"info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 53\n        }\n      }, countOfRowsText(result.successCount))))), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        color: \"danger\",\n        inverse: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(CardTitle, {\n        tag: \"h5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 53\n        }\n      }, language.importSection.failedRowCount), /*#__PURE__*/React.createElement(CardText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 53\n        }\n      }, language.importSection.failedRowText), /*#__PURE__*/React.createElement(Alert, {\n        tag: \"h4\",\n        color: \"info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 53\n        }\n      }, countOfRowsText(result.errorcount)))))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        color: \"primary\",\n        className: \"mt-3\",\n        block: true,\n        size: \"lg\",\n        onClick: this.downloadLogFile.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 45\n        }\n      }, language.importSection.downloadLogFile, /*#__PURE__*/React.createElement(\"i\", {\n        className: `icon icon-download-save ml-2`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 49\n        }\n      })))))))));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n  render() {\n    const {\n      language,\n      loadAfterImport\n    } = this.props;\n\n    if (language) {\n      return /*#__PURE__*/React.createElement(Modal, {\n        isOpen: this.props.open,\n        size: 'lg',\n        centered: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ModalHeader, {\n        toggle: this.toggle.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 21\n        }\n      }, language.importDataMatrixFile), /*#__PURE__*/React.createElement(ModalBody, {\n        className: 'import-file',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        ref: fileInput => this.fileInput = fileInput,\n        type: \"file\",\n        accept: process.env.REACT_APP_ACCEPTED_IMPORT_FILE_TYPE,\n        onChange: this.handleSelectFile.bind(this),\n        hidden: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: '12',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 29\n        }\n      }, !this.state.file && /*#__PURE__*/React.createElement(\"div\", {\n        className: 'choose-file-wrapper',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"chose-file\",\n        onClick: () => this.fileInput.click(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 37\n        }\n      }, language.chooseFile)), this.state.file && /*#__PURE__*/React.createElement(\"div\", {\n        className: 'choose-file-wrapper',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 37\n        }\n      }, language.importSection.selectedFileLabel, this.state.file.name))), /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 29\n        }\n      }, this.state.showButton2 && /*#__PURE__*/React.createElement(Button, {\n        color: 'primary',\n        className: 'mt-3 mb-3',\n        size: \"lg\",\n        block: true,\n        onClick: this.handleFile.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 33\n        }\n      }, language.validate, /*#__PURE__*/React.createElement(\"i\", {\n        className: `icon icon-file ml-2`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 37\n        }\n      })), this.state.isExcelHeadersValid === true && /*#__PURE__*/React.createElement(Alert, {\n        color: \"success\",\n        className: 'mt-2',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: `icon icon-check mr-2`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 37\n        }\n      }), language.importSection.selectedFileValid), this.state.isExcelHeadersValid === false && /*#__PURE__*/React.createElement(Alert, {\n        color: \"danger\",\n        className: 'mt-2',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: `icon icon-cross mr-2`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 37\n        }\n      }), language.importSection.selectedFileNotValid))), /*#__PURE__*/React.createElement(FileUploadProgress, {\n        url: this.uploadFileUrl,\n        method: \"POST\",\n        beforeSend: request => {\n          this.props.setSpinner();\n          this.setState({\n            progress: Math.floor(Math.random() * 16) + 10\n          });\n          request.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n          return request;\n        },\n        onProgress: (e, request, progress) => {\n          console.log(progress);\n\n          if (this.state.progress < 95) {\n            this.progressAction = setInterval(() => {\n              let increase = Math.floor(Math.random() * 5) + 5;\n              this.setState({\n                progress: increase + +this.state.progress\n              });\n            }, 2000);\n          }\n        },\n        onLoad: (e, request) => {\n          clearInterval(this.progressAction);\n          setTimeout(() => {\n            // Wait a little time to get correct data structure from response\n            this.setState({\n              progress: 100,\n              importActionResponse: request.response\n            }, () => {\n              // After set state execute load data action\n              const {\n                exec_status\n              } = JSON.parse(this.state.importActionResponse);\n\n              if (exec_status === \"success\") {\n                // Import finish successfully, then reload the data.\n                if (this.state.progress === 100) {\n                  loadAfterImport(); // app should restart make observable request for control import status\n\n                  this.props.setImportPolling(true);\n                }\n              }\n\n              this.props.setSpinner();\n            });\n          }, 200);\n        },\n        onError: (e, request) => {\n          this.setState({\n            progress: 0\n          }, () => {\n            clearInterval(this.progressAction);\n            this.props.setSpinner();\n          });\n        },\n        onAbort: (e, request) => {\n          this.setState({\n            progress: 0\n          }, () => {\n            clearInterval(this.progressAction);\n            this.props.setSpinner();\n          });\n        },\n        formGetter: this.formGetter.bind(this),\n        formRenderer: this.customFormRenderer.bind(this),\n        progressRenderer: this.customProgressRenderer.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 25\n        }\n      })));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    open: state.modalImportToggle,\n    import: state.import,\n    language: state.language,\n    token: state.token\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setModalImport: () => dispatch(modalImportToggle()),\n    setSpinner: () => dispatch(spinnerToggle()),\n    setImportPolling: data => dispatch(setImportPolling(data))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalImport);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/ModalImport.jsx"],"names":["React","connect","Modal","ModalHeader","ModalBody","modalImportToggle","spinnerToggle","setImportPolling","FileUploadProgress","XLSX","groupingMap","RestApiModule","Row","Col","Card","CardBody","CardTitle","CardText","CardHeader","Alert","Button","saveAs","AlertModule","ModalImport","Component","constructor","props","state","file","isExcelHeadersValid","progress","showButton1","showButton2","showButton3","fileJSON","data","cols","restApi","alert","fileInput","createRef","uploadFileUrl","getImportEndpoint","styleBar","width","progressAction","handleSelectFile","e","checkFileType","allowedTypes","process","env","REACT_APP_ACCEPTED_IMPORT_FILE_EXT","split","extension","name","substring","lastIndexOf","includes","files","target","setState","language","showMessage","importSection","wrongFileExtTitle","wrongFileExt","handleFile","setSpinner","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","sheetRows","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","defval","JSON","stringify","handleJSONHeaders","readAsArrayBuffer","headerMap","parse","excelHeadersArray","columnsMap","reduce","fullArr","item","columns","arr","col","importColumnId","undefined","push","isSame","replace","toLowerCase","downloadLogFile","importActionResponse","today","Date","todayDate","getDate","toLocaleString","month","getFullYear","importResult","log","blob","Blob","toggle","setModalImport","customFormRenderer","onSubmit","token","callApi","then","res","count","locksCount","lockCountMessage","locksCountForLastStep","getConfirmation","warningTitleForLastStep","warningMessageForLastStep","response","upload","formGetter","importedExcelAsJSON","customProgressRenderer","progressFile","hasError","cancelHandler","countOfRowsText","rows","slice","progressBar","Object","assign","jsonResponse","exec_status","error_code","error_message","message","progressError","summaryLabel","totalRowCount","totalRowText","totalcount","successRowCount","successRowText","successCount","failedRowCount","failedRowText","errorcount","bind","render","loadAfterImport","open","importDataMatrixFile","REACT_APP_ACCEPTED_IMPORT_FILE_TYPE","click","chooseFile","selectedFileLabel","validate","selectedFileValid","selectedFileNotValid","request","Math","floor","random","setRequestHeader","console","setInterval","increase","clearInterval","setTimeout","mapStateToProps","import","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Modal, ModalHeader, ModalBody} from 'reactstrap';\r\nimport {modalImportToggle, spinnerToggle, setImportPolling} from \"../redux/actions\";\r\nimport FileUploadProgress from 'react-fileupload-progress';\r\nimport XLSX from \"xlsx\";\r\nimport {groupingMap} from '../matrixDataMap';\r\nimport RestApiModule from '../RestApiModule';\r\nimport {Row, Col, Card, CardBody, CardTitle, CardText, CardHeader, Alert, Button} from 'reactstrap';\r\nimport {saveAs} from 'file-saver';\r\n\r\n// Alert module import\r\nimport AlertModule from '../AlertModule'\r\n\r\nclass ModalImport extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file: null,\r\n            isExcelHeadersValid: null,\r\n            progress: -1,\r\n            showButton1: true,\r\n            showButton2: false,\r\n            showButton3: false,\r\n        }\r\n\r\n        this.fileJSON = {};\r\n        this.data = [];\r\n        this.cols = [];\r\n        //const {REACT_APP_API_GATEWAY, REACT_APP_MATRIX_SERVICE} = process.env;\r\n        //`${REACT_APP_API_GATEWAY}${REACT_APP_MATRIX_SERVICE}/ImportDataMatrixFromExcel`;\r\n\r\n        this.restApi = new RestApiModule();\r\n        this.alert = new AlertModule();\r\n\r\n        this.fileInput = React.createRef();\r\n        this.uploadFileUrl = this.restApi.getImportEndpoint('importData');\r\n\r\n        this.styleBar = {\r\n            width: 0,\r\n        }\r\n\r\n        this.progressAction = null; // handle interval\r\n\r\n    }\r\n\r\n    handleSelectFile(e) {\r\n        function checkFileType(file) {\r\n            const allowedTypes = process.env.REACT_APP_ACCEPTED_IMPORT_FILE_EXT.split(\",\");\r\n            const extension = file.name.substring(file.name.lastIndexOf('.'));\r\n            return allowedTypes.includes(extension);\r\n        }\r\n\r\n        const files = e.target.files;\r\n\r\n        if (files && files[0])\r\n            if (checkFileType(files[0])) {\r\n                this.setState({\r\n                    file: files[0],\r\n                    showButton2: true,\r\n                    isExcelHeadersValid: null\r\n                });\r\n            } else {\r\n                const {language} = this.props;\r\n                this.alert.showMessage(\"error\",\r\n                    language.importSection.wrongFileExtTitle,\r\n                    language.importSection.wrongFileExt,\r\n                    false)\r\n            }\r\n    };\r\n\r\n    handleFile() {\r\n        /* Boilerplate to set up FileReader */\r\n        this.props.setSpinner();\r\n        try {\r\n\r\n            const reader = new FileReader();\r\n            const rABS = !!reader.readAsBinaryString;\r\n            reader.onload = (e) => {\r\n                /* Parse data */\r\n                const bstr = e.target.result;\r\n                const wb = XLSX.read(bstr, {type: rABS ? 'binary' : 'array', bookVBA: true, sheetRows: 0});\r\n                /* Get first worksheet */\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n\r\n                /* Convert array of arrays */\r\n                const data = XLSX.utils.sheet_to_json(ws, {\r\n                    header: 1,\r\n                    defval: \"\"\r\n                });\r\n\r\n                /* Store the json data */\r\n                this.fileJSON = JSON.stringify(data, null, 2);\r\n\r\n                this.handleJSONHeaders();\r\n\r\n                this.props.setSpinner();\r\n            };\r\n\r\n            if (rABS) {\r\n                reader.readAsBinaryString(this.state.file);\r\n            } else {\r\n                reader.readAsArrayBuffer(this.state.file);\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n            this.setState({showButton3: false})\r\n            this.props.setSpinner();\r\n        }\r\n\r\n    }\r\n\r\n    handleJSONHeaders() {\r\n\r\n        const headerMap = JSON.parse(JSON.stringify(groupingMap));\r\n        const excelHeadersArray = (JSON.parse(this.fileJSON))[1];\r\n\r\n        const columnsMap = headerMap.reduce((fullArr, item) => {\r\n            const cols = item.columns.reduce((arr, col) => {\r\n                if (col.importColumnId !== undefined) arr.push(col.importColumnId)\r\n                return arr;\r\n            }, []);\r\n            return [...fullArr, ...cols]\r\n        }, [])\r\n\r\n        const isSame = JSON.stringify(excelHeadersArray).replace(/ /g, '').toLowerCase() === JSON.stringify(columnsMap).toLowerCase();\r\n        this.setState({isExcelHeadersValid: isSame, showButton3: isSame, showButton2: !isSame});\r\n\r\n        if (!isSame) {\r\n            this.setState({file: null, showButton2: false})\r\n        }\r\n    }\r\n\r\n    downloadLogFile() {\r\n        const {importActionResponse} = this.state;\r\n        if (importActionResponse) {\r\n            const today = new Date();\r\n            const todayDate = '_' + today.getDate() + (today.toLocaleString('default', {month: 'long'})) + today.getFullYear();\r\n\r\n            const {importResult} = JSON.parse(importActionResponse);\r\n            const {log} = importResult[0];\r\n\r\n            const blob = new Blob([log], {type: \"text/plain;charset=utf-8\"});\r\n            saveAs(blob, `importDetailedLog${todayDate}.txt`);\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            file: null,\r\n            isExcelHeadersValid: null,\r\n            importActionResponse: null,\r\n            showButton2: false,\r\n            showButton3: false,\r\n            progress: -1\r\n        })\r\n        this.props.setModalImport();\r\n    }\r\n\r\n    customFormRenderer(onSubmit) {\r\n        const {language, token} = this.props;\r\n\r\n        return (\r\n            <Row>\r\n                <Col>\r\n                    <Button color={'success'} size={\"lg\"} block\r\n                            hidden={!this.state.showButton3}\r\n                            onClick={(e) => {\r\n\r\n                                this.restApi.callApi(\"getLocksCount\", {\r\n                                    token\r\n                                }).then(res => {\r\n\r\n                                    const {count} = res.locksCount;\r\n                                    const lockCountMessage = language.importSection.locksCountForLastStep.replace('{count}', count);\r\n\r\n                                    this.alert.getConfirmation(\r\n                                        \"warning\",\r\n                                        language.importSection.warningTitleForLastStep,\r\n                                        `${language.importSection.warningMessageForLastStep}<br><br>${lockCountMessage}`\r\n                                    ).then(response => {\r\n\r\n                                        if (response === true) {\r\n\r\n                                            // if user start an import action do not make observable request for check import status\r\n                                            this.props.setImportPolling(false);\r\n\r\n                                            // Add this request for 1 time to set DB\r\n                                            this.restApi.callApi('getImportStatus', {\r\n                                                token\r\n                                            });\r\n\r\n                                            this.setState({showButton3: false});\r\n                                            onSubmit(e)\r\n                                        }\r\n                                    })\r\n                                })\r\n\r\n\r\n                            }}>\r\n                        {language.upload}\r\n                        <i className={`icon icon-upload ml-2`}/>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    formGetter() {\r\n        return JSON.stringify({\r\n            token: this.props.token,\r\n            importedExcelAsJSON: this.fileJSON\r\n        });\r\n    }\r\n\r\n    customProgressRenderer(progressFile, hasError, cancelHandler) {\r\n        const {language} = this.props;\r\n\r\n        function countOfRowsText(count) {\r\n            return +count > 1\r\n                ? `${count} ${language.importSection.rows}`\r\n                : `${count} ${language.importSection.rows.slice(0, -1)}`\r\n        }\r\n\r\n        const {progress} = this.state;\r\n\r\n        if (hasError || progress > -1) {\r\n\r\n            let progressBar = Object.assign({}, this.styleBar);\r\n            progressBar.width = `${progress}%`;\r\n\r\n            let result = null;\r\n            const {importActionResponse} = this.state;\r\n            if (importActionResponse && progress === 100) {\r\n\r\n                const jsonResponse = JSON.parse(importActionResponse);\r\n                const {importResult, exec_status, error_code, error_message} = jsonResponse;\r\n\r\n                if (importResult) result = importResult[0];\r\n\r\n                if (exec_status === \"error\") {\r\n\r\n                    this.setState({progress: 0})\r\n\r\n                    const message = error_message ? error_message : \"Null exception\";\r\n\r\n                    if (+error_code === 10) {\r\n                        this.alert.showMessage('error', 'Error', message, true);\r\n                    } else {\r\n                        this.alert.showMessage('error', 'Error', message, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    {!hasError &&\r\n                    <Row>\r\n                        <Col>\r\n                            <div className={\"progressWrapper text-center\"}>\r\n                                <span>Import progress: {`${progress}%`}</span>\r\n                                <div className={\"progressBar\"} style={progressBar}/>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    }\r\n\r\n                    {hasError &&\r\n                    <Row>\r\n                        <Col>\r\n                            <Alert color={\"danger\"}>\r\n                                <i className=\"icon icon-triangle-warning mr-2\"/>\r\n                                {language.importSection.progressError}\r\n                            </Alert>\r\n                        </Col>\r\n                    </Row>\r\n                    }\r\n\r\n                    {(progress === 100 && result && !hasError) &&\r\n                    <Row>\r\n                        <Col>\r\n                            <Card body={false}>\r\n                                <CardHeader>\r\n                                    {language.importSection.summaryLabel}\r\n                                </CardHeader>\r\n                                <CardBody>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Card color={\"primary\"} inverse>\r\n                                                <CardBody>\r\n                                                    <CardTitle tag={\"h5\"}>\r\n                                                        {language.importSection.totalRowCount}\r\n                                                    </CardTitle>\r\n                                                    <CardText>{language.importSection.totalRowText}</CardText>\r\n                                                    <Alert tag={\"h4\"} color={\"info\"}>\r\n                                                        {countOfRowsText(result.totalcount)}\r\n                                                    </Alert>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Card color={\"success\"} inverse>\r\n                                                <CardBody>\r\n                                                    <CardTitle tag={\"h5\"}>\r\n                                                        {language.importSection.successRowCount}\r\n                                                    </CardTitle>\r\n                                                    <CardText>{language.importSection.successRowText}</CardText>\r\n                                                    <Alert tag={\"h4\"} color={\"info\"}>\r\n                                                        {countOfRowsText(result.successCount)}\r\n                                                    </Alert>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Card color={\"danger\"} inverse>\r\n                                                <CardBody>\r\n                                                    <CardTitle tag={\"h5\"}>\r\n                                                        {language.importSection.failedRowCount}\r\n                                                    </CardTitle>\r\n                                                    <CardText>{language.importSection.failedRowText}</CardText>\r\n                                                    <Alert tag={\"h4\"} color={\"info\"}>\r\n                                                        {countOfRowsText(result.errorcount)}\r\n                                                    </Alert>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <hr/>\r\n                                            <Button color={\"primary\"} className={\"mt-3\"} block size={\"lg\"}\r\n                                                    onClick={this.downloadLogFile.bind(this)}>\r\n                                                {language.importSection.downloadLogFile}\r\n                                                <i className={`icon icon-download-save ml-2`}/>\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                    }\r\n                </>\r\n            );\r\n\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {language, loadAfterImport} = this.props;\r\n\r\n        if (language) {\r\n            return (\r\n                <Modal isOpen={this.props.open} size={'lg'} centered={true}>\r\n                    <ModalHeader toggle={this.toggle.bind(this)}>{language.importDataMatrixFile}</ModalHeader>\r\n                    <ModalBody className={'import-file'}>\r\n\r\n                        <input ref={fileInput => this.fileInput = fileInput} type=\"file\"\r\n                               accept={process.env.REACT_APP_ACCEPTED_IMPORT_FILE_TYPE}\r\n                               onChange={this.handleSelectFile.bind(this)} hidden={true}/>\r\n\r\n                        <Row>\r\n                            <Col md={'12'}>\r\n                                {!this.state.file &&\r\n                                <div className={'choose-file-wrapper'}>\r\n                                    <Button className={\"chose-file\"} onClick={() => this.fileInput.click()}>\r\n                                        {language.chooseFile}\r\n                                    </Button>\r\n                                </div>\r\n                                }\r\n                                {this.state.file &&\r\n                                <div className={'choose-file-wrapper'}>\r\n                                    <h4>\r\n                                        {language.importSection.selectedFileLabel}\r\n                                        {this.state.file.name}\r\n                                    </h4>\r\n                                </div>\r\n                                }\r\n                            </Col>\r\n                            <hr/>\r\n                            <Col>\r\n                                {this.state.showButton2 &&\r\n                                <Button color={'primary'} className={'mt-3 mb-3'} size={\"lg\"} block\r\n                                        onClick={this.handleFile.bind(this)}>\r\n                                    {language.validate}\r\n                                    <i className={`icon icon-file ml-2`}/>\r\n                                </Button>\r\n                                }\r\n                                {this.state.isExcelHeadersValid === true &&\r\n                                <Alert color=\"success\" className={'mt-2'}>\r\n                                    <i className={`icon icon-check mr-2`}/>\r\n                                    {language.importSection.selectedFileValid}\r\n                                </Alert>\r\n                                }\r\n                                {this.state.isExcelHeadersValid === false &&\r\n                                <Alert color=\"danger\" className={'mt-2'}>\r\n                                    <i className={`icon icon-cross mr-2`}/>\r\n                                    {language.importSection.selectedFileNotValid}\r\n                                </Alert>\r\n                                }\r\n                            </Col>\r\n\r\n                        </Row>\r\n\r\n                        <FileUploadProgress\r\n                            url={this.uploadFileUrl}\r\n                            method={\"POST\"}\r\n                            beforeSend={(request) => {\r\n                                this.props.setSpinner();\r\n                                this.setState({progress: Math.floor(Math.random() * 16) + 10});\r\n                                request.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\r\n                                return request\r\n                            }}\r\n                            onProgress={(e, request, progress) => {\r\n                                console.log(progress);\r\n                                if (this.state.progress < 95) {\r\n                                    this.progressAction = setInterval(() => {\r\n\r\n                                        let increase = Math.floor(Math.random() * 5) + 5;\r\n                                        this.setState({\r\n                                            progress: increase + +this.state.progress\r\n                                        });\r\n                                    }, 2000)\r\n                                }\r\n                            }}\r\n                            onLoad={(e, request) => {\r\n                                clearInterval(this.progressAction);\r\n                                setTimeout(() => {\r\n                                    // Wait a little time to get correct data structure from response\r\n                                    this.setState(\r\n                                        {\r\n                                            progress: 100,\r\n                                            importActionResponse: request.response\r\n                                        }, () => {\r\n                                            // After set state execute load data action\r\n                                            const {exec_status} = JSON.parse(this.state.importActionResponse);\r\n\r\n                                            if (exec_status === \"success\") {\r\n                                                // Import finish successfully, then reload the data.\r\n                                                if (this.state.progress === 100) {\r\n                                                    loadAfterImport();\r\n\r\n                                                    // app should restart make observable request for control import status\r\n                                                    this.props.setImportPolling(true);\r\n\r\n                                                }\r\n                                            }\r\n                                            this.props.setSpinner();\r\n                                        });\r\n                                }, 200);\r\n                            }}\r\n                            onError={(e, request) => {\r\n                                this.setState({progress: 0}, () => {\r\n                                    clearInterval(this.progressAction);\r\n                                    this.props.setSpinner();\r\n                                })\r\n                            }}\r\n                            onAbort={(e, request) => {\r\n                                this.setState({progress: 0}, () => {\r\n                                    clearInterval(this.progressAction);\r\n                                    this.props.setSpinner();\r\n                                })\r\n                            }}\r\n                            formGetter={this.formGetter.bind(this)}\r\n                            formRenderer={this.customFormRenderer.bind(this)}\r\n                            progressRenderer={this.customProgressRenderer.bind(this)}\r\n\r\n                        />\r\n                    </ModalBody>\r\n\r\n                </Modal>\r\n            )\r\n        } else {\r\n            return (<></>)\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        open: state.modalImportToggle,\r\n        import: state.import,\r\n        language: state.language,\r\n        token: state.token\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModalImport: () => dispatch(modalImportToggle()),\r\n        setSpinner: () => dispatch(spinnerToggle()),\r\n        setImportPolling: (data) => dispatch(setImportPolling(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalImport);"]},"metadata":{},"sourceType":"module"}