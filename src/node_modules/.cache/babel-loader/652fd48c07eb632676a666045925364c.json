{"ast":null,"code":"/* canvas-toBlob.js\n * A canvas.toBlob() implementation.\n * 2016-05-26\n * \n * By Eli Grey, http://eligrey.com and Devin Samarin, https://github.com/eboyjr\n * License: MIT\n *   See https://github.com/eligrey/canvas-toBlob.js/blob/master/LICENSE.md\n */\n\n/*global self */\n\n/*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,\n  plusplus: true */\n\n/*! @source http://purl.eligrey.com/github/canvas-toBlob.js/blob/master/canvas-toBlob.js */\n(function (view) {\n  \"use strict\";\n\n  var Uint8Array = view.Uint8Array,\n      HTMLCanvasElement = view.HTMLCanvasElement,\n      canvas_proto = HTMLCanvasElement && HTMLCanvasElement.prototype,\n      is_base64_regex = /\\s*;\\s*base64\\s*(?:;|$)/i,\n      to_data_url = \"toDataURL\",\n      base64_ranks,\n      decode_base64 = function decode_base64(base64) {\n    var len = base64.length,\n        buffer = new Uint8Array(len / 4 * 3 | 0),\n        i = 0,\n        outptr = 0,\n        last = [0, 0],\n        state = 0,\n        save = 0,\n        rank,\n        code,\n        undef;\n\n    while (len--) {\n      code = base64.charCodeAt(i++);\n      rank = base64_ranks[code - 43];\n\n      if (rank !== 255 && rank !== undef) {\n        last[1] = last[0];\n        last[0] = code;\n        save = save << 6 | rank;\n        state++;\n\n        if (state === 4) {\n          buffer[outptr++] = save >>> 16;\n\n          if (last[1] !== 61\n          /* padding character */\n          ) {\n              buffer[outptr++] = save >>> 8;\n            }\n\n          if (last[0] !== 61\n          /* padding character */\n          ) {\n              buffer[outptr++] = save;\n            }\n\n          state = 0;\n        }\n      }\n    } // 2/3 chance there's going to be some null bytes at the end, but that\n    // doesn't really matter with most image formats.\n    // If it somehow matters for you, truncate the buffer up outptr.\n\n\n    return buffer;\n  };\n\n  if (Uint8Array) {\n    base64_ranks = new Uint8Array([62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, 0, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]);\n  }\n\n  if (HTMLCanvasElement && (!canvas_proto.toBlob || !canvas_proto.toBlobHD)) {\n    if (!canvas_proto.toBlob) canvas_proto.toBlob = function (callback, type\n    /*, ...args*/\n    ) {\n      if (!type) {\n        type = \"image/png\";\n      }\n\n      if (this.mozGetAsFile) {\n        callback(this.mozGetAsFile(\"canvas\", type));\n        return;\n      }\n\n      if (this.msToBlob && /^\\s*image\\/png\\s*(?:$|;)/i.test(type)) {\n        callback(this.msToBlob());\n        return;\n      }\n\n      var args = Array.prototype.slice.call(arguments, 1),\n          dataURI = this[to_data_url].apply(this, args),\n          header_end = dataURI.indexOf(\",\"),\n          data = dataURI.substring(header_end + 1),\n          is_base64 = is_base64_regex.test(dataURI.substring(0, header_end)),\n          blob;\n\n      if (Blob.fake) {\n        // no reason to decode a data: URI that's just going to become a data URI again\n        blob = new Blob();\n\n        if (is_base64) {\n          blob.encoding = \"base64\";\n        } else {\n          blob.encoding = \"URI\";\n        }\n\n        blob.data = data;\n        blob.size = data.length;\n      } else if (Uint8Array) {\n        if (is_base64) {\n          blob = new Blob([decode_base64(data)], {\n            type: type\n          });\n        } else {\n          blob = new Blob([decodeURIComponent(data)], {\n            type: type\n          });\n        }\n      }\n\n      callback(blob);\n    };\n\n    if (!canvas_proto.toBlobHD && canvas_proto.toDataURLHD) {\n      canvas_proto.toBlobHD = function () {\n        to_data_url = \"toDataURLHD\";\n        var blob = this.toBlob();\n        to_data_url = \"toDataURL\";\n        return blob;\n      };\n    } else {\n      canvas_proto.toBlobHD = canvas_proto.toBlob;\n    }\n  }\n})(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || this.content || this);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/node_modules/canvas-toBlob/canvas-toBlob.js"],"names":["view","Uint8Array","HTMLCanvasElement","canvas_proto","prototype","is_base64_regex","to_data_url","base64_ranks","decode_base64","base64","len","length","buffer","i","outptr","last","state","save","rank","code","undef","charCodeAt","toBlob","toBlobHD","callback","type","mozGetAsFile","msToBlob","test","args","Array","slice","call","arguments","dataURI","apply","header_end","indexOf","data","substring","is_base64","blob","Blob","fake","encoding","size","decodeURIComponent","toDataURLHD","self","window","content"],"mappings":"AAAA;;;;;;;;;AASA;;AACA;;;AAGA;AAEC,WAASA,IAAT,EAAe;AAChB;;AACA,MACGC,UAAU,GAAGD,IAAI,CAACC,UADrB;AAAA,MAEGC,iBAAiB,GAAGF,IAAI,CAACE,iBAF5B;AAAA,MAGGC,YAAY,GAAGD,iBAAiB,IAAIA,iBAAiB,CAACE,SAHzD;AAAA,MAIGC,eAAe,GAAG,0BAJrB;AAAA,MAKGC,WAAW,GAAG,WALjB;AAAA,MAMGC,YANH;AAAA,MAOGC,aAAa,GAAG,SAAhBA,aAAgB,CAASC,MAAT,EAAiB;AAClC,QACGC,GAAG,GAAGD,MAAM,CAACE,MADhB;AAAA,QAEGC,MAAM,GAAG,IAAIX,UAAJ,CAAeS,GAAG,GAAG,CAAN,GAAU,CAAV,GAAc,CAA7B,CAFZ;AAAA,QAGGG,CAAC,GAAG,CAHP;AAAA,QAIGC,MAAM,GAAG,CAJZ;AAAA,QAKGC,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,CALV;AAAA,QAMGC,KAAK,GAAG,CANX;AAAA,QAOGC,IAAI,GAAG,CAPV;AAAA,QAQGC,IARH;AAAA,QASGC,IATH;AAAA,QAUGC,KAVH;;AAYA,WAAOV,GAAG,EAAV,EAAc;AACbS,MAAAA,IAAI,GAAGV,MAAM,CAACY,UAAP,CAAkBR,CAAC,EAAnB,CAAP;AACAK,MAAAA,IAAI,GAAGX,YAAY,CAACY,IAAI,GAAC,EAAN,CAAnB;;AACA,UAAID,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAKE,KAA7B,EAAoC;AACnCL,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAd;AACAA,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUI,IAAV;AACAF,QAAAA,IAAI,GAAIA,IAAI,IAAI,CAAT,GAAcC,IAArB;AACAF,QAAAA,KAAK;;AACL,YAAIA,KAAK,KAAK,CAAd,EAAiB;AAChBJ,UAAAA,MAAM,CAACE,MAAM,EAAP,CAAN,GAAmBG,IAAI,KAAK,EAA5B;;AACA,cAAIF,IAAI,CAAC,CAAD,CAAJ,KAAY;AAAG;AAAnB,YAA4C;AAC3CH,cAAAA,MAAM,CAACE,MAAM,EAAP,CAAN,GAAmBG,IAAI,KAAK,CAA5B;AACA;;AACD,cAAIF,IAAI,CAAC,CAAD,CAAJ,KAAY;AAAG;AAAnB,YAA4C;AAC3CH,cAAAA,MAAM,CAACE,MAAM,EAAP,CAAN,GAAmBG,IAAnB;AACA;;AACDD,UAAAA,KAAK,GAAG,CAAR;AACA;AACD;AACD,KAhCiC,CAiClC;AACA;AACA;;;AACA,WAAOJ,MAAP;AACA,GA5CF;;AA8CA,MAAIX,UAAJ,EAAgB;AACfM,IAAAA,YAAY,GAAG,IAAIN,UAAJ,CAAe,CAC3B,EAD2B,EACvB,CAAC,CADsB,EACnB,CAAC,CADkB,EACf,CAAC,CADc,EACX,EADW,EACP,EADO,EACH,EADG,EACC,EADD,EACK,EADL,EACS,EADT,EACa,EADb,EACiB,EADjB,EACqB,EADrB,EACyB,EADzB,EAC6B,EAD7B,EACiC,CAAC,CADlC,EAE3B,CAAC,CAF0B,EAEvB,CAAC,CAFsB,EAElB,CAFkB,EAEf,CAAC,CAFc,EAEX,CAAC,CAFU,EAEP,CAAC,CAFM,EAEF,CAFE,EAEE,CAFF,EAEM,CAFN,EAEU,CAFV,EAEc,CAFd,EAEkB,CAFlB,EAEsB,CAFtB,EAE0B,CAF1B,EAE8B,CAF9B,EAEkC,CAFlC,EAG3B,EAH2B,EAGvB,EAHuB,EAGnB,EAHmB,EAGf,EAHe,EAGX,EAHW,EAGP,EAHO,EAGH,EAHG,EAGC,EAHD,EAGK,EAHL,EAGS,EAHT,EAGa,EAHb,EAGiB,EAHjB,EAGqB,EAHrB,EAGyB,EAHzB,EAG6B,EAH7B,EAGiC,EAHjC,EAI3B,CAAC,CAJ0B,EAIvB,CAAC,CAJsB,EAInB,CAAC,CAJkB,EAIf,CAAC,CAJc,EAIX,CAAC,CAJU,EAIP,CAAC,CAJM,EAIH,EAJG,EAIC,EAJD,EAIK,EAJL,EAIS,EAJT,EAIa,EAJb,EAIiB,EAJjB,EAIqB,EAJrB,EAIyB,EAJzB,EAI6B,EAJ7B,EAIiC,EAJjC,EAK3B,EAL2B,EAKvB,EALuB,EAKnB,EALmB,EAKf,EALe,EAKX,EALW,EAKP,EALO,EAKH,EALG,EAKC,EALD,EAKK,EALL,EAKS,EALT,EAKa,EALb,EAKiB,EALjB,EAKqB,EALrB,EAKyB,EALzB,EAK6B,EAL7B,EAKiC,EALjC,CAAf,CAAf;AAOA;;AACD,MAAIC,iBAAiB,KAAK,CAACC,YAAY,CAACmB,MAAd,IAAwB,CAACnB,YAAY,CAACoB,QAA3C,CAArB,EAA2E;AAC1E,QAAI,CAACpB,YAAY,CAACmB,MAAlB,EACAnB,YAAY,CAACmB,MAAb,GAAsB,UAASE,QAAT,EAAmBC;AAAK;AAAxB,MAAuC;AAC1D,UAAI,CAACA,IAAL,EAAW;AACZA,QAAAA,IAAI,GAAG,WAAP;AACA;;AAAC,UAAI,KAAKC,YAAT,EAAuB;AACxBF,QAAAA,QAAQ,CAAC,KAAKE,YAAL,CAAkB,QAAlB,EAA4BD,IAA5B,CAAD,CAAR;AACA;AACA;;AAAC,UAAI,KAAKE,QAAL,IAAiB,4BAA4BC,IAA5B,CAAiCH,IAAjC,CAArB,EAA6D;AAC9DD,QAAAA,QAAQ,CAAC,KAAKG,QAAL,EAAD,CAAR;AACA;AACA;;AAED,UACGE,IAAI,GAAGC,KAAK,CAAC1B,SAAN,CAAgB2B,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CADV;AAAA,UAEGC,OAAO,GAAG,KAAK5B,WAAL,EAAkB6B,KAAlB,CAAwB,IAAxB,EAA8BN,IAA9B,CAFb;AAAA,UAGGO,UAAU,GAAGF,OAAO,CAACG,OAAR,CAAgB,GAAhB,CAHhB;AAAA,UAIGC,IAAI,GAAGJ,OAAO,CAACK,SAAR,CAAkBH,UAAU,GAAG,CAA/B,CAJV;AAAA,UAKGI,SAAS,GAAGnC,eAAe,CAACuB,IAAhB,CAAqBM,OAAO,CAACK,SAAR,CAAkB,CAAlB,EAAqBH,UAArB,CAArB,CALf;AAAA,UAMGK,IANH;;AAQA,UAAIC,IAAI,CAACC,IAAT,EAAe;AACd;AACAF,QAAAA,IAAI,GAAG,IAAIC,IAAJ,EAAP;;AACA,YAAIF,SAAJ,EAAe;AACdC,UAAAA,IAAI,CAACG,QAAL,GAAgB,QAAhB;AACA,SAFD,MAEO;AACNH,UAAAA,IAAI,CAACG,QAAL,GAAgB,KAAhB;AACA;;AACDH,QAAAA,IAAI,CAACH,IAAL,GAAYA,IAAZ;AACAG,QAAAA,IAAI,CAACI,IAAL,GAAYP,IAAI,CAAC3B,MAAjB;AACA,OAVD,MAUO,IAAIV,UAAJ,EAAgB;AACtB,YAAIuC,SAAJ,EAAe;AACdC,UAAAA,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAClC,aAAa,CAAC8B,IAAD,CAAd,CAAT,EAAgC;AAACb,YAAAA,IAAI,EAAEA;AAAP,WAAhC,CAAP;AACA,SAFD,MAEO;AACNgB,UAAAA,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACI,kBAAkB,CAACR,IAAD,CAAnB,CAAT,EAAqC;AAACb,YAAAA,IAAI,EAAEA;AAAP,WAArC,CAAP;AACA;AACD;;AACDD,MAAAA,QAAQ,CAACiB,IAAD,CAAR;AACA,KArCD;;AAuCA,QAAI,CAACtC,YAAY,CAACoB,QAAd,IAA0BpB,YAAY,CAAC4C,WAA3C,EAAwD;AACvD5C,MAAAA,YAAY,CAACoB,QAAb,GAAwB,YAAW;AAClCjB,QAAAA,WAAW,GAAG,aAAd;AACA,YAAImC,IAAI,GAAG,KAAKnB,MAAL,EAAX;AACAhB,QAAAA,WAAW,GAAG,WAAd;AACA,eAAOmC,IAAP;AACA,OALD;AAMA,KAPD,MAOO;AACNtC,MAAAA,YAAY,CAACoB,QAAb,GAAwBpB,YAAY,CAACmB,MAArC;AACA;AACD;AACA,CA7GA,EA6GC,OAAO0B,IAAP,KAAgB,WAAhB,IAA+BA,IAA/B,IAAuC,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAxE,IAAkF,KAAKC,OAAvF,IAAkG,IA7GnG,CAAD","sourcesContent":["/* canvas-toBlob.js\n * A canvas.toBlob() implementation.\n * 2016-05-26\n * \n * By Eli Grey, http://eligrey.com and Devin Samarin, https://github.com/eboyjr\n * License: MIT\n *   See https://github.com/eligrey/canvas-toBlob.js/blob/master/LICENSE.md\n */\n\n/*global self */\n/*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,\n  plusplus: true */\n\n/*! @source http://purl.eligrey.com/github/canvas-toBlob.js/blob/master/canvas-toBlob.js */\n\n(function(view) {\n\"use strict\";\nvar\n\t  Uint8Array = view.Uint8Array\n\t, HTMLCanvasElement = view.HTMLCanvasElement\n\t, canvas_proto = HTMLCanvasElement && HTMLCanvasElement.prototype\n\t, is_base64_regex = /\\s*;\\s*base64\\s*(?:;|$)/i\n\t, to_data_url = \"toDataURL\"\n\t, base64_ranks\n\t, decode_base64 = function(base64) {\n\t\tvar\n\t\t\t  len = base64.length\n\t\t\t, buffer = new Uint8Array(len / 4 * 3 | 0)\n\t\t\t, i = 0\n\t\t\t, outptr = 0\n\t\t\t, last = [0, 0]\n\t\t\t, state = 0\n\t\t\t, save = 0\n\t\t\t, rank\n\t\t\t, code\n\t\t\t, undef\n\t\t;\n\t\twhile (len--) {\n\t\t\tcode = base64.charCodeAt(i++);\n\t\t\trank = base64_ranks[code-43];\n\t\t\tif (rank !== 255 && rank !== undef) {\n\t\t\t\tlast[1] = last[0];\n\t\t\t\tlast[0] = code;\n\t\t\t\tsave = (save << 6) | rank;\n\t\t\t\tstate++;\n\t\t\t\tif (state === 4) {\n\t\t\t\t\tbuffer[outptr++] = save >>> 16;\n\t\t\t\t\tif (last[1] !== 61 /* padding character */) {\n\t\t\t\t\t\tbuffer[outptr++] = save >>> 8;\n\t\t\t\t\t}\n\t\t\t\t\tif (last[0] !== 61 /* padding character */) {\n\t\t\t\t\t\tbuffer[outptr++] = save;\n\t\t\t\t\t}\n\t\t\t\t\tstate = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 2/3 chance there's going to be some null bytes at the end, but that\n\t\t// doesn't really matter with most image formats.\n\t\t// If it somehow matters for you, truncate the buffer up outptr.\n\t\treturn buffer;\n\t}\n;\nif (Uint8Array) {\n\tbase64_ranks = new Uint8Array([\n\t\t  62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1\n\t\t, -1, -1,  0, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9\n\t\t, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25\n\t\t, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35\n\t\t, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n\t]);\n}\nif (HTMLCanvasElement && (!canvas_proto.toBlob || !canvas_proto.toBlobHD)) {\n\tif (!canvas_proto.toBlob)\n\tcanvas_proto.toBlob = function(callback, type /*, ...args*/) {\n\t\t  if (!type) {\n\t\t\ttype = \"image/png\";\n\t\t} if (this.mozGetAsFile) {\n\t\t\tcallback(this.mozGetAsFile(\"canvas\", type));\n\t\t\treturn;\n\t\t} if (this.msToBlob && /^\\s*image\\/png\\s*(?:$|;)/i.test(type)) {\n\t\t\tcallback(this.msToBlob());\n\t\t\treturn;\n\t\t}\n\n\t\tvar\n\t\t\t  args = Array.prototype.slice.call(arguments, 1)\n\t\t\t, dataURI = this[to_data_url].apply(this, args)\n\t\t\t, header_end = dataURI.indexOf(\",\")\n\t\t\t, data = dataURI.substring(header_end + 1)\n\t\t\t, is_base64 = is_base64_regex.test(dataURI.substring(0, header_end))\n\t\t\t, blob\n\t\t;\n\t\tif (Blob.fake) {\n\t\t\t// no reason to decode a data: URI that's just going to become a data URI again\n\t\t\tblob = new Blob\n\t\t\tif (is_base64) {\n\t\t\t\tblob.encoding = \"base64\";\n\t\t\t} else {\n\t\t\t\tblob.encoding = \"URI\";\n\t\t\t}\n\t\t\tblob.data = data;\n\t\t\tblob.size = data.length;\n\t\t} else if (Uint8Array) {\n\t\t\tif (is_base64) {\n\t\t\t\tblob = new Blob([decode_base64(data)], {type: type});\n\t\t\t} else {\n\t\t\t\tblob = new Blob([decodeURIComponent(data)], {type: type});\n\t\t\t}\n\t\t}\n\t\tcallback(blob);\n\t};\n\n\tif (!canvas_proto.toBlobHD && canvas_proto.toDataURLHD) {\n\t\tcanvas_proto.toBlobHD = function() {\n\t\t\tto_data_url = \"toDataURLHD\";\n\t\t\tvar blob = this.toBlob();\n\t\t\tto_data_url = \"toDataURL\";\n\t\t\treturn blob;\n\t\t}\n\t} else {\n\t\tcanvas_proto.toBlobHD = canvas_proto.toBlob;\n\t}\n}\n}(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || this.content || this));\n"]},"metadata":{},"sourceType":"script"}