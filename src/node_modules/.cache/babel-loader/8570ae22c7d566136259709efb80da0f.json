{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\src\\\\components\\\\ImportPolling.jsx\";\n\n/*\r\n* Import polling hook\r\n*\r\n*/\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport RestApiModule from '../RestApiModule';\nimport { Jumbotron } from 'reactstrap';\n\nclass ImportPolling extends React.Component {\n  constructor(props) {\n    super(props);\n    this.restApi = new RestApiModule();\n    this.interval = null;\n    this.intervalTime = +process.env.REACT_APP_IMPORT_POLLING_INTERVAL;\n    this.state = {\n      importOngoing: false,\n      uname: null\n    };\n  }\n\n  componentDidMount() {\n    this.tickStarter();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this.tickStarter();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  tickStarter() {\n    const {\n      token,\n      importPolling\n    } = this.props;\n\n    if (token && importPolling) {\n      this.interval = setInterval(() => {\n        this.tick();\n      }, this.intervalTime);\n    } else {\n      clearInterval(this.interval);\n    }\n  }\n\n  tick() {\n    const {\n      token\n    } = this.props;\n    const {\n      importOngoing\n    } = this.state;\n    this.restApi.callApi('getImportStatus', {\n      token\n    }).then(response => {\n      const {\n        islock,\n        uname\n      } = response.isImportOngoing;\n\n      if (importOngoing !== islock) {\n        this.setState({\n          importOngoing: islock,\n          uname\n        }); // if isLock variable value is false that means is before status is true.\n        // So we can understand there was an import action and it's done now.\n        // if this happen we need to refresh the data.\n\n        if (!islock) document.location.reload();\n      }\n    });\n  }\n\n  render() {\n    const {\n      importOngoing,\n      uname\n    } = this.state;\n    const {\n      language\n    } = this.props;\n\n    if (importOngoing) {\n      const message = language.importSection.ongoingImportText.replace('{username}', uname);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: 'empty-data',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Jumbotron, {\n        className: \"empty-data-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"display-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }\n      }, language.importSection.ongoingImportTitle), /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"lead\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }\n      }, message)));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.token,\n    language: state.language,\n    importPolling: state.importPolling\n  };\n}\n\nexport default connect(mapStateToProps)(ImportPolling);","map":{"version":3,"sources":["C:/Users/soperasyon27/Desktop/FE/src18mart/src/src/components/ImportPolling.jsx"],"names":["React","connect","RestApiModule","Jumbotron","ImportPolling","Component","constructor","props","restApi","interval","intervalTime","process","env","REACT_APP_IMPORT_POLLING_INTERVAL","state","importOngoing","uname","componentDidMount","tickStarter","componentDidUpdate","prevProps","prevState","snapshot","componentWillUnmount","clearInterval","token","importPolling","setInterval","tick","callApi","then","response","islock","isImportOngoing","setState","document","location","reload","render","language","message","importSection","ongoingImportText","replace","ongoingImportTitle","mapStateToProps"],"mappings":"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","sourcesContent":["/*\r\n* Import polling hook\r\n*\r\n*/\r\nimport React from 'react'\r\nimport {connect} from \"react-redux\";\r\n\r\nimport RestApiModule from '../RestApiModule'\r\nimport {Jumbotron} from 'reactstrap';\r\n\r\n\r\nclass ImportPolling extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.restApi = new RestApiModule();\r\n        this.interval = null;\r\n        this.intervalTime = +process.env.REACT_APP_IMPORT_POLLING_INTERVAL;\r\n        this.state = {\r\n            importOngoing: false,\r\n            uname: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.tickStarter();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        this.tickStarter();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    tickStarter() {\r\n        const {token, importPolling} = this.props;\r\n\r\n        if (token && importPolling) {\r\n            this.interval = setInterval(() => {\r\n                this.tick()\r\n            }, this.intervalTime)\r\n        } else {\r\n            clearInterval(this.interval);\r\n        }\r\n    }\r\n\r\n    tick() {\r\n        const {token} = this.props;\r\n        const {importOngoing} = this.state;\r\n\r\n        this.restApi.callApi('getImportStatus', {\r\n            token\r\n        }).then(response => {\r\n\r\n            const {islock, uname} = response.isImportOngoing\r\n\r\n            if (importOngoing !== islock) {\r\n                this.setState({\r\n                    importOngoing: islock,\r\n                    uname\r\n                })\r\n\r\n                // if isLock variable value is false that means is before status is true.\r\n                // So we can understand there was an import action and it's done now.\r\n                // if this happen we need to refresh the data.\r\n                if (!islock) document.location.reload();\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {importOngoing, uname} = this.state;\r\n        const {language} = this.props;\r\n\r\n        if (importOngoing) {\r\n\r\n            const message = language.importSection.ongoingImportText.replace('{username}', uname);\r\n\r\n            return (\r\n                <div className={'empty-data'}>\r\n                    <Jumbotron className=\"empty-data-content\">\r\n                        <h1 className=\"display-5\">{language.importSection.ongoingImportTitle}</h1>\r\n                        <hr/>\r\n                        <p className=\"lead\">{message}</p>\r\n                    </Jumbotron>\r\n                </div>\r\n\r\n            )\r\n        } else {\r\n            return (<></>)\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        language: state.language,\r\n        importPolling: state.importPolling\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ImportPolling)\r\n"]},"metadata":{},"sourceType":"module"}