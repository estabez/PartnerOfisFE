{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _classCallCheck from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import{connect}from\"react-redux\";import Toolbar from'../components/TopologyToolbar';import Header from\"../components/Header\";import Sidebar from\"../components/Sidebar\";import ModalTemplate from'../components/Modal';import TopologyDiagram from'../components/TopologyDiagram';import{modalToggle,modalTitle,setTopologyFirstLevel as _setTopologyFirstLevel,setTopologySecondLevel as _setTopologySecondLevel,setTopologySecondLevelDropdownLabels}from\"../redux/actions\";import IconModule from'../IconModule';import RestApiModule from'../RestApiModule';var Ran=/*#__PURE__*/function(_React$Component){_inherits(Ran,_React$Component);function Ran(props){var _this;_classCallCheck(this,Ran);_this=_possibleConstructorReturn(this,_getPrototypeOf(Ran).call(this,props));_this._isMounted=false;_this.events={doubleClick:function doubleClick(event){var nodes=event.nodes;var nodeID=nodes[0];if(nodeID){// type must be aggreg_site\nvar node=_this.props.graph.nodes.find(function(item){return item.id===nodeID;});if(node.type==='AGGREGATE_SITE'){_this.getDataByAggregSite(nodeID);_this.props.setModalTitle(nodeID);}}}/*afterDrawing: (e) => {\r\n            console.log(e);\r\n        }*/};_this.Icons=new IconModule();_this.state={firstLevelData:null,dropdownLabels:null};_this.unformatedData=null;_this.unformatedDataSecondLevel=null;_this.restApi=new RestApiModule();return _this;}_createClass(Ran,[{key:\"componentDidMount\",value:function componentDidMount(){return _regeneratorRuntime.async(function componentDidMount$(_context){while(1){switch(_context.prev=_context.next){case 0:this._isMounted=true;_context.next=3;return _regeneratorRuntime.awrap(this.getDataByRegion('Agadir'));case 3:case\"end\":return _context.stop();}}},null,this);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this._isMounted=false;}},{key:\"setStateAsync\",value:function setStateAsync(state){var _this2=this;return new Promise(function(resolve){_this2.setState(state,resolve);});}},{key:\"getDataByRegion\",value:function getDataByRegion(region){var _this3=this;this.restApi.callApi('ranFirst',{region:region,token:this.props.token}).then(function _callee(response){var d;return _regeneratorRuntime.async(function _callee$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:d=response.RANTopologyFirstLevelViewData;if(!_this3._isMounted){_context2.next=5;break;}_context2.next=4;return _regeneratorRuntime.awrap(_this3.setStateAsync({firstLevelData:d}));case 4:_this3.prepareFirstLevelData();case 5:case\"end\":return _context2.stop();}}});}).catch(function(error){console.log(error);});}},{key:\"getDataByAggregSite\",value:function getDataByAggregSite(id){var _this4=this;return _regeneratorRuntime.async(function getDataByAggregSite$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:this.restApi.callApi('ranSecond',{selectedNode:id,token:this.props.token}).then(function _callee2(response){var d;return _regeneratorRuntime.async(function _callee2$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:d=response.RANTopologySecondLevelViewData;if(!(d.length>0)){_context3.next=4;break;}_context3.next=4;return _regeneratorRuntime.awrap(_this4.prepareSecondLevelData(d,id));case 4:_this4.props.setModal();case 5:case\"end\":return _context3.stop();}}});}).catch(function(error){console.log(error);});case 1:case\"end\":return _context4.stop();}}},null,this);}},{key:\"prepareFirstLevelData\",value:function prepareFirstLevelData(){var _this5=this;var nodes=[],edges=[],labels=[];function pushItem(id,type,Icons){if(type==='AGGREGATE_SITE'){labels.push(id);}nodes.push({id:id,label:id,type:type,shape:'image',font:{color:'black',size:'13'},image:Icons.getIconForNode(type)});}this.state.firstLevelData.map(function(item){var indexA=nodes.findIndex(function(data){return data.id===item.NODE_A;});if(indexA<0){pushItem(item.NODE_A,item.NODE_A_TYPE,_this5.Icons);}var indexB=nodes.findIndex(function(data){return data.id===item.NODE_B;});if(indexB<0){pushItem(item.NODE_B,item.NODE_B_TYPE,_this5.Icons);}edges.push({from:item.NODE_A,to:item.NODE_B});});// this row for store the first state of graph data.\n// Once we select a node, it will turn to red font, others will stay black.\nthis.unformatedData={nodes:nodes,edges:edges};// once the data is ready to show, redux is updating.\nthis.props.setTopologyFirstLevel({nodes:nodes,edges:edges});this.setState({dropdownLabels:labels.sort()});}},{key:\"prepareSecondLevelData\",value:function prepareSecondLevelData(data,aggregSite){var _this6=this;var nodes=[],edges=[],labels=[];function pushItem(id,Icons){var radioIcon=Icons.getIconForNode('RADIO_SITE');var aggregIcon=Icons.getIconForNode('AGGREGATE_SITE');nodes.push({id:id,label:id,shape:'image',font:{color:'black',size:'13'},image:id===aggregSite?aggregIcon:radioIcon});if(id!==aggregSite)labels.push(id);}if(data){data.map(function(item){var indexA=nodes.findIndex(function(data){return data.id===item.A_SITE;});if(indexA<0){pushItem(item.A_SITE,_this6.Icons);}var indexB=nodes.findIndex(function(data){return data.id===item.Z_SITE;});if(indexB<0){pushItem(item.Z_SITE,_this6.Icons);}edges.push({from:item.A_SITE,to:item.Z_SITE});});// this row for store the first state of graph data.\n// Once we select a node, it will turn to red font, others will stay black.\nthis.unformatedDataSecondLevel={nodes:nodes,edges:edges};// set the second level topology diagram.\n// It will update the redux and it trigger to rerender of modal window.\nthis.props.setTopologySecondLevel({nodes:nodes,edges:edges});// set the secondLevel topology view dropdown list\nthis.props.setTopologySecondLevelDropDown({dropdownList:labels});}}},{key:\"handleSelectAggregSite\",value:function handleSelectAggregSite(selectedNodeId){var _this7=this;var newGraph;return _regeneratorRuntime.async(function handleSelectAggregSite$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:newGraph=JSON.parse(JSON.stringify(this.unformatedData));if(newGraph){newGraph.nodes.map(function(node){if(node.id===selectedNodeId){node.font={color:'red',size:_this7.props.fontSize};}});console.log(newGraph);this.props.setTopologyFirstLevel(newGraph);}case 2:case\"end\":return _context5.stop();}}},null,this);}},{key:\"render\",value:function render(){var _this$props=this.props,language=_this$props.language,maximize=_this$props.maximize,contentCSS=_this$props.contentCSS,graph=_this$props.graph;var diagramAreaIdLevelOne='diagramLevel1';var diagramAreaIdLevelTwo='diagramLevel2';if(graph!==null&&language!==null){return React.createElement(React.Fragment,null,React.createElement(Header,null),React.createElement(\"div\",{className:\"row h-100\"},React.createElement(Sidebar,{maximize:maximize}),React.createElement(\"div\",{className:contentCSS},React.createElement(Toolbar,{wrapper:'card mt-3',labels:this.state.dropdownLabels,handleAggregSiteChange:this.handleSelectAggregSite.bind(this),handleRegionChange:this.getDataByRegion.bind(this),topologyLevel:1,diagramAreaId:diagramAreaIdLevelOne,snapshotFileName:'RanTopologyFirstLevel.png'}),React.createElement(\"div\",{id:diagramAreaIdLevelOne,className:'card mt-3 fixedCard'},React.createElement(\"label\",{className:'topologyViewHeader'},language.ranTopology),React.createElement(\"hr\",null),React.createElement(\"div\",{className:\"card-body\"},React.createElement(TopologyDiagram,{id:'diagramLevel1',graph:graph,events:this.events}))))),React.createElement(ModalTemplate,{diagramAreaId:diagramAreaIdLevelTwo}));}else{return React.createElement(React.Fragment,null);}}}]);return Ran;}(React.Component);function mapStateToProps(state){return{token:state.token,language:state.language,maximize:state.maximize,contentCSS:state.contentCSS,graph:state.topologyFirstLevel,fontSize:state.topologySelectedNodeFontSize};}function mapDispatchToProps(dispatch){return{setModal:function setModal(){return dispatch(modalToggle());},setModalTitle:function setModalTitle(content){return dispatch(modalTitle(content));},setTopologyFirstLevel:function setTopologyFirstLevel(graph){return dispatch(_setTopologyFirstLevel(graph));},setTopologySecondLevel:function setTopologySecondLevel(graph){return dispatch(_setTopologySecondLevel(graph));},setTopologySecondLevelDropDown:function setTopologySecondLevelDropDown(labels){return dispatch(setTopologySecondLevelDropdownLabels(labels));}};}export default connect(mapStateToProps,mapDispatchToProps)(Ran);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/views/Ran.jsx"],"names":["React","connect","Toolbar","Header","Sidebar","ModalTemplate","TopologyDiagram","modalToggle","modalTitle","setTopologyFirstLevel","setTopologySecondLevel","setTopologySecondLevelDropdownLabels","IconModule","RestApiModule","Ran","props","_isMounted","events","doubleClick","event","nodes","nodeID","node","graph","find","item","id","type","getDataByAggregSite","setModalTitle","Icons","state","firstLevelData","dropdownLabels","unformatedData","unformatedDataSecondLevel","restApi","getDataByRegion","Promise","resolve","setState","region","callApi","token","then","response","d","RANTopologyFirstLevelViewData","setStateAsync","prepareFirstLevelData","catch","error","console","log","selectedNode","RANTopologySecondLevelViewData","length","prepareSecondLevelData","setModal","edges","labels","pushItem","push","label","shape","font","color","size","image","getIconForNode","map","indexA","findIndex","data","NODE_A","NODE_A_TYPE","indexB","NODE_B","NODE_B_TYPE","from","to","sort","aggregSite","radioIcon","aggregIcon","A_SITE","Z_SITE","setTopologySecondLevelDropDown","dropdownList","selectedNodeId","newGraph","JSON","parse","stringify","fontSize","language","maximize","contentCSS","diagramAreaIdLevelOne","diagramAreaIdLevelTwo","handleSelectAggregSite","bind","ranTopology","Component","mapStateToProps","topologyFirstLevel","topologySelectedNodeFontSize","mapDispatchToProps","dispatch","content"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Toolbar from '../components/TopologyToolbar'\r\nimport Header from \"../components/Header\";\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport ModalTemplate from '../components/Modal'\r\nimport TopologyDiagram from '../components/TopologyDiagram'\r\nimport {\r\n    modalToggle, modalTitle,\r\n    setTopologyFirstLevel,\r\n    setTopologySecondLevel,\r\n    setTopologySecondLevelDropdownLabels\r\n} from \"../redux/actions\";\r\n\r\nimport IconModule from '../IconModule';\r\nimport RestApiModule from '../RestApiModule'\r\n\r\nclass Ran extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.Icons = new IconModule();\r\n\r\n        this.state = {\r\n            firstLevelData: null,\r\n            dropdownLabels: null,\r\n        }\r\n\r\n        this.unformatedData = null\r\n        this.unformatedDataSecondLevel = null\r\n\r\n        this.restApi = new RestApiModule();\r\n    }\r\n\r\n    events = {\r\n        doubleClick: (event) => {\r\n            const {nodes} = event;\r\n            const nodeID = nodes[0];\r\n\r\n            if (nodeID) {\r\n                // type must be aggreg_site\r\n                const node = this.props.graph.nodes.find((item) => {\r\n                    return item.id === nodeID\r\n                });\r\n                if (node.type === 'AGGREGATE_SITE') {\r\n                    this.getDataByAggregSite(nodeID);\r\n\r\n                    this.props.setModalTitle(nodeID);\r\n\r\n                }\r\n            }\r\n        },\r\n        /*afterDrawing: (e) => {\r\n            console.log(e);\r\n        }*/\r\n    };\r\n\r\n    async componentDidMount() {\r\n\r\n        this._isMounted = true;\r\n        await this.getDataByRegion('Agadir');\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    setStateAsync(state) {\r\n        return new Promise((resolve) => {\r\n            this.setState(state, resolve)\r\n        });\r\n    }\r\n\r\n    getDataByRegion(region) {\r\n\r\n\r\n        this.restApi.callApi('ranFirst', {\r\n            region,\r\n            token: this.props.token\r\n\r\n        }).then(async (response) => {\r\n\r\n            const d = response.RANTopologyFirstLevelViewData;\r\n\r\n            if (this._isMounted) {\r\n                await this.setStateAsync({firstLevelData: d});\r\n\r\n                this.prepareFirstLevelData();\r\n            }\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n        });\r\n\r\n    }\r\n\r\n    async getDataByAggregSite(id) {\r\n\r\n        this.restApi.callApi('ranSecond', {\r\n            selectedNode: id,\r\n            token: this.props.token\r\n\r\n        }).then(async (response) => {\r\n\r\n            const d = response.RANTopologySecondLevelViewData;\r\n\r\n            if (d.length > 0) await this.prepareSecondLevelData(d, id);\r\n\r\n            this.props.setModal();\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n        });\r\n    }\r\n\r\n    prepareFirstLevelData() {\r\n\r\n        let nodes = [], edges = [], labels = [];\r\n\r\n        function pushItem(id, type, Icons) {\r\n\r\n            if (type === 'AGGREGATE_SITE') {\r\n                labels.push(id);\r\n            }\r\n            nodes.push({\r\n                id: id,\r\n                label: id,\r\n                type: type,\r\n                shape: 'image',\r\n                font: {color: 'black', size: '13'},\r\n                image: Icons.getIconForNode(type)\r\n            })\r\n        }\r\n\r\n        this.state.firstLevelData.map((item) => {\r\n\r\n            const indexA = nodes.findIndex(data => data.id === item.NODE_A);\r\n            if (indexA < 0) {\r\n                pushItem(item.NODE_A, item.NODE_A_TYPE, this.Icons);\r\n            }\r\n\r\n            const indexB = nodes.findIndex(data => data.id === item.NODE_B);\r\n            if (indexB < 0) {\r\n                pushItem(item.NODE_B, item.NODE_B_TYPE, this.Icons);\r\n            }\r\n\r\n            edges.push({\r\n                from: item.NODE_A,\r\n                to: item.NODE_B\r\n            });\r\n        });\r\n\r\n        // this row for store the first state of graph data.\r\n        // Once we select a node, it will turn to red font, others will stay black.\r\n        this.unformatedData = {nodes, edges};\r\n\r\n        // once the data is ready to show, redux is updating.\r\n        this.props.setTopologyFirstLevel({\r\n            nodes,\r\n            edges\r\n        });\r\n\r\n        this.setState({dropdownLabels: labels.sort()});\r\n\r\n    }\r\n\r\n    prepareSecondLevelData(data, aggregSite) {\r\n\r\n        let nodes = [], edges = [], labels = [];\r\n\r\n        function pushItem(id, Icons) {\r\n\r\n            const radioIcon = Icons.getIconForNode('RADIO_SITE');\r\n            const aggregIcon = Icons.getIconForNode('AGGREGATE_SITE');\r\n\r\n            nodes.push({\r\n                id: id,\r\n                label: id,\r\n                shape: 'image',\r\n                font: {color: 'black', size: '13'},\r\n                image: id === aggregSite ? aggregIcon : radioIcon\r\n            })\r\n\r\n            if (id !== aggregSite) labels.push(id);\r\n        }\r\n\r\n        if (data) {\r\n            data.map((item) => {\r\n\r\n                const indexA = nodes.findIndex(data => data.id === item.A_SITE);\r\n                if (indexA < 0) {\r\n                    pushItem(item.A_SITE, this.Icons);\r\n                }\r\n\r\n                const indexB = nodes.findIndex(data => data.id === item.Z_SITE);\r\n                if (indexB < 0) {\r\n                    pushItem(item.Z_SITE, this.Icons);\r\n                }\r\n\r\n                edges.push({\r\n                    from: item.A_SITE,\r\n                    to: item.Z_SITE\r\n                });\r\n            });\r\n\r\n            // this row for store the first state of graph data.\r\n            // Once we select a node, it will turn to red font, others will stay black.\r\n            this.unformatedDataSecondLevel = {nodes, edges};\r\n\r\n            // set the second level topology diagram.\r\n            // It will update the redux and it trigger to rerender of modal window.\r\n            this.props.setTopologySecondLevel({\r\n                nodes,\r\n                edges\r\n            });\r\n\r\n            // set the secondLevel topology view dropdown list\r\n            this.props.setTopologySecondLevelDropDown({\r\n                dropdownList: labels\r\n            })\r\n        }\r\n    }\r\n\r\n    async handleSelectAggregSite(selectedNodeId) {\r\n\r\n        let newGraph = JSON.parse(JSON.stringify(this.unformatedData));\r\n\r\n        if (newGraph) {\r\n            newGraph.nodes.map((node) => {\r\n                if (node.id === selectedNodeId) {\r\n                    node.font = {color: 'red', size: this.props.fontSize}\r\n                }\r\n            });\r\n            console.log(newGraph);\r\n            this.props.setTopologyFirstLevel(newGraph);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {language, maximize, contentCSS, graph} = this.props;\r\n        const diagramAreaIdLevelOne = 'diagramLevel1';\r\n        const diagramAreaIdLevelTwo = 'diagramLevel2';\r\n\r\n        if (graph !== null && language !== null) {\r\n            return (\r\n                <>\r\n                    <Header/>\r\n                    <div className=\"row h-100\">\r\n                        <Sidebar maximize={maximize}/>\r\n                        <div className={contentCSS}>\r\n                            <Toolbar wrapper={'card mt-3'}\r\n                                     labels={this.state.dropdownLabels}\r\n                                     handleAggregSiteChange={this.handleSelectAggregSite.bind(this)}\r\n                                     handleRegionChange={this.getDataByRegion.bind(this)}\r\n                                     topologyLevel={1}\r\n                                     diagramAreaId={diagramAreaIdLevelOne}\r\n                                     snapshotFileName={'RanTopologyFirstLevel.png'}\r\n                            />\r\n\r\n                            <div id={diagramAreaIdLevelOne}  className={'card mt-3 fixedCard'}>\r\n                                <label className={'topologyViewHeader'}>{language.ranTopology}</label>\r\n                                <hr />\r\n                                <div className=\"card-body\">\r\n                                    <TopologyDiagram\r\n                                        id={'diagramLevel1'}\r\n                                        graph={graph}\r\n                                        events={this.events}/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <ModalTemplate diagramAreaId={diagramAreaIdLevelTwo} />\r\n                </>\r\n            )\r\n        } else {\r\n            return (<></>);\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        language: state.language,\r\n        maximize: state.maximize,\r\n        contentCSS: state.contentCSS,\r\n        graph: state.topologyFirstLevel,\r\n        fontSize: state.topologySelectedNodeFontSize\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModal: () => dispatch(modalToggle()),\r\n        setModalTitle: (content) => dispatch(modalTitle(content)),\r\n        setTopologyFirstLevel: (graph) => dispatch(setTopologyFirstLevel(graph)),\r\n        setTopologySecondLevel: (graph) => dispatch(setTopologySecondLevel(graph)),\r\n        setTopologySecondLevelDropDown: (labels) => dispatch(setTopologySecondLevelDropdownLabels(labels))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Ran);"]},"metadata":{},"sourceType":"module"}