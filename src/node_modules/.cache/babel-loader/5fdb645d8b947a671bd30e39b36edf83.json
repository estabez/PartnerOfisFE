{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\SSCM\\\\ss\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\SSCM\\\\ss\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\SSCM\\\\ss\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\SSCM\\\\ss\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\SSCM\\\\ss\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{connect}from\"react-redux\";import{Modal,ModalHeader,ModalBody}from'reactstrap';import{modalImportToggle,spinnerToggle,setImportPolling as _setImportPolling}from\"../redux/actions\";import FileUploadProgress from'react-fileupload-progress';import XLSX from\"xlsx\";import{groupingMap}from'../matrixDataMap';import RestApiModule from'../RestApiModule';import{Row,Col,Card,CardBody,CardTitle,CardText,CardHeader,Alert,Button}from'reactstrap';import{saveAs}from'file-saver';// Alert module import\nimport AlertModule from'../AlertModule';var ModalImport=/*#__PURE__*/function(_React$Component){_inherits(ModalImport,_React$Component);var _super=_createSuper(ModalImport);function ModalImport(props){var _this;_classCallCheck(this,ModalImport);_this=_super.call(this,props);_this.state={file:null,isExcelHeadersValid:null,progress:-1,showButton1:true,showButton2:false,showButton3:false,showLongWaitMessage:false};_this.fileJSON={};_this.data=[];_this.cols=[];//const {REACT_APP_API_GATEWAY, REACT_APP_MATRIX_SERVICE} = process.env;\n//`${REACT_APP_API_GATEWAY}${REACT_APP_MATRIX_SERVICE}/ImportDataMatrixFromExcel`;\n_this.restApi=new RestApiModule();_this.alert=new AlertModule();_this.fileInput=React.createRef();_this.uploadFileUrl=_this.restApi.getImportEndpoint('importData');_this.styleBar={width:0};_this.progressAction=null;// handle interval\n_this.timePassed=0;return _this;}_createClass(ModalImport,[{key:\"handleSelectFile\",value:function handleSelectFile(e){function checkFileType(file){var allowedTypes=process.env.REACT_APP_ACCEPTED_IMPORT_FILE_EXT.split(\",\");var extension=file.name.substring(file.name.lastIndexOf('.'));return allowedTypes.includes(extension);}var files=e.target.files;if(files&&files[0])if(checkFileType(files[0])){this.setState({file:files[0],showButton2:true,isExcelHeadersValid:null});}else{var language=this.props.language;this.alert.showMessage(\"error\",language.importSection.wrongFileExtTitle,language.importSection.wrongFileExt,false);}}},{key:\"handleFile\",value:function handleFile(){var _this2=this;/* Boilerplate to set up FileReader */this.props.setSpinner();try{var reader=new FileReader();var rABS=!!reader.readAsBinaryString;reader.onload=function(e){/* Parse data */var bstr=e.target.result;var wb=XLSX.read(bstr,{type:rABS?'binary':'array',bookVBA:true,sheetRows:0});/* Get first worksheet */var wsname=wb.SheetNames[0];var ws=wb.Sheets[wsname];/* Convert array of arrays */var data=XLSX.utils.sheet_to_json(ws,{header:1,defval:\"\"});/* Store the json data */_this2.fileJSON=JSON.stringify(data,null,2);_this2.handleJSONHeaders();_this2.props.setSpinner();};if(rABS){reader.readAsBinaryString(this.state.file);}else{reader.readAsArrayBuffer(this.state.file);}}catch(e){this.setState({showButton3:false});this.props.setSpinner();}}},{key:\"handleJSONHeaders\",value:function handleJSONHeaders(){var headerMap=JSON.parse(JSON.stringify(groupingMap));var excelHeadersArray=JSON.parse(this.fileJSON)[1];var columnsMap=headerMap.reduce(function(fullArr,item){var cols=item.columns.reduce(function(arr,col){if(col.importColumnId!==undefined)arr.push(col.importColumnId);return arr;},[]);return[].concat(_toConsumableArray(fullArr),_toConsumableArray(cols));},[]);var isSame=JSON.stringify(excelHeadersArray).replace(/ /g,'').toLowerCase()===JSON.stringify(columnsMap).toLowerCase();this.setState({isExcelHeadersValid:isSame,showButton3:isSame,showButton2:!isSame});if(!isSame){this.setState({file:null,showButton2:false});}}},{key:\"downloadLogFile\",value:function downloadLogFile(){var importActionResponse=this.state.importActionResponse;if(importActionResponse){var today=new Date();var todayDate='_'+today.getDate()+today.toLocaleString('default',{month:'long'})+today.getFullYear();var _JSON$parse=JSON.parse(importActionResponse),importResult=_JSON$parse.importResult;var log=importResult[0].log;var blob=new Blob([log],{type:\"text/plain;charset=utf-8\"});saveAs(blob,\"importDetailedLog\".concat(todayDate,\".txt\"));}}},{key:\"toggle\",value:function toggle(){this.setState({file:null,isExcelHeadersValid:null,importActionResponse:null,showButton2:false,showButton3:false,progress:-1});this.props.setModalImport();}},{key:\"customFormRenderer\",value:function customFormRenderer(onSubmit){var _this3=this;var _this$props=this.props,language=_this$props.language,token=_this$props.token;return/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Button,{color:'success',size:\"lg\",block:true,hidden:!this.state.showButton3,onClick:function onClick(e){_this3.restApi.callApi(\"getLocksCount\",{token:token}).then(function(res){var count=res.locksCount.count;var lockCountMessage=language.importSection.locksCountForLastStep.replace('{count}',count);_this3.alert.getConfirmation(\"warning\",language.importSection.warningTitleForLastStep,\"\".concat(language.importSection.warningMessageForLastStep,\"<br><br>\").concat(lockCountMessage)).then(function(response){if(response===true){// if user start an import action do not make observable request for check import status\n_this3.props.setImportPolling(false);_this3.restApi.callApi('getImportStatus',{token:token}).then(function(response){var _response$isImportOng=response.isImportOngoing,islock=_response$isImportOng.islock,uname=_response$isImportOng.uname;if(!islock){_this3.setState({showButton3:false});onSubmit(e);}else{var message=language.importSection.ongoingImportText.replace('{username}',uname);_this3.alert.showMessage('warning',language.importSection.ongoingImportTitle,message);}});}});});}},language.upload,/*#__PURE__*/React.createElement(\"i\",{className:\"icon icon-upload ml-2\"}))));}},{key:\"formGetter\",value:function formGetter(){return JSON.stringify({token:this.props.token,importedExcelAsJSON:this.fileJSON});}},{key:\"customProgressRenderer\",value:function customProgressRenderer(progressFile,hasError,cancelHandler){var language=this.props.language;function countOfRowsText(count){return+count>1?\"\".concat(count,\" \").concat(language.importSection.rows):\"\".concat(count,\" \").concat(language.importSection.rows.slice(0,-1));}var progress=this.state.progress;if(hasError||progress>-1){var progressBar=Object.assign({},this.styleBar);progressBar.width=\"\".concat(progress,\"%\");var result=null;var _this$state=this.state,importActionResponse=_this$state.importActionResponse,showLongWaitMessage=_this$state.showLongWaitMessage;if(importActionResponse&&progress===100){var jsonResponse=JSON.parse(importActionResponse);var importResult=jsonResponse.importResult,exec_status=jsonResponse.exec_status,error_code=jsonResponse.error_code,error_message=jsonResponse.error_message;if(importResult)result=importResult[0];if(exec_status===\"error\"){this.setState({progress:0,showLongWaitMessage:false});var message=error_message?error_message:\"Null exception\";if(+error_code===10){this.alert.showMessage('error','Error',message,true);}else{this.alert.showMessage('error','Error',message,false);}}}return/*#__PURE__*/React.createElement(React.Fragment,null,!hasError&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(\"div\",{className:\"progressWrapper text-center\"},/*#__PURE__*/React.createElement(\"span\",null,\"Import progress: \",\"\".concat(progress,\"%\")),/*#__PURE__*/React.createElement(\"div\",{className:\"progressBar\",style:progressBar})))),showLongWaitMessage&&/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Alert,{color:\"warning\"},language.importSection.longTimeWaitMessageForUpload)))),hasError&&/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Alert,{color:\"danger\"},/*#__PURE__*/React.createElement(\"i\",{className:\"icon icon-triangle-warning mr-2\"}),language.importSection.progressError))),progress===100&&result&&!hasError&&/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Card,{body:false},/*#__PURE__*/React.createElement(CardHeader,null,language.importSection.summaryLabel),/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Card,{color:\"primary\",inverse:true},/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(CardTitle,{tag:\"h5\"},language.importSection.totalRowCount),/*#__PURE__*/React.createElement(CardText,null,language.importSection.totalRowText),/*#__PURE__*/React.createElement(Alert,{tag:\"h4\",color:\"info\"},countOfRowsText(result.totalcount))))),/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Card,{color:\"success\",inverse:true},/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(CardTitle,{tag:\"h5\"},language.importSection.successRowCount),/*#__PURE__*/React.createElement(CardText,null,language.importSection.successRowText),/*#__PURE__*/React.createElement(Alert,{tag:\"h4\",color:\"info\"},countOfRowsText(result.successCount))))),/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Card,{color:\"danger\",inverse:true},/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(CardTitle,{tag:\"h5\"},language.importSection.failedRowCount),/*#__PURE__*/React.createElement(CardText,null,language.importSection.failedRowText),/*#__PURE__*/React.createElement(Alert,{tag:\"h4\",color:\"info\"},countOfRowsText(result.errorcount)))))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(Button,{color:\"primary\",className:\"mt-3\",block:true,size:\"lg\",onClick:this.downloadLogFile.bind(this)},language.importSection.downloadLogFile,/*#__PURE__*/React.createElement(\"i\",{className:\"icon icon-download-save ml-2\"})))))))));}else{return/*#__PURE__*/React.createElement(React.Fragment,null);}}},{key:\"render\",value:function render(){var _this4=this;var _this$props2=this.props,language=_this$props2.language,loadAfterImport=_this$props2.loadAfterImport;if(language){return/*#__PURE__*/React.createElement(Modal,{isOpen:this.props.open,size:'lg',centered:true},/*#__PURE__*/React.createElement(ModalHeader,{toggle:this.toggle.bind(this)},language.importDataMatrixFile),/*#__PURE__*/React.createElement(ModalBody,{className:'import-file'},/*#__PURE__*/React.createElement(\"input\",{ref:function ref(fileInput){return _this4.fileInput=fileInput;},type:\"file\",accept:process.env.REACT_APP_ACCEPTED_IMPORT_FILE_TYPE,onChange:this.handleSelectFile.bind(this),hidden:true}),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:'12'},!this.state.file&&/*#__PURE__*/React.createElement(\"div\",{className:'choose-file-wrapper'},/*#__PURE__*/React.createElement(Button,{className:\"chose-file\",onClick:function onClick(){return _this4.fileInput.click();}},language.chooseFile)),this.state.file&&/*#__PURE__*/React.createElement(\"div\",{className:'choose-file-wrapper'},/*#__PURE__*/React.createElement(\"h4\",null,language.importSection.selectedFileLabel,this.state.file.name))),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(Col,null,this.state.showButton2&&/*#__PURE__*/React.createElement(Button,{color:'primary',className:'mt-3 mb-3',size:\"lg\",block:true,onClick:this.handleFile.bind(this)},language.validate,/*#__PURE__*/React.createElement(\"i\",{className:\"icon icon-file ml-2\"})),this.state.isExcelHeadersValid===true&&/*#__PURE__*/React.createElement(Alert,{color:\"success\",className:'mt-2'},/*#__PURE__*/React.createElement(\"i\",{className:\"icon icon-check mr-2\"}),language.importSection.selectedFileValid),this.state.isExcelHeadersValid===false&&/*#__PURE__*/React.createElement(Alert,{color:\"danger\",className:'mt-2'},/*#__PURE__*/React.createElement(\"i\",{className:\"icon icon-cross mr-2\"}),language.importSection.selectedFileNotValid))),/*#__PURE__*/React.createElement(FileUploadProgress,{url:this.uploadFileUrl,method:\"POST\",beforeSend:function beforeSend(request){_this4.props.setSpinner();_this4.setState({progress:Math.floor(Math.random()*8)+5});request.setRequestHeader('Content-Type','application/json;charset=UTF-8');// Wee need that workaround because we dont know when server will give response.\n_this4.progressAction=setInterval(function(){_this4.timePassed+=2500;console.log(_this4.timePassed);if(_this4.timePassed>60000){_this4.setState({showLongWaitMessage:true});}if(_this4.state.progress<=92){var increase=Math.floor(Math.random()*2)+3;_this4.setState({progress:increase+ +_this4.state.progress});}},2500);return request;},onProgress:function onProgress(e,request,progress){// empty event, maybe we need this event for later\n},onLoad:function onLoad(e,request){clearInterval(_this4.progressAction);setTimeout(function(){// Wait a little time to get correct data structure from response\n_this4.setState({progress:100,showLongWaitMessage:false,importActionResponse:request.response},function(){// After set state execute load data action\nvar _JSON$parse2=JSON.parse(_this4.state.importActionResponse),exec_status=_JSON$parse2.exec_status;if(exec_status===\"success\"){// Import finish successfully, then reload the data.\nif(_this4.state.progress===100){loadAfterImport();// app should restart make observable request for control import status\n_this4.props.setImportPolling(true);}}_this4.props.setSpinner();});},200);},onError:function onError(e,request){_this4.setState({progress:0,showLongWaitMessage:false},function(){clearInterval(_this4.progressAction);_this4.props.setSpinner();});},onAbort:function onAbort(e,request){_this4.setState({progress:0,showLongWaitMessage:false},function(){clearInterval(_this4.progressAction);_this4.props.setSpinner();});},formGetter:this.formGetter.bind(this),formRenderer:this.customFormRenderer.bind(this),progressRenderer:this.customProgressRenderer.bind(this)})));}else{return/*#__PURE__*/React.createElement(React.Fragment,null);}}}]);return ModalImport;}(React.Component);function mapStateToProps(state){return{open:state.modalImportToggle,import:state.import,language:state.language,token:state.token};}function mapDispatchToProps(dispatch){return{setModalImport:function setModalImport(){return dispatch(modalImportToggle());},setSpinner:function setSpinner(){return dispatch(spinnerToggle());},setImportPolling:function setImportPolling(data){return dispatch(_setImportPolling(data));}};}export default connect(mapStateToProps,mapDispatchToProps)(ModalImport);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/SSCM/ss/src/src/components/ModalImport.jsx"],"names":["React","connect","Modal","ModalHeader","ModalBody","modalImportToggle","spinnerToggle","setImportPolling","FileUploadProgress","XLSX","groupingMap","RestApiModule","Row","Col","Card","CardBody","CardTitle","CardText","CardHeader","Alert","Button","saveAs","AlertModule","ModalImport","props","state","file","isExcelHeadersValid","progress","showButton1","showButton2","showButton3","showLongWaitMessage","fileJSON","data","cols","restApi","alert","fileInput","createRef","uploadFileUrl","getImportEndpoint","styleBar","width","progressAction","timePassed","e","checkFileType","allowedTypes","process","env","REACT_APP_ACCEPTED_IMPORT_FILE_EXT","split","extension","name","substring","lastIndexOf","includes","files","target","setState","language","showMessage","importSection","wrongFileExtTitle","wrongFileExt","setSpinner","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","sheetRows","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","defval","JSON","stringify","handleJSONHeaders","readAsArrayBuffer","headerMap","parse","excelHeadersArray","columnsMap","reduce","fullArr","item","columns","arr","col","importColumnId","undefined","push","isSame","replace","toLowerCase","importActionResponse","today","Date","todayDate","getDate","toLocaleString","month","getFullYear","importResult","log","blob","Blob","setModalImport","onSubmit","token","callApi","then","res","count","locksCount","lockCountMessage","locksCountForLastStep","getConfirmation","warningTitleForLastStep","warningMessageForLastStep","response","isImportOngoing","islock","uname","message","ongoingImportText","ongoingImportTitle","upload","importedExcelAsJSON","progressFile","hasError","cancelHandler","countOfRowsText","rows","slice","progressBar","Object","assign","jsonResponse","exec_status","error_code","error_message","longTimeWaitMessageForUpload","progressError","summaryLabel","totalRowCount","totalRowText","totalcount","successRowCount","successRowText","successCount","failedRowCount","failedRowText","errorcount","downloadLogFile","bind","loadAfterImport","open","toggle","importDataMatrixFile","REACT_APP_ACCEPTED_IMPORT_FILE_TYPE","handleSelectFile","click","chooseFile","selectedFileLabel","handleFile","validate","selectedFileValid","selectedFileNotValid","request","Math","floor","random","setRequestHeader","setInterval","console","increase","clearInterval","setTimeout","formGetter","customFormRenderer","customProgressRenderer","Component","mapStateToProps","import","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Modal, ModalHeader, ModalBody} from 'reactstrap';\r\nimport {modalImportToggle, spinnerToggle, setImportPolling} from \"../redux/actions\";\r\nimport FileUploadProgress from 'react-fileupload-progress';\r\nimport XLSX from \"xlsx\";\r\nimport {groupingMap} from '../matrixDataMap';\r\nimport RestApiModule from '../RestApiModule';\r\nimport {Row, Col, Card, CardBody, CardTitle, CardText, CardHeader, Alert, Button} from 'reactstrap';\r\nimport {saveAs} from 'file-saver';\r\n\r\n// Alert module import\r\nimport AlertModule from '../AlertModule'\r\n\r\nclass ModalImport extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file: null,\r\n            isExcelHeadersValid: null,\r\n            progress: -1,\r\n            showButton1: true,\r\n            showButton2: false,\r\n            showButton3: false,\r\n            showLongWaitMessage: false\r\n        }\r\n\r\n        this.fileJSON = {};\r\n        this.data = [];\r\n        this.cols = [];\r\n        //const {REACT_APP_API_GATEWAY, REACT_APP_MATRIX_SERVICE} = process.env;\r\n        //`${REACT_APP_API_GATEWAY}${REACT_APP_MATRIX_SERVICE}/ImportDataMatrixFromExcel`;\r\n\r\n        this.restApi = new RestApiModule();\r\n        this.alert = new AlertModule();\r\n\r\n        this.fileInput = React.createRef();\r\n        this.uploadFileUrl = this.restApi.getImportEndpoint('importData');\r\n\r\n        this.styleBar = {\r\n            width: 0,\r\n        }\r\n\r\n        this.progressAction = null; // handle interval\r\n        this.timePassed = 0;\r\n\r\n    }\r\n\r\n    handleSelectFile(e) {\r\n        function checkFileType(file) {\r\n            const allowedTypes = process.env.REACT_APP_ACCEPTED_IMPORT_FILE_EXT.split(\",\");\r\n            const extension = file.name.substring(file.name.lastIndexOf('.'));\r\n            return allowedTypes.includes(extension);\r\n        }\r\n\r\n        const files = e.target.files;\r\n\r\n        if (files && files[0])\r\n            if (checkFileType(files[0])) {\r\n                this.setState({\r\n                    file: files[0],\r\n                    showButton2: true,\r\n                    isExcelHeadersValid: null\r\n                });\r\n            } else {\r\n                const {language} = this.props;\r\n                this.alert.showMessage(\"error\",\r\n                    language.importSection.wrongFileExtTitle,\r\n                    language.importSection.wrongFileExt,\r\n                    false)\r\n            }\r\n    };\r\n\r\n    handleFile() {\r\n        /* Boilerplate to set up FileReader */\r\n        this.props.setSpinner();\r\n        try {\r\n\r\n            const reader = new FileReader();\r\n            const rABS = !!reader.readAsBinaryString;\r\n            reader.onload = (e) => {\r\n                /* Parse data */\r\n                const bstr = e.target.result;\r\n                const wb = XLSX.read(bstr, {type: rABS ? 'binary' : 'array', bookVBA: true, sheetRows: 0});\r\n                /* Get first worksheet */\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n\r\n                /* Convert array of arrays */\r\n                const data = XLSX.utils.sheet_to_json(ws, {\r\n                    header: 1,\r\n                    defval: \"\"\r\n                });\r\n\r\n                /* Store the json data */\r\n                this.fileJSON = JSON.stringify(data, null, 2);\r\n\r\n                this.handleJSONHeaders();\r\n\r\n                this.props.setSpinner();\r\n            };\r\n\r\n            if (rABS) {\r\n                reader.readAsBinaryString(this.state.file);\r\n            } else {\r\n                reader.readAsArrayBuffer(this.state.file);\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n            this.setState({showButton3: false})\r\n            this.props.setSpinner();\r\n        }\r\n\r\n    }\r\n\r\n    handleJSONHeaders() {\r\n\r\n        const headerMap = JSON.parse(JSON.stringify(groupingMap));\r\n        const excelHeadersArray = (JSON.parse(this.fileJSON))[1];\r\n\r\n        const columnsMap = headerMap.reduce((fullArr, item) => {\r\n            const cols = item.columns.reduce((arr, col) => {\r\n                if (col.importColumnId !== undefined) arr.push(col.importColumnId)\r\n                return arr;\r\n            }, []);\r\n            return [...fullArr, ...cols]\r\n        }, [])\r\n\r\n        const isSame = JSON.stringify(excelHeadersArray).replace(/ /g, '').toLowerCase() === JSON.stringify(columnsMap).toLowerCase();\r\n        this.setState({isExcelHeadersValid: isSame, showButton3: isSame, showButton2: !isSame});\r\n\r\n        if (!isSame) {\r\n            this.setState({file: null, showButton2: false})\r\n        }\r\n    }\r\n\r\n    downloadLogFile() {\r\n        const {importActionResponse} = this.state;\r\n        if (importActionResponse) {\r\n            const today = new Date();\r\n            const todayDate = '_' + today.getDate() + (today.toLocaleString('default', {month: 'long'})) + today.getFullYear();\r\n\r\n            const {importResult} = JSON.parse(importActionResponse);\r\n            const {log} = importResult[0];\r\n\r\n            const blob = new Blob([log], {type: \"text/plain;charset=utf-8\"});\r\n            saveAs(blob, `importDetailedLog${todayDate}.txt`);\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            file: null,\r\n            isExcelHeadersValid: null,\r\n            importActionResponse: null,\r\n            showButton2: false,\r\n            showButton3: false,\r\n            progress: -1\r\n        })\r\n        this.props.setModalImport();\r\n    }\r\n\r\n    customFormRenderer(onSubmit) {\r\n        const {language, token} = this.props;\r\n\r\n        return (\r\n            <Row>\r\n                <Col>\r\n                    <Button color={'success'} size={\"lg\"} block\r\n                            hidden={!this.state.showButton3}\r\n                            onClick={(e) => {\r\n\r\n                                this.restApi.callApi(\"getLocksCount\", {\r\n                                    token\r\n                                }).then(res => {\r\n\r\n                                    const {count} = res.locksCount;\r\n                                    const lockCountMessage = language.importSection.locksCountForLastStep.replace('{count}', count);\r\n\r\n                                    this.alert.getConfirmation(\r\n                                        \"warning\",\r\n                                        language.importSection.warningTitleForLastStep,\r\n                                        `${language.importSection.warningMessageForLastStep}<br><br>${lockCountMessage}`\r\n                                    ).then(response => {\r\n\r\n                                        if (response === true) {\r\n\r\n                                            // if user start an import action do not make observable request for check import status\r\n                                            this.props.setImportPolling(false);\r\n\r\n                                            this.restApi.callApi('getImportStatus', {\r\n                                                token\r\n                                            }).then(response => {\r\n\r\n                                                const {islock, uname} = response.isImportOngoing\r\n\r\n                                                if (!islock) {\r\n                                                    this.setState({showButton3: false});\r\n                                                    onSubmit(e)\r\n                                                } else {\r\n\r\n                                                    const message = language.importSection.ongoingImportText.replace('{username}', uname);\r\n\r\n                                                    this.alert.showMessage(\r\n                                                        'warning',\r\n                                                        language.importSection.ongoingImportTitle,\r\n                                                        message\r\n                                                    )\r\n                                                }\r\n                                            })\r\n                                        }\r\n                                    })\r\n                                })\r\n                            }}>\r\n                        {language.upload}\r\n                        <i className={`icon icon-upload ml-2`}/>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    formGetter() {\r\n        return JSON.stringify({\r\n            token: this.props.token,\r\n            importedExcelAsJSON: this.fileJSON\r\n        });\r\n    }\r\n\r\n    customProgressRenderer(progressFile, hasError, cancelHandler) {\r\n        const {language} = this.props;\r\n\r\n        function countOfRowsText(count) {\r\n            return +count > 1\r\n                ? `${count} ${language.importSection.rows}`\r\n                : `${count} ${language.importSection.rows.slice(0, -1)}`\r\n        }\r\n\r\n        const {progress} = this.state;\r\n\r\n        if (hasError || progress > -1) {\r\n\r\n            let progressBar = Object.assign({}, this.styleBar);\r\n            progressBar.width = `${progress}%`;\r\n\r\n            let result = null;\r\n            const {importActionResponse, showLongWaitMessage} = this.state;\r\n\r\n            if (importActionResponse && progress === 100) {\r\n\r\n                const jsonResponse = JSON.parse(importActionResponse);\r\n                const {importResult, exec_status, error_code, error_message} = jsonResponse;\r\n\r\n                if (importResult) result = importResult[0];\r\n\r\n                if (exec_status === \"error\") {\r\n\r\n                    this.setState({progress: 0, showLongWaitMessage: false})\r\n\r\n                    const message = error_message ? error_message : \"Null exception\";\r\n\r\n                    if (+error_code === 10) {\r\n                        this.alert.showMessage('error', 'Error', message, true);\r\n                    } else {\r\n                        this.alert.showMessage('error', 'Error', message, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    {!hasError &&\r\n                    <>\r\n                        <Row>\r\n                            <Col>\r\n                                <div className={\"progressWrapper text-center\"}>\r\n                                    <span>Import progress: {`${progress}%`}</span>\r\n                                    <div className={\"progressBar\"} style={progressBar}/>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        {showLongWaitMessage &&\r\n                        <Row>\r\n                            <Col>\r\n                                <Alert color={\"warning\"}>\r\n                                    {language.importSection.longTimeWaitMessageForUpload}\r\n                                </Alert>\r\n                            </Col>\r\n                        </Row>\r\n                        }\r\n                    </>\r\n                    }\r\n\r\n                    {hasError &&\r\n                    <Row>\r\n                        <Col>\r\n                            <Alert color={\"danger\"}>\r\n                                <i className=\"icon icon-triangle-warning mr-2\"/>\r\n                                {language.importSection.progressError}\r\n                            </Alert>\r\n                        </Col>\r\n                    </Row>\r\n                    }\r\n\r\n                    {(progress === 100 && result && !hasError) &&\r\n                    <Row>\r\n                        <Col>\r\n                            <Card body={false}>\r\n                                <CardHeader>\r\n                                    {language.importSection.summaryLabel}\r\n                                </CardHeader>\r\n                                <CardBody>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Card color={\"primary\"} inverse>\r\n                                                <CardBody>\r\n                                                    <CardTitle tag={\"h5\"}>\r\n                                                        {language.importSection.totalRowCount}\r\n                                                    </CardTitle>\r\n                                                    <CardText>{language.importSection.totalRowText}</CardText>\r\n                                                    <Alert tag={\"h4\"} color={\"info\"}>\r\n                                                        {countOfRowsText(result.totalcount)}\r\n                                                    </Alert>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Card color={\"success\"} inverse>\r\n                                                <CardBody>\r\n                                                    <CardTitle tag={\"h5\"}>\r\n                                                        {language.importSection.successRowCount}\r\n                                                    </CardTitle>\r\n                                                    <CardText>{language.importSection.successRowText}</CardText>\r\n                                                    <Alert tag={\"h4\"} color={\"info\"}>\r\n                                                        {countOfRowsText(result.successCount)}\r\n                                                    </Alert>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Card color={\"danger\"} inverse>\r\n                                                <CardBody>\r\n                                                    <CardTitle tag={\"h5\"}>\r\n                                                        {language.importSection.failedRowCount}\r\n                                                    </CardTitle>\r\n                                                    <CardText>{language.importSection.failedRowText}</CardText>\r\n                                                    <Alert tag={\"h4\"} color={\"info\"}>\r\n                                                        {countOfRowsText(result.errorcount)}\r\n                                                    </Alert>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <hr/>\r\n                                            <Button color={\"primary\"} className={\"mt-3\"} block size={\"lg\"}\r\n                                                    onClick={this.downloadLogFile.bind(this)}>\r\n                                                {language.importSection.downloadLogFile}\r\n                                                <i className={`icon icon-download-save ml-2`}/>\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                    }\r\n                </>\r\n            );\r\n\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {language, loadAfterImport} = this.props;\r\n\r\n        if (language) {\r\n            return (\r\n                <Modal isOpen={this.props.open} size={'lg'} centered={true}>\r\n                    <ModalHeader toggle={this.toggle.bind(this)}>{language.importDataMatrixFile}</ModalHeader>\r\n                    <ModalBody className={'import-file'}>\r\n\r\n                        <input ref={fileInput => this.fileInput = fileInput} type=\"file\"\r\n                               accept={process.env.REACT_APP_ACCEPTED_IMPORT_FILE_TYPE}\r\n                               onChange={this.handleSelectFile.bind(this)} hidden={true}/>\r\n\r\n                        <Row>\r\n                            <Col md={'12'}>\r\n                                {!this.state.file &&\r\n                                <div className={'choose-file-wrapper'}>\r\n                                    <Button className={\"chose-file\"} onClick={() => this.fileInput.click()}>\r\n                                        {language.chooseFile}\r\n                                    </Button>\r\n                                </div>\r\n                                }\r\n                                {this.state.file &&\r\n                                <div className={'choose-file-wrapper'}>\r\n                                    <h4>\r\n                                        {language.importSection.selectedFileLabel}\r\n                                        {this.state.file.name}\r\n                                    </h4>\r\n                                </div>\r\n                                }\r\n                            </Col>\r\n                            <hr/>\r\n                            <Col>\r\n                                {this.state.showButton2 &&\r\n                                <Button color={'primary'} className={'mt-3 mb-3'} size={\"lg\"} block\r\n                                        onClick={this.handleFile.bind(this)}>\r\n                                    {language.validate}\r\n                                    <i className={`icon icon-file ml-2`}/>\r\n                                </Button>\r\n                                }\r\n                                {this.state.isExcelHeadersValid === true &&\r\n                                <Alert color=\"success\" className={'mt-2'}>\r\n                                    <i className={`icon icon-check mr-2`}/>\r\n                                    {language.importSection.selectedFileValid}\r\n                                </Alert>\r\n                                }\r\n                                {this.state.isExcelHeadersValid === false &&\r\n                                <Alert color=\"danger\" className={'mt-2'}>\r\n                                    <i className={`icon icon-cross mr-2`}/>\r\n                                    {language.importSection.selectedFileNotValid}\r\n                                </Alert>\r\n                                }\r\n                            </Col>\r\n\r\n                        </Row>\r\n\r\n                        <FileUploadProgress\r\n                            url={this.uploadFileUrl}\r\n                            method={\"POST\"}\r\n                            beforeSend={(request) => {\r\n                                this.props.setSpinner();\r\n                                this.setState({progress: Math.floor(Math.random() * 8) + 5});\r\n                                request.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\r\n\r\n                                // Wee need that workaround because we dont know when server will give response.\r\n                                this.progressAction = setInterval(() => {\r\n\r\n                                    this.timePassed += 2500;\r\n                                    console.log(this.timePassed);\r\n                                    if (this.timePassed > 60000) {\r\n                                        this.setState({showLongWaitMessage: true})\r\n                                    }\r\n\r\n                                    if (this.state.progress <= 92) {\r\n                                        let increase = Math.floor(Math.random() * 2) + 3;\r\n                                        this.setState({\r\n                                            progress: increase + +this.state.progress\r\n                                        });\r\n                                    }\r\n                                }, 2500)\r\n\r\n                                return request\r\n                            }}\r\n                            onProgress={(e, request, progress) => {\r\n                                // empty event, maybe we need this event for later\r\n                            }}\r\n                            onLoad={(e, request) => {\r\n                                clearInterval(this.progressAction);\r\n\r\n                                setTimeout(() => {\r\n                                    // Wait a little time to get correct data structure from response\r\n                                    this.setState(\r\n                                        {\r\n                                            progress: 100,\r\n                                            showLongWaitMessage: false,\r\n                                            importActionResponse: request.response\r\n                                        }, () => {\r\n                                            // After set state execute load data action\r\n                                            const {exec_status} = JSON.parse(this.state.importActionResponse);\r\n\r\n                                            if (exec_status === \"success\") {\r\n                                                // Import finish successfully, then reload the data.\r\n                                                if (this.state.progress === 100) {\r\n                                                    loadAfterImport();\r\n\r\n                                                    // app should restart make observable request for control import status\r\n                                                    this.props.setImportPolling(true);\r\n\r\n                                                }\r\n                                            }\r\n                                            this.props.setSpinner();\r\n                                        });\r\n                                }, 200);\r\n                            }}\r\n                            onError={(e, request) => {\r\n                                this.setState({progress: 0, showLongWaitMessage: false}, () => {\r\n                                    clearInterval(this.progressAction);\r\n                                    this.props.setSpinner();\r\n                                })\r\n                            }}\r\n                            onAbort={(e, request) => {\r\n                                this.setState({progress: 0, showLongWaitMessage: false}, () => {\r\n                                    clearInterval(this.progressAction);\r\n                                    this.props.setSpinner();\r\n                                })\r\n                            }}\r\n                            formGetter={this.formGetter.bind(this)}\r\n                            formRenderer={this.customFormRenderer.bind(this)}\r\n                            progressRenderer={this.customProgressRenderer.bind(this)}\r\n\r\n                        />\r\n                    </ModalBody>\r\n\r\n                </Modal>\r\n            )\r\n        } else {\r\n            return (<></>)\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        open: state.modalImportToggle,\r\n        import: state.import,\r\n        language: state.language,\r\n        token: state.token\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModalImport: () => dispatch(modalImportToggle()),\r\n        setSpinner: () => dispatch(spinnerToggle()),\r\n        setImportPolling: (data) => dispatch(setImportPolling(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalImport);"]},"metadata":{},"sourceType":"module"}