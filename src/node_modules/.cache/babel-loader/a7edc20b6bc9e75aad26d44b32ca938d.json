{"ast":null,"code":"/*\r\n* Authentication Manage Module\r\n*\r\n*/\nimport RestApiModule from './RestApiModule';\nimport RoleModule from './RoleModule';\nimport CryptoModule from './CryptoModule';\nimport store from './redux/store';\nimport { setToken, setAuthUser } from './redux/actions';\n\nclass AuthModule {\n  constructor() {\n    this.store = store;\n    this.restApi = new RestApiModule();\n    this.roleModule = new RoleModule();\n    this.crypto = new CryptoModule();\n  }\n\n  login(u, p) {\n    return new Promise((res, rej) => {\n      this.restApi.callApi('login', {\n        username: this.crypto.encrypt(u),\n        password: this.crypto.encrypt(p)\n      }).then(response => {\n        const token = response.token; // get user roles\n        // TODO: get user roles and redirect to user correct page.\n\n        this.restApi.callApi('getRoles', {\n          token\n        }).then(response => {\n          // TODO: Role definitions\n          const role = this.roleModule.getRole(\"Admin\");\n          const user = {\n            name: u,\n            role\n          };\n          this.store.dispatch(setToken(token));\n          this.store.dispatch(setAuthUser(user));\n          res(true);\n        }).catch(e => console.log(e));\n      }).catch(err => {\n        console.log(err);\n        rej({\n          loginError: true\n        });\n      });\n    });\n  }\n\n  checkToken() {\n    const token = localStorage.getItem('e2eToken');\n  }\n\n}\n\nexport default AuthModule;","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/AuthModule.js"],"names":["RestApiModule","RoleModule","CryptoModule","store","setToken","setAuthUser","AuthModule","constructor","restApi","roleModule","crypto","login","u","p","Promise","res","rej","callApi","username","encrypt","password","then","response","token","role","getRole","user","name","dispatch","catch","e","console","log","err","loginError","checkToken","localStorage","getItem"],"mappings":"AAAA;;;;AAKA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,OAAOC,KAAP,MAAkB,eAAlB;AACA,SAAQC,QAAR,EAAkBC,WAAlB,QAAoC,iBAApC;;AAEA,MAAMC,UAAN,CAAiB;AAEbC,EAAAA,WAAW,GAAG;AACV,SAAKJ,KAAL,GAAaA,KAAb;AACA,SAAKK,OAAL,GAAe,IAAIR,aAAJ,EAAf;AACA,SAAKS,UAAL,GAAkB,IAAIR,UAAJ,EAAlB;AACA,SAAKS,MAAL,GAAc,IAAIR,YAAJ,EAAd;AACH;;AAEDS,EAAAA,KAAK,CAACC,CAAD,EAAIC,CAAJ,EAAO;AAER,WAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAE7B,WAAKR,OAAL,CAAaS,OAAb,CAAqB,OAArB,EAA8B;AAE1BC,QAAAA,QAAQ,EAAE,KAAKR,MAAL,CAAYS,OAAZ,CAAoBP,CAApB,CAFgB;AAG1BQ,QAAAA,QAAQ,EAAE,KAAKV,MAAL,CAAYS,OAAZ,CAAoBN,CAApB;AAHgB,OAA9B,EAKGQ,IALH,CAKSC,QAAD,IAAc;AAAA,cAEXC,KAFW,GAEFD,QAFE,CAEXC,KAFW,EAGlB;AACA;;AAEA,aAAKf,OAAL,CAAaS,OAAb,CAAqB,UAArB,EAAiC;AAE7BM,UAAAA;AAF6B,SAAjC,EAIGF,IAJH,CAISC,QAAD,IAAc;AAClB;AAEA,gBAAME,IAAI,GAAG,KAAKf,UAAL,CAAgBgB,OAAhB,CAAwB,OAAxB,CAAb;AAEA,gBAAMC,IAAI,GAAG;AACTC,YAAAA,IAAI,EAAEf,CADG;AAETY,YAAAA;AAFS,WAAb;AAKA,eAAKrB,KAAL,CAAWyB,QAAX,CAAoBxB,QAAQ,CAACmB,KAAD,CAA5B;AACA,eAAKpB,KAAL,CAAWyB,QAAX,CAAoBvB,WAAW,CAACqB,IAAD,CAA/B;AAEAX,UAAAA,GAAG,CAAC,IAAD,CAAH;AAEH,SAnBD,EAmBGc,KAnBH,CAmBSC,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAnBd;AAqBH,OAhCD,EAgCGD,KAhCH,CAgCUI,GAAD,IAAS;AAEdF,QAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACAjB,QAAAA,GAAG,CAAC;AACAkB,UAAAA,UAAU,EAAE;AADZ,SAAD,CAAH;AAGH,OAtCD;AAuCH,KAzCM,CAAP;AA0CH;;AAEDC,EAAAA,UAAU,GAAG;AACT,UAAMZ,KAAK,GAAGa,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAd;AACH;;AAzDY;;AA4DjB,eAAe/B,UAAf","sourcesContent":["/*\r\n* Authentication Manage Module\r\n*\r\n*/\r\n\r\nimport RestApiModule from './RestApiModule'\r\nimport RoleModule from './RoleModule'\r\nimport CryptoModule from './CryptoModule'\r\n\r\nimport store from './redux/store'\r\nimport {setToken, setAuthUser} from './redux/actions'\r\n\r\nclass AuthModule {\r\n\r\n    constructor() {\r\n        this.store = store;\r\n        this.restApi = new RestApiModule();\r\n        this.roleModule = new RoleModule();\r\n        this.crypto = new CryptoModule();\r\n    }\r\n\r\n    login(u, p) {\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.restApi.callApi('login', {\r\n\r\n                username: this.crypto.encrypt(u),\r\n                password: this.crypto.encrypt(p)\r\n\r\n            }).then((response) => {\r\n\r\n                const {token} = response;\r\n                // get user roles\r\n                // TODO: get user roles and redirect to user correct page.\r\n\r\n                this.restApi.callApi('getRoles', {\r\n\r\n                    token\r\n\r\n                }).then((response) => {\r\n                    // TODO: Role definitions\r\n\r\n                    const role = this.roleModule.getRole(\"Admin\");\r\n\r\n                    const user = {\r\n                        name: u,\r\n                        role\r\n                    };\r\n\r\n                    this.store.dispatch(setToken(token));\r\n                    this.store.dispatch(setAuthUser(user));\r\n\r\n                    res(true);\r\n\r\n                }).catch(e => console.log(e));\r\n\r\n            }).catch((err) => {\r\n\r\n                console.log(err)\r\n                rej({\r\n                    loginError: true\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    checkToken() {\r\n        const token = localStorage.getItem('e2eToken');\r\n    }\r\n}\r\n\r\nexport default AuthModule;"]},"metadata":{},"sourceType":"module"}