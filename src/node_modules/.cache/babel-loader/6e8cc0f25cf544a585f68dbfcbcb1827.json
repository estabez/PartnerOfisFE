{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{connect}from\"react-redux\";import{Modal,ModalHeader,ModalBody,Alert}from'reactstrap';import{modalTitle,modalToggle,setTopologySecondLevel as _setTopologySecondLevel}from\"../redux/actions\";import TopologyDiagram from'../components/TopologyDiagram';import ToolbarRan from\"./TopologyToolbar\";var ModalTemplate=/*#__PURE__*/function(_React$Component){_inherits(ModalTemplate,_React$Component);var _super=_createSuper(ModalTemplate);function ModalTemplate(){var _this;_classCallCheck(this,ModalTemplate);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.handleSelectNode=function(selectedNodeId){var _this$props=_this.props,graph=_this$props.graph,fontSize=_this$props.fontSize;var newGraph=JSON.parse(JSON.stringify(graph));newGraph.nodes.map(function(node){node.font={color:'black',size:13};node.size=25;if(node.id===selectedNodeId){node.font={color:'red',size:fontSize};node.size=40;}});_this.props.setTopologySecondLevel(newGraph);};return _this;}_createClass(ModalTemplate,[{key:\"toggle\",value:function toggle(){var _this2=this;if(this.props.open){setTimeout(function(){// this is need for clear second level data\n_this2.props.setTopologySecondLevel(null);},500);}this.props.setModal();}},{key:\"render\",value:function render(){var _this$props2=this.props,language=_this$props2.language,title=_this$props2.title,graph=_this$props2.graph,diagramAreaId=_this$props2.diagramAreaId,labels=_this$props2.labels;if(language!==null){var sizeOfModal=graph?'xxl':'md';return/*#__PURE__*/React.createElement(Modal,{isOpen:this.props.open,size:sizeOfModal},/*#__PURE__*/React.createElement(ModalHeader,{toggle:this.toggle.bind(this)},title),/*#__PURE__*/React.createElement(ModalBody,{id:diagramAreaId},labels&&/*#__PURE__*/React.createElement(ToolbarRan,{handleSelectNode:this.handleSelectNode.bind(this),labels:labels.dropdownList,topologyLevel:2,diagramAreaId:diagramAreaId,snapshotFileName:'RanTopologySecondLevel.png'}),graph&&/*#__PURE__*/React.createElement(TopologyDiagram,{graph:graph,height:'85%'}),!graph&&/*#__PURE__*/React.createElement(Alert,{color:'danger'},language.aggregSiteNoData)));}else{return/*#__PURE__*/React.createElement(React.Fragment,null);}}}]);return ModalTemplate;}(React.Component);function mapStateToProps(state){return{language:state.language,open:state.modalToggle,title:state.modalTitle,graph:state.topologySecondLevel,labels:state.topologySecondLevelDropdownLabels,fontSize:state.topologySelectedNodeFontSize};}function mapDispatchToProps(dispatch){return{setModal:function setModal(){return dispatch(modalToggle());},setModalTitle:function setModalTitle(content){return dispatch(modalTitle(content));},setTopologySecondLevel:function setTopologySecondLevel(graph){return dispatch(_setTopologySecondLevel(graph));}};}export default connect(mapStateToProps,mapDispatchToProps)(ModalTemplate);","map":{"version":3,"sources":["C:/Users/soperasyon27/Desktop/FE/src18mart/src/src/components/Modal.jsx"],"names":["React","connect","Modal","ModalHeader","ModalBody","Alert","modalTitle","modalToggle","setTopologySecondLevel","TopologyDiagram","ToolbarRan","ModalTemplate","handleSelectNode","selectedNodeId","props","graph","fontSize","newGraph","JSON","parse","stringify","nodes","map","node","font","color","size","id","open","setTimeout","setModal","language","title","diagramAreaId","labels","sizeOfModal","toggle","bind","dropdownList","aggregSiteNoData","Component","mapStateToProps","state","topologySecondLevel","topologySecondLevelDropdownLabels","topologySelectedNodeFontSize","mapDispatchToProps","dispatch","setModalTitle","content"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Modal, ModalHeader, ModalBody, Alert} from 'reactstrap';\r\nimport {modalTitle, modalToggle, setTopologySecondLevel} from \"../redux/actions\";\r\nimport TopologyDiagram from '../components/TopologyDiagram'\r\nimport ToolbarRan from \"./TopologyToolbar\";\r\n\r\nclass ModalTemplate extends React.Component {\r\n\r\n    toggle() {\r\n        if (this.props.open) {\r\n            setTimeout(() => {\r\n                // this is need for clear second level data\r\n                this.props.setTopologySecondLevel(null)\r\n            }, 500)\r\n        }\r\n        this.props.setModal();\r\n    }\r\n\r\n    handleSelectNode = selectedNodeId => {\r\n\r\n        const {graph, fontSize} = this.props;\r\n\r\n        let newGraph = JSON.parse(JSON.stringify(graph));\r\n\r\n        newGraph.nodes.map((node) => {\r\n            node.font = {color: 'black', size: 13}\r\n            node.size = 25;\r\n            if (node.id === selectedNodeId) {\r\n                node.font = {color: 'red', size: fontSize};\r\n                node.size = 40;\r\n            }\r\n        });\r\n        this.props.setTopologySecondLevel(newGraph);\r\n\r\n    };\r\n\r\n    render() {\r\n        const {language, title, graph, diagramAreaId, labels} = this.props;\r\n\r\n        if (language !== null) {\r\n            const sizeOfModal = graph ? 'xxl' : 'md'\r\n            return (\r\n                <Modal isOpen={this.props.open} size={sizeOfModal}>\r\n\r\n                    <ModalHeader toggle={this.toggle.bind(this)}>{title}</ModalHeader>\r\n\r\n                    <ModalBody id={diagramAreaId}>\r\n                        {labels &&\r\n                        <ToolbarRan handleSelectNode={this.handleSelectNode.bind(this)}\r\n                                    labels={labels.dropdownList}\r\n                                    topologyLevel={2}\r\n                                    diagramAreaId={diagramAreaId}\r\n                                    snapshotFileName={'RanTopologySecondLevel.png'}/>\r\n                        }\r\n                        {graph &&\r\n                        <TopologyDiagram graph={graph} height={'85%'}/>\r\n                        }\r\n                        {!graph &&\r\n                            <Alert color={'danger'}>\r\n                                {language.aggregSiteNoData}\r\n                            </Alert>\r\n                        }\r\n                    </ModalBody>\r\n                </Modal>\r\n            )\r\n        } else {\r\n            return (<></>)\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        language: state.language,\r\n        open: state.modalToggle,\r\n        title: state.modalTitle,\r\n        graph: state.topologySecondLevel,\r\n        labels: state.topologySecondLevelDropdownLabels,\r\n        fontSize: state.topologySelectedNodeFontSize\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModal: () => dispatch(modalToggle()),\r\n        setModalTitle: (content) => dispatch(modalTitle(content)),\r\n        setTopologySecondLevel: (graph) => dispatch(setTopologySecondLevel(graph))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalTemplate);"]},"metadata":{},"sourceType":"module"}