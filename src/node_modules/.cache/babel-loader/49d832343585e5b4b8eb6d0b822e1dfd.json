{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\views\\\\Matrix.jsx\";\nimport React, { createRef } from 'react';\nimport { connect } from \"react-redux\";\nimport { Row, Col, Card, CardBody, CardFooter } from 'reactstrap';\nimport { HotTable } from '@handsontable/react';\nimport Handsontable from 'handsontable';\nimport { groupingMap } from '../matrixDataMap';\nimport { columnLogic } from '../matrixColumnLogicMap';\nimport PaginationMatrix from \"../components/Pagination\";\nimport Header from '../components/Header';\nimport Sidebar from '../components/Sidebar';\nimport Toolbar from '../components/ToolbarMatrix';\nimport ModalImport from '../components/ModalImport';\nimport Spinner from '../components/Spinner';\nimport EmptyDataset from '../components/EmptyDataset';\nimport { editOnToggle, spinnerToggle } from \"../redux/actions\";\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // For export File\n\nimport XLSX from 'xlsx';\nimport { saveAs } from 'file-saver'; // Rest api module import\n\nimport RestApiModule from '../RestApiModule'; // Alert module\n\nimport AlertModule from '../AlertModule';\n\nclass Matrix extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.restApi = new RestApiModule();\n    this.alert = new AlertModule();\n    this.hotTableComponent = createRef();\n    this.hot = null;\n    this.handsontableData = null;\n    this.handsontableDataBackup = null;\n    this.errorMessages = null;\n    this.errorBoxTitle = null;\n    this.columnHeaders = [];\n    this.titles = [];\n    this.columns = [];\n    this.handleColumnHeaders();\n    this.selectedRowCoords = {\n      r: null,\n      c: null\n    };\n    this.editedRowCoords = {\n      r: null,\n      c: null\n    };\n    this.validatedCell = {\n      r: null,\n      c: null\n    };\n    this.rowValidation = true;\n    this.showHistory = false;\n    this.filter = null;\n    this.mandatoryColumns = null; //this.itemPerPage = +process.env.REACT_APP_MATRIX_ITEM_PER_PAGE;\n\n    this.state = {\n      isDataExistsInDB: false,\n      newRowAdded: false,\n      showHistory: false,\n      activePage: 1,\n      itemPerPage: +process.env.REACT_APP_MATRIX_ITEM_PER_PAGE,\n      totalCountOfData: 0,\n      exportDataAsExcelFile: null\n    };\n    Handsontable.hooks.add('afterSelectionEnd', (r, c) => {\n      this.selectedRowCoords.r = r;\n      this.selectedRowCoords.c = c;\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    if (this.props.user) {\n      // get mandatory columns from map file\n      this.mandatoryColumns = this.mandatoryColumnExtractor();\n      this.setStateAsync({\n        permittedColumns: this.props.user.role.permittedColumns\n      });\n      this.hot = this.hotTableComponent.current.hotInstance;\n      this.dataLoad();\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  calculatePagination(total) {\n    if (total) {\n      const pageCount = +total / this.state.itemPerPage;\n      this.setStateAsync({\n        totalCountOfData: total,\n        pageCount\n      });\n    }\n  }\n\n  dataCountOfSelectedRegion() {\n    const _this$props = this.props,\n          token = _this$props.token,\n          region = _this$props.region,\n          radioSite = _this$props.radioSite;\n\n    if (region) {\n      this.restApi.callApi('getMatrixDataCount', {\n        token,\n        region,\n        radioSite\n      }).then(response => {\n        this.calculatePagination(response.ConnectivityCount[0].Count);\n      });\n    }\n  }\n\n  async dataLoad(filterChanged) {\n    if (this._isMounted) {\n      const _this$props2 = this.props,\n            token = _this$props2.token,\n            region = _this$props2.region,\n            radioSite = _this$props2.radioSite; // that means filtered options changed, so we reset the activePage number to 1\n\n      if (filterChanged) {\n        this.setStateAsync({\n          activePage: 1,\n          itemPerPage: filterChanged === \"radioSite\" ? 100 : +process.env.REACT_APP_MATRIX_ITEM_PER_PAGE\n        });\n      }\n\n      if (region) {\n        this.props.setSpinner(); // get count of data\n\n        await this.dataCountOfSelectedRegion(); //reset selected row data\n\n        this.resetSelectedRow();\n        this.restApi.callApi('getMatrixData', {\n          token,\n          region,\n          radioSite,\n          count: this.state.itemPerPage.toString(),\n          page_index: this.state.activePage.toString()\n        }).then(async response => {\n          //console.log(response)\n          // mock test\n          //response.exec_status = \"error\";\n          const ConnectivityMatrix = response.ConnectivityMatrix,\n                exec_status = response.exec_status; // If data doesnt exist in EAI DB we should set a flag to manage toolbar actions\n\n          if (exec_status === \"success\" && ConnectivityMatrix.length > 0) {\n            this.setStateAsync({\n              isDataExistsInDB: true\n            });\n            this.handsontableData = ConnectivityMatrix; // store the copy of data\n\n            this.hot.loadData(this.handsontableData);\n            this.paginationRowNumbers();\n            /* Filter for show active rows only*/\n\n            this.filter = this.hot.getPlugin('filters');\n            await this.revisionRowFilter();\n          } else {\n            this.setStateAsync({\n              isDataExistsInDB: false\n            });\n          } // remove spinner from screen\n\n\n          this.props.setSpinner();\n        }).catch(err => {\n          // err state. If need we can give message to user.\n          // Error handling is managed by RestApiModule.\n          // We don't need to do extra development in here\n          // Somehow if this block executed, we can only change the flag to false.\n          this.setStateAsync({\n            isDataExistsInDB: false\n          }); // remove spinner from screen\n\n          this.props.setSpinner();\n        });\n      }\n    }\n  }\n\n  setStateAsync(state) {\n    return new Promise(resolve => {\n      this.setState(state, resolve);\n    });\n  }\n\n  async handlePageChange(pageNumber) {\n    //console.log(pageNumber);\n    // TODO: call api to retrieve data for matrix page\n    // data will provided by page number\n    await this.setStateAsync({\n      activePage: pageNumber\n    });\n    this.dataLoad();\n  }\n\n  paginationRowNumbers() {\n    // break the handsontable row headers mechanism to show to user exact row numbers while paginating\n    const _this$state = this.state,\n          activePage = _this$state.activePage,\n          itemPerPage = _this$state.itemPerPage;\n    const startPoint = (activePage - 1) * itemPerPage + 1;\n    const newNumbers = Array.from(Array(itemPerPage), (_, i) => startPoint + i);\n    this.hot.updateSettings({\n      rowHeaders: newNumbers\n    });\n  } // click event handle for edit button\n\n\n  handleEditClick() {\n    const _this$selectedRowCoor = this.selectedRowCoords,\n          r = _this$selectedRowCoor.r,\n          c = _this$selectedRowCoor.c;\n    if (r === null && c === null) return; // Lock mechanism controls\n\n    const dto = this.prepareDTOforLockMechanism(r, false);\n    this.restApi.callApi('lock', dto).then(response => {\n      const json = response.resultLock;\n      const user = this.props.user;\n      console.log(json); // can I continue to edit ?\n\n      const continueToEdit = json.islock && json.uname === user.name;\n\n      if (continueToEdit) {\n        const etatRule = this.ruleExtractor(\"etatCheckValue\");\n        const archivedRule = this.ruleExtractor(\"archivedCheckValue\");\n        const etatDataAtCell = this.hot.getDataAtRowProp(r, \"etat\");\n        const archivedDataAtCell = this.hot.getDataAtRowProp(r, \"archived\");\n        const checkEtatValue = etatRule.isValue.includes(etatDataAtCell);\n        const checkArchivedValue = archivedRule.isValue.includes(archivedDataAtCell);\n\n        if (checkEtatValue && checkArchivedValue) {\n          // create backup data before editing;\n          this.handsontableDataBackup = JSON.parse(JSON.stringify(this.handsontableData)); // Change edit mode on redux\n\n          this.props.setEdit();\n          this.setCellProperties(r, c);\n          this.editedRowCoords.r = r;\n          this.editedRowCoords.c = c;\n        } else {\n          const language = this.props.language;\n          this.alert.showMessage(\"warning\", language.editModeRestrictionTitle, language.editModeRestriction, false);\n        }\n      } else {\n        this.showMessageForLockMechanism(true, json);\n      }\n    });\n  } // click handle for add new row\n\n\n  async handleNewRowClick(duplicate = false) {\n    await this.setStateAsync({\n      newRowAdded: true\n    });\n    this.editedRowCoords.r = 0;\n    this.editedRowCoords.c = 0; // create backup data before editing;\n\n    this.handsontableDataBackup = JSON.parse(JSON.stringify(this.handsontableData));\n    this.props.setEdit();\n    this.hot.alter('insert_row', 0, 1);\n    this.setCellProperties(0, null, duplicate);\n    if (this.state.showHistory) this.iterateRevisionRows();\n  }\n\n  async handleDuplicateRowClick() {\n    const _this$selectedRowCoor2 = this.selectedRowCoords,\n          r = _this$selectedRowCoor2.r,\n          c = _this$selectedRowCoor2.c;\n    if (r === null && c === null) return;\n    await this.handleNewRowClick(true); // get existing data at row\n\n    const data = this.hot.getDataAtRow(r); // find radio Site column for special case. we need empty radio site for duplicated row\n\n    const radioSiteColumnIndex = this.findIndexOfColumn(0, 'radioSite'); // get column count for iteration\n\n    const colCount = this.hot.countCols(); // iterate the columns\n\n    for (let x = 0; x <= colCount; x++) {\n      // if column is radio site, pass it\n      if (x === radioSiteColumnIndex) continue; // set data\n\n      this.hot.setDataAtCell(0, x, data[x]);\n    }\n  } // history toggle finished\n\n\n  async handleHistoryToggle() {\n    await this.setStateAsync({\n      showHistory: !this.state.showHistory\n    });\n    await this.revisionRowFilter();\n  }\n\n  handleCancelClick() {\n    this.setStateAsync({\n      newRowAdded: false\n    }).then(() => {\n      const _this$selectedRowCoor3 = this.selectedRowCoords,\n            r = _this$selectedRowCoor3.r,\n            c = _this$selectedRowCoor3.c;\n      if (r === null && c === null) return; // Lock mechanism controls\n\n      const dto = this.prepareDTOforLockMechanism(r, false); // In all circumstances call implicit unlock\n\n      this.restApi.callApi('unlock', dto).then(response => {\n        console.log(response);\n        this.showMessageForLockMechanism(false, response.resultUnlock);\n      });\n      this.cancelEdit();\n    });\n  }\n\n  handleSaveClick() {\n    this.saveAction();\n  }\n\n  handleSaveHistoryClick() {\n    this.saveAction(true);\n  } // save action for row edited or new\n\n\n  saveAction(revision) {\n    const language = this.props.language;\n\n    if (this.rowValidation) {\n      const _this$editedRowCoords = this.editedRowCoords,\n            r = _this$editedRowCoords.r,\n            c = _this$editedRowCoords.c;\n      const token = this.props.token;\n\n      if (r !== null || r !== undefined) {\n        // data would send to API\n        let data = this.hot.getDataAtRow(r);\n        data = this.columns.reduce((newRowData, item, index) => {\n          Object.assign(newRowData, data[index] !== null ? {\n            [item.data]: data[index]\n          } : {\n            [item.data]: \"\"\n          });\n          return newRowData;\n        }, {});\n        const mandatoryColumnsFilled = this.checkMandatoryColumnsFilled(data);\n\n        if (mandatoryColumnsFilled) {\n          let isRevision = false;\n\n          if (revision) {\n            isRevision = revision;\n          } // Call backend to save row\n\n\n          this.restApi.callApi(\"saveRow\", {\n            token,\n            row: data,\n            isNewRow: this.state.newRowAdded,\n            isRevision\n          }).then(response => {\n            const _response$result = response.result,\n                  processed = _response$result.processed,\n                  log = _response$result.log;\n            const message = log.split('\\n').join('<br>');\n\n            if (processed) {\n              this.alert.showMessage(\"success\", language.saveActionSuccessTitle, message, false);\n              this.selectedRowCoords.c = c;\n              this.selectedRowCoords.r = r;\n              this.editedRowCoords.r = null;\n              this.editedRowCoords.c = null; // Change edit mode on redux\n\n              this.props.setEdit(); // Reset new row state if its true\n\n              if (this.state.newRowAdded) this.setState({\n                newRowAdded: false\n              });\n              this.dataLoad();\n            } else {\n              this.alert.showMessage(\"error\", language.saveActionFailTitle, message, false);\n            }\n          });\n        } else {\n          const title = language.mandatoryDataTitle;\n          let text = language.mandatoryDataText;\n          text = text.replace(\"{columns}\", this.mandatoryColumns.join(',<br>'));\n          this.alert.showMessage(\"error\", title, text, false);\n        }\n      }\n    } else {\n      const language = this.props.language;\n      this.alert.showMessage(\"error\", language.validationMessageBoxTitle, language.validationErrorGeneralMessage, false);\n    }\n  }\n\n  async revisionRowFilter() {\n    if (this._isMounted) {\n      const colIndex = this.findIndexOfColumn(0, 'archived');\n      const arg = this.state.showHistory ? '' : 'NO'; // this param is for filtering on handsontable\n\n      if (this.state.showHistory) {\n        this.filter.removeConditions(colIndex);\n      } else {\n        this.filter.addCondition(colIndex, 'contains', arg);\n      }\n\n      await this.filter.filter(); // Makeup for revisioned rows.\n\n      await this.iterateRevisionRows();\n    }\n  }\n\n  setCellProperties(r, c, isDuplicateRow) {\n    const colCount = this.hot.countCols();\n    let col = c !== null ? c : 0;\n\n    for (let x = 0; x <= colCount; x++) {\n      const _this$hot$getCellMeta = this.hot.getCellMeta(r, x),\n            prop = _this$hot$getCellMeta.prop,\n            readOnly = _this$hot$getCellMeta.readOnly,\n            readOnlyInEditMode = _this$hot$getCellMeta.readOnlyInEditMode;\n\n      if (typeof prop !== \"string\") continue; // if prop has got readyOnly attribute with value \"true\", write permission will restricted\n      // if prop hasn't got readOnly attribute it would be false by default. So we need to check if\n      // this action is adding new row or editing existing row.\n      // if action is editing a row then we should check readOnlyInEditMode attribute of prop.\n      // if it's exist we should get opposite value because if we add this attribute to prop it value should be \"true\"\n      // it means this property can not be writable in edit mode\n      // if readOnlyInEditMode attribute is not exist in prop there isn't extra attribute checking for this cell\n      // can be writable or not. So we can put \"true\" value to associated variable.\n\n      const writable = readOnly ? !readOnly : !this.state.newRowAdded ? !readOnlyInEditMode : !readOnly;\n\n      if (writable) {\n        if (this.state.permittedColumns.indexOf(prop) >= 0) {\n          const type = this.hot.getDataType(r, x); // get cell type from loaded map\n          // this 2 row for initiate the rules on editing row.\n          //const value = this.hot.getDataAtCell(r, x);\n          //this.columnEvents(r, prop, value);\n\n          col = col === 0 ? x : col; // when add new row find first editable col.\n\n          this.hot.setCellMeta(r, x, \"editor\", type);\n          this.hot.setCellMeta(r, x, \"className\", 'bg-warning text-dark');\n        }\n      }\n    } // set initial value for newly adding rows\n\n\n    if (this.state.newRowAdded && !isDuplicateRow) {\n      this.setInitialValueOfColumn();\n    }\n\n    this.hot.render();\n    this.hot.selectCell(r, col);\n  }\n\n  findIndexOfColumn(r, propName) {\n    const colCount = this.hot.countCols();\n\n    for (let c = 0; c <= colCount; c++) {\n      const _this$hot$getCellMeta2 = this.hot.getCellMeta(r, c),\n            prop = _this$hot$getCellMeta2.prop;\n\n      if (prop === propName) {\n        return c;\n      }\n    }\n  } // Before save action mandatory columns are must be filled\n\n\n  checkMandatoryColumnsFilled(rowData) {\n    const checkData = this.mandatoryColumns.reduce((data, columnId) => {\n      data.push(rowData[columnId]);\n      return data;\n    }, []);\n    return checkData.every(data => {\n      return data !== undefined && data !== \"\" && data !== null;\n    });\n  } // Finished initial value setter\n\n\n  setInitialValueOfColumn() {\n    this.columns.map(item => {\n      if (item.hasOwnProperty('initialValue')) {\n        this.hot.setDataAtRowProp(0, item.data, item.initialValue);\n      }\n\n      return true;\n    });\n  } // Finished, cancel edit return back to last backup data\n\n\n  cancelEdit() {\n    this.handsontableData = JSON.parse(JSON.stringify(this.handsontableDataBackup));\n    this.hot.loadData(this.handsontableData);\n    this.hot.render(); // Change edit mode on redux\n\n    this.props.setEdit();\n    if (this.state.showHistory) this.iterateRevisionRows();\n  } // reset row finished\n\n\n  resetRow(r) {\n    const colCount = this.hot.countCols();\n\n    for (let x = 0; x <= colCount; x++) {\n      this.hot.setCellMeta(r, x, \"editor\", false);\n      this.hot.setCellMeta(r, x, \"className\", 'bg-primary text-white');\n    }\n\n    this.hot.render();\n    this.setState({\n      newRowAdded: false\n    });\n  } // reset seleted rows for some reason such as change region, change active page\n\n\n  resetSelectedRow() {\n    this.selectedRowCoords.r = null;\n    this.selectedRowCoords.c = null;\n    this.editedRowCoords.r = null;\n    this.editedRowCoords.c = null;\n    this.validatedCell.r = null;\n    this.validatedCell.c = null;\n    this.hot.deselectCell();\n  } // disable moves finished\n\n\n  disableMoves() {\n    return false;\n  } // Finished ip validation rule\n\n\n  ipValidate(value, callback) {\n    const pat = /^(?:\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b|null)$/;\n    this.rowValidation = pat.test(value);\n    callback(this.rowValidation);\n    if (!this.rowValidation) this.showMessage(this.errorBoxTitle, this.errorMessages.invalidIP, true);\n  } // Finished numeric value validation\n\n\n  numericValidate(value, callback) {\n    const pat = /^\\d+$/;\n    this.rowValidation = pat.test(value);\n    callback(this.rowValidation);\n    if (!this.rowValidation) this.showMessage(this.errorBoxTitle, this.errorMessages.invalidNumber, true);\n  } // Finished validation message box\n\n\n  showMessage(title, message, validatorClose) {\n    confirmAlert({\n      title: 'Validation Warning',\n      message: message,\n      closeOnEscape: false,\n      closeOnClickOutside: false,\n      customUI: ({\n        onClose\n      }) => {\n        const closeAction = () => {\n          if (validatorClose) {\n            this.hot.selectCell(this.validatedCell.r, this.validatedCell.c);\n            if (this.hot.getActiveEditor() !== undefined) this.hot.getActiveEditor().beginEditing();\n            onClose();\n          } else {\n            this.cancelEdit();\n            onClose();\n          }\n        };\n\n        return React.createElement(\"div\", {\n          className: \"card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 637\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 638\n          },\n          __self: this\n        }, title, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          onClick: closeAction,\n          \"aria-label\": \"Close\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 641\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          \"aria-hidden\": \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 644\n          },\n          __self: this\n        }, \"\\xD7\"))), React.createElement(\"div\", {\n          className: \"card-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 648\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: 'card-text text-danger',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 649\n          },\n          __self: this\n        }, message)), React.createElement(\"div\", {\n          className: \"card-footer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 651\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: 'btn btn-warning',\n          onClick: closeAction,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 652\n          },\n          __self: this\n        }, \"Ok\")));\n      }\n    });\n  } // Finished column header groups\n\n\n  handleColumnHeaders() {\n    // Create a copy of map file\n    const headerMap = JSON.parse(JSON.stringify(groupingMap)); // Set the header groups for table\n\n    const headerGrouping = headerMap.filter(item => {\n      item.colspan = item.columns.length;\n      return typeof item.columns === \"object\";\n    }); // set each and every column defaults\n\n    const cols = headerMap.map(item => {\n      return item.columns.map(c => {\n        this.titles.push(c.label);\n        c.editor = false; // default readonly\n\n        if (typeof c.validator !== \"undefined\") {\n          if (c.validator === 'ipValidator') {\n            c.validator = (value, callback) => {\n              this.ipValidate(value, callback);\n            };\n          }\n\n          if (c.validator === 'isNumeric') {\n            c.validator = (value, callback) => {\n              this.numericValidate(value, callback);\n            };\n          }\n        }\n\n        if (typeof c.type !== \"undefined\") {\n          if (c.type === 'dropdown') {\n            this.setPickList(c.data).then(list => {\n              c.source = list;\n            });\n          }\n        }\n\n        return c;\n      });\n    }); // spread the columns into single object\n\n    cols.map(c => {\n      this.columns = [...this.columns, ...c];\n    }); // Pushing header group const to related vars\n\n    this.columnHeaders.push(headerGrouping);\n    this.columnHeaders.push(this.titles);\n  } // Finished colouring header\n\n\n  headerColoring(col, TH) {\n    const TR = TH.parentNode;\n    const THEAD = TR.parentNode;\n    const b = THEAD.childNodes.length;\n    const n = Array.prototype.indexOf.call(THEAD.childNodes, TR);\n    const headerLevel = -1 * b + n;\n\n    function applyClass(elem, className) {\n      if (!Handsontable.dom.hasClass(elem, className)) Handsontable.dom.addClass(elem, className);\n    }\n\n    if (headerLevel === -1 || headerLevel === -2) {\n      if (col >= 0 && col <= 11) applyClass(TH, 'color1');\n      if (col === 12) applyClass(TH, 'color2');\n      if (col >= 13 && col <= 20) applyClass(TH, 'color3');\n      if (col >= 21 && col <= 27) applyClass(TH, 'color4');\n      if (col >= 28 && col <= 30) applyClass(TH, 'color5');\n      if (col >= 31 && col <= 34) applyClass(TH, 'color6');\n      if (col >= 35 && col <= 43) applyClass(TH, 'color7');\n      if (col >= 44 && col <= 46) applyClass(TH, 'color8');\n      if (col >= 47 && col <= 50) applyClass(TH, 'color9');\n    }\n  } // Finished pick list setter function\n\n\n  setPickList(name) {\n    return new Promise((res, rej) => {\n      const value = `${name}Picklist_value`;\n      const key = `${name}Picklist`;\n      this.restApi.callApi('getPickList', {\n        token: this.props.token,\n        pickListName: key\n      }).then(response => {\n        if (response.pickList.length > 0) {\n          const list = response.pickList.map(item => {\n            return item[value];\n          });\n          res(list);\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    });\n  } // Finished revision row makeup\n\n\n  iterateRevisionRows() {\n    const rc = this.hot.countRows();\n    const cc = this.hot.countCols();\n\n    for (let r = 0; r <= rc; r++) {\n      const value = this.hot.getDataAtRowProp(r, 'archived');\n\n      if (value === 'YES' || value === \"Yes\" || value === \"yes\") {\n        for (let c = 0; c <= cc; c++) {\n          this.hot.setCellMeta(r, c, 'renderer', (instance, td) => {\n            const showHistory = this.state.showHistory;\n            if (showHistory) td.classList.add('revision-row');\n          });\n        }\n      }\n    }\n\n    this.hot.render();\n  } // Read the rule from imported rule file\n\n\n  mandatoryColumnExtractor() {\n    return groupingMap.reduce((fullArr, item) => {\n      const cols = item.columns.reduce((arr, col) => {\n        if (col.mandatory) arr.push(col.data);\n        return arr;\n      }, []);\n      return [...fullArr, ...cols];\n    }, []);\n  } // Read the rule from imported rule file\n\n\n  ruleExtractor(columnId) {\n    return columnLogic.find(item => {\n      return item.id === columnId;\n    });\n  } // Generic attributes validations and rule runner\n\n\n  async columnEvents(r, c, newV) {\n    this.validatedCell.r = r;\n    this.validatedCell.c = c;\n    const properties = this.ruleExtractor(c);\n\n    if (properties) {\n      const methodCaller = properties.methodCaller,\n            rules = properties.rules,\n            executeRules = properties.executeRules,\n            paramName = properties.paramName,\n            additionalParams = properties.additionalParams,\n            ruleChain = properties.ruleChain;\n\n      if (methodCaller) {\n        // we understand that this logic needs to call api\n        // default dto\n        let dto = {\n          token: this.props.token,\n          [paramName]: this.hot.getDataAtRowProp(r, c)\n        };\n\n        if (typeof additionalParams !== 'undefined' && typeof additionalParams === 'object') {\n          // create addition parameter to bind exact one\n          const additionalDTO = additionalParams.map(prop => {\n            return {\n              [prop]: this.hot.getDataAtRowProp(r, prop)\n            };\n          }); // dto with additional parameters\n\n          dto = Object.assign({}, dto, ...additionalDTO);\n        } // method caller and logic execution\n        //await this.genericCL(methodCaller, dto);\n\n\n        this.restApi.callApi(methodCaller, dto).then(response => {\n          if (typeof response.isExist !== 'undefined') {\n            if (!response.isExist) {\n              // value is not exist in DB, show message\n              this.showMessage(this.errorBoxTitle, this.errorMessages[c], true);\n              return false;\n            } else {\n              // value is exist in DB, check other rules associated with that one\n              if (executeRules && executeRules.length > 0) {\n                executeRules.map(props => {\n                  const propId = props.propId;\n                  const data = this.hot.getDataAtRowProp(r, propId);\n                  this.columnEvents(r, propId, data);\n                });\n              }\n            }\n\n            if (ruleChain && ruleChain.length > 0) {\n              this.ruleChainHandle(ruleChain, dto, r);\n            }\n          } else {\n            rules[0].changedValue = response.List.map(i => {\n              return i.value;\n            });\n            this.staticRules(r, null, rules);\n          }\n        });\n      } else {\n        this.staticRules(r, newV, rules);\n      }\n    }\n  }\n\n  ruleChainHandle(ruleChain, dto, r) {\n    ruleChain.map(item => {\n      if (item.parentResponse) {\n        this.restApi.callApi(item.methodCaller, dto).then(response => {\n          const exec_status = response.exec_status;\n          const value = response[item.parsingKey];\n\n          if (exec_status === \"success\") {\n            this.staticRules(r, value, item.rules);\n          }\n        });\n      }\n    });\n  }\n\n  staticRules(r, value, rules) {\n    if (rules) {\n      rules.map(item => {\n        if (item.columnValue && value) {\n          if (item.columnValue === value) {\n            // status changes\n            this.hot.setDataAtRowProp(r, item.changedId, item.changedValue);\n          }\n        } else if (!item.columnValue && value) {\n          this.hot.setDataAtRowProp(r, item.changedId, value);\n        } else {\n          this.hot.setCellMeta(r, this.hot.propToCol(item.changedId), 'source', item.changedValue);\n        }\n      });\n    }\n  }\n\n  handleExport() {\n    const _this$props3 = this.props,\n          token = _this$props3.token,\n          region = _this$props3.region;\n    this.restApi.callApi('exportData', {\n      region,\n      token\n    }).then(response => {\n      const today = new Date(); //const todayDate =  '_' + today.getDate() +  (today.toLocaleString('default', { month: 'long' })) + today.getFullYear();\n\n      const todayDate = '_' + today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate() + 'T' + today.getHours() + '.' + today.getMinutes();\n      const ws = XLSX.utils.json_to_sheet(response.ExportedExcelAsJSON);\n      const wb = {\n        Sheets: {\n          'data': ws\n        },\n        SheetNames: ['data']\n      };\n      const excelBuffer = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n      const data = new Blob([excelBuffer], {\n        type: 'xlsx'\n      }); // saveAs(data, `DataMatrix${todayDate}.xlsx`);\n\n      saveAs(data, `Exported_RANConn${todayDate}.xlsx`);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  handleLockClick() {\n    const r = this.selectedRowCoords.r;\n    if (r === null) return;\n    const dto = this.prepareDTOforLockMechanism(r, true);\n    this.restApi.callApi('lock', dto).then(response => {\n      this.showMessageForLockMechanism(true, response.resultLock);\n    });\n  }\n\n  handleUnlockClick() {\n    const r = this.selectedRowCoords.r;\n    if (r === null) return;\n    const dto = this.prepareDTOforLockMechanism(r, true);\n    this.restApi.callApi('unlock', dto).then(response => {\n      this.showMessageForLockMechanism(false, response.resultUnlock);\n    });\n  }\n\n  prepareDTOforLockMechanism(r, isExplicit) {\n    const token = this.props.token; // get existing data at row\n\n    const data = this.hot.getDataAtRow(r);\n    const radioSiteColumnIndex = this.findIndexOfColumn(0, 'radioSite');\n    const revisionNumberColumnIndex = this.findIndexOfColumn(0, 'revisionNumber');\n    const radioSite = data[radioSiteColumnIndex].toString();\n    const revisionNumber = data[revisionNumberColumnIndex].toString();\n    return {\n      token,\n      radioSite,\n      revisionNumber,\n      isExplicit\n    };\n  }\n\n  showMessageForLockMechanism(messageForLock, result) {\n    const _this$props$language = this.props.language,\n          lockMechanism = _this$props$language.lockMechanism,\n          unlockMechanism = _this$props$language.unlockMechanism;\n    let message = messageForLock ? lockMechanism[result.code.toString()] : unlockMechanism[result.code.toString()];\n    message = message ? message.replace(\"{uname}\", result.uname).replace(\"{time}\", new Date(result.time).toLocaleString()) : \"Undefined\";\n    this.alert.showMessage('info', unlockMechanism.title, message, false);\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    return nextState.isDataExistsInDB !== this.state.isDataExistsInDB || nextState.activePage !== this.state.activePage || nextState.totalCountOfData !== this.state.totalCountOfData || nextState.newRowAdded !== this.state.newRowAdded || nextState.maximize !== this.props.maximize;\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          maximize = _this$props4.maximize,\n          language = _this$props4.language,\n          contentCSS = _this$props4.contentCSS;\n\n    if (language) {\n      this.errorBoxTitle = language.validationMessageBoxTitle;\n      this.errorMessages = language.validationErrorMessages;\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1019\n      },\n      __self: this\n    }), React.createElement(Row, {\n      className: \"h-100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1020\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      maximize: maximize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1021\n      },\n      __self: this\n    }), React.createElement(Col, {\n      className: contentCSS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1022\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      wrapper: 'toolbar mt-2',\n      isDataExist: this.state.isDataExistsInDB,\n      newRowAdded: this.state.newRowAdded,\n      export: this.handleExport.bind(this),\n      lock: this.handleLockClick.bind(this),\n      unlock: this.handleUnlockClick.bind(this),\n      new: this.handleNewRowClick.bind(this),\n      duplicate: this.handleDuplicateRowClick.bind(this),\n      edit: this.handleEditClick.bind(this),\n      cancel: this.handleCancelClick.bind(this),\n      save: this.handleSaveClick.bind(this),\n      \"save-history\": this.handleSaveHistoryClick.bind(this),\n      history: this.handleHistoryToggle.bind(this),\n      handleRegionChange: this.dataLoad.bind(this),\n      handleRadioSiteChange: this.dataLoad.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1023\n      },\n      __self: this\n    }), React.createElement(Card, {\n      className: 'mt-1 fixedCard',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1041\n      },\n      __self: this\n    }, React.createElement(CardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1042\n      },\n      __self: this\n    }, React.createElement(HotTable, {\n      ref: this.hotTableComponent,\n      id: 'hot',\n      licenseKey: 'non-commercial-and-evaluation',\n      nestedHeaders: this.columnHeaders,\n      columns: this.columns,\n      stretchH: 'all',\n      dropdownMenu: true,\n      filters: true,\n      manualColumnResize: true,\n      width: '100%',\n      height: '100%',\n      fixedColumnsLeft: 0,\n      columnSorting: true,\n      currentRowClassName: ['bg-primary', 'text-white'],\n      enterBeginsEditing: false,\n      outsideClickDeselects: false,\n      enterMoves: this.disableMoves(),\n      fillHandle: this.disableMoves(),\n      afterValidate: (isValid, value, row, prop) => {\n        // this is check dropdown values are proper or not.\n        this.validatedCell.r = row;\n        this.validatedCell.c = prop;\n      },\n      afterGetColHeader: (col, TH) => {\n        this.headerColoring(col, TH);\n      },\n      afterCreateRow: (index, amount, source) => {//console.log(index, amount, source)\n      },\n      afterChange: changes => {\n        // TODO: check esc button when its clicked\n        if (changes) {\n          const _changes$ = _slicedToArray(changes[0], 4),\n                r = _changes$[0],\n                c = _changes$[1],\n                oldV = _changes$[2],\n                newV = _changes$[3]; //&& !this.state.newRowAdded\n\n\n          if (oldV !== newV) this.columnEvents(r, c, newV);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1043\n      },\n      __self: this\n    }), !this.state.isDataExistsInDB && React.createElement(EmptyDataset, {\n      page: 'matrix',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083\n      },\n      __self: this\n    })), React.createElement(CardFooter, {\n      className: 'text-center',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1087\n      },\n      __self: this\n    }, React.createElement(PaginationMatrix, {\n      activePage: this.state.activePage,\n      itemPerPage: this.state.itemPerPage,\n      totalCountOfData: this.state.totalCountOfData,\n      handlePageChange: this.handlePageChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1088\n      },\n      __self: this\n    }))))), React.createElement(ModalImport, {\n      loadAfterImport: this.dataLoad.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1099\n      },\n      __self: this\n    }), React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1100\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.token,\n    user: state.user,\n    language: state.language,\n    maximize: state.maximize,\n    contentCSS: state.contentCSS,\n    region: state.region,\n    radioSite: state.radioSite,\n    spinnerToggle: state.spinnerToggle\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setEdit: () => dispatch(editOnToggle()),\n    setSpinner: () => dispatch(spinnerToggle())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Matrix);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/views/Matrix.jsx"],"names":["React","createRef","connect","Row","Col","Card","CardBody","CardFooter","HotTable","Handsontable","groupingMap","columnLogic","PaginationMatrix","Header","Sidebar","Toolbar","ModalImport","Spinner","EmptyDataset","editOnToggle","spinnerToggle","confirmAlert","XLSX","saveAs","RestApiModule","AlertModule","Matrix","Component","constructor","props","_isMounted","restApi","alert","hotTableComponent","hot","handsontableData","handsontableDataBackup","errorMessages","errorBoxTitle","columnHeaders","titles","columns","handleColumnHeaders","selectedRowCoords","r","c","editedRowCoords","validatedCell","rowValidation","showHistory","filter","mandatoryColumns","state","isDataExistsInDB","newRowAdded","activePage","itemPerPage","process","env","REACT_APP_MATRIX_ITEM_PER_PAGE","totalCountOfData","exportDataAsExcelFile","hooks","add","componentDidMount","user","mandatoryColumnExtractor","setStateAsync","permittedColumns","role","current","hotInstance","dataLoad","componentWillUnmount","calculatePagination","total","pageCount","dataCountOfSelectedRegion","token","region","radioSite","callApi","then","response","ConnectivityCount","Count","filterChanged","setSpinner","resetSelectedRow","count","toString","page_index","ConnectivityMatrix","exec_status","length","loadData","paginationRowNumbers","getPlugin","revisionRowFilter","catch","err","Promise","resolve","setState","handlePageChange","pageNumber","startPoint","newNumbers","Array","from","_","i","updateSettings","rowHeaders","handleEditClick","dto","prepareDTOforLockMechanism","json","resultLock","console","log","continueToEdit","islock","uname","name","etatRule","ruleExtractor","archivedRule","etatDataAtCell","getDataAtRowProp","archivedDataAtCell","checkEtatValue","isValue","includes","checkArchivedValue","JSON","parse","stringify","setEdit","setCellProperties","language","showMessage","editModeRestrictionTitle","editModeRestriction","showMessageForLockMechanism","handleNewRowClick","duplicate","alter","iterateRevisionRows","handleDuplicateRowClick","data","getDataAtRow","radioSiteColumnIndex","findIndexOfColumn","colCount","countCols","x","setDataAtCell","handleHistoryToggle","handleCancelClick","resultUnlock","cancelEdit","handleSaveClick","saveAction","handleSaveHistoryClick","revision","undefined","reduce","newRowData","item","index","Object","assign","mandatoryColumnsFilled","checkMandatoryColumnsFilled","isRevision","row","isNewRow","result","processed","message","split","join","saveActionSuccessTitle","saveActionFailTitle","title","mandatoryDataTitle","text","mandatoryDataText","replace","validationMessageBoxTitle","validationErrorGeneralMessage","colIndex","arg","removeConditions","addCondition","isDuplicateRow","col","getCellMeta","prop","readOnly","readOnlyInEditMode","writable","indexOf","type","getDataType","setCellMeta","setInitialValueOfColumn","render","selectCell","propName","rowData","checkData","columnId","push","every","map","hasOwnProperty","setDataAtRowProp","initialValue","resetRow","deselectCell","disableMoves","ipValidate","value","callback","pat","test","invalidIP","numericValidate","invalidNumber","validatorClose","closeOnEscape","closeOnClickOutside","customUI","onClose","closeAction","getActiveEditor","beginEditing","headerMap","headerGrouping","colspan","cols","label","editor","validator","setPickList","list","source","headerColoring","TH","TR","parentNode","THEAD","b","childNodes","n","prototype","call","headerLevel","applyClass","elem","className","dom","hasClass","addClass","res","rej","key","pickListName","pickList","error","rc","countRows","cc","instance","td","classList","fullArr","arr","mandatory","find","id","columnEvents","newV","properties","methodCaller","rules","executeRules","paramName","additionalParams","ruleChain","additionalDTO","isExist","propId","ruleChainHandle","changedValue","List","staticRules","parentResponse","parsingKey","columnValue","changedId","propToCol","handleExport","today","Date","todayDate","getFullYear","getMonth","getDate","getHours","getMinutes","ws","utils","json_to_sheet","ExportedExcelAsJSON","wb","Sheets","SheetNames","excelBuffer","write","bookType","Blob","handleLockClick","handleUnlockClick","isExplicit","revisionNumberColumnIndex","revisionNumber","messageForLock","lockMechanism","unlockMechanism","code","time","toLocaleString","shouldComponentUpdate","nextProps","nextState","nextContext","maximize","contentCSS","validationErrorMessages","bind","isValid","amount","changes","oldV","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {createRef} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Row, Col, Card, CardBody, CardFooter} from 'reactstrap';\r\n\r\nimport {HotTable} from '@handsontable/react';\r\nimport Handsontable from 'handsontable';\r\nimport {groupingMap} from '../matrixDataMap';\r\nimport {columnLogic} from '../matrixColumnLogicMap';\r\n\r\nimport PaginationMatrix from \"../components/Pagination\"\r\n\r\nimport Header from '../components/Header'\r\nimport Sidebar from '../components/Sidebar'\r\nimport Toolbar from '../components/ToolbarMatrix'\r\nimport ModalImport from '../components/ModalImport'\r\nimport Spinner from '../components/Spinner'\r\nimport EmptyDataset from '../components/EmptyDataset'\r\n\r\nimport {editOnToggle, spinnerToggle} from \"../redux/actions\";\r\n\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\n\r\n// For export File\r\nimport XLSX from 'xlsx'\r\nimport {saveAs} from 'file-saver';\r\n\r\n// Rest api module import\r\nimport RestApiModule from '../RestApiModule'\r\n\r\n// Alert module\r\nimport AlertModule from '../AlertModule'\r\n\r\nclass Matrix extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.restApi = new RestApiModule();\r\n        this.alert = new AlertModule();\r\n\r\n        this.hotTableComponent = createRef();\r\n        this.hot = null;\r\n        this.handsontableData = null;\r\n        this.handsontableDataBackup = null;\r\n\r\n        this.errorMessages = null;\r\n        this.errorBoxTitle = null;\r\n        this.columnHeaders = [];\r\n        this.titles = [];\r\n        this.columns = [];\r\n        this.handleColumnHeaders();\r\n\r\n        this.selectedRowCoords = {r: null, c: null};\r\n        this.editedRowCoords = {r: null, c: null};\r\n        this.validatedCell = {r: null, c: null};\r\n        this.rowValidation = true;\r\n        this.showHistory = false;\r\n        this.filter = null;\r\n        this.mandatoryColumns = null;\r\n\r\n\r\n        //this.itemPerPage = +process.env.REACT_APP_MATRIX_ITEM_PER_PAGE;\r\n        this.state = {\r\n            isDataExistsInDB: false,\r\n            newRowAdded: false,\r\n            showHistory: false,\r\n            activePage: 1,\r\n            itemPerPage: +process.env.REACT_APP_MATRIX_ITEM_PER_PAGE,\r\n            totalCountOfData: 0,\r\n            exportDataAsExcelFile: null\r\n        };\r\n\r\n        Handsontable.hooks.add('afterSelectionEnd', (r, c) => {\r\n            this.selectedRowCoords.r = r;\r\n            this.selectedRowCoords.c = c;\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n\r\n        if (this.props.user) {\r\n\r\n            // get mandatory columns from map file\r\n            this.mandatoryColumns = this.mandatoryColumnExtractor();\r\n\r\n            this.setStateAsync({permittedColumns: this.props.user.role.permittedColumns});\r\n            this.hot = this.hotTableComponent.current.hotInstance;\r\n\r\n            this.dataLoad();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    calculatePagination(total) {\r\n\r\n        if (total) {\r\n            const pageCount = +total / this.state.itemPerPage;\r\n            this.setStateAsync({totalCountOfData: total, pageCount})\r\n        }\r\n    }\r\n\r\n    dataCountOfSelectedRegion() {\r\n\r\n        const {token, region, radioSite} = this.props;\r\n\r\n        if (region) {\r\n            this.restApi.callApi('getMatrixDataCount', {\r\n                token,\r\n                region,\r\n                radioSite\r\n            }).then(response => {\r\n                this.calculatePagination(response.ConnectivityCount[0].Count)\r\n            })\r\n        }\r\n    }\r\n\r\n    async dataLoad(filterChanged) {\r\n\r\n        if (this._isMounted) {\r\n            const {token, region, radioSite} = this.props;\r\n\r\n            // that means filtered options changed, so we reset the activePage number to 1\r\n            if (filterChanged) {\r\n\r\n                this.setStateAsync({\r\n                    activePage: 1,\r\n                    itemPerPage: (filterChanged === \"radioSite\") ? 100 : +process.env.REACT_APP_MATRIX_ITEM_PER_PAGE\r\n                });\r\n            }\r\n\r\n            if (region) {\r\n                this.props.setSpinner();\r\n\r\n                // get count of data\r\n                await this.dataCountOfSelectedRegion()\r\n\r\n                //reset selected row data\r\n                this.resetSelectedRow()\r\n\r\n                this.restApi.callApi('getMatrixData', {\r\n                    token,\r\n                    region,\r\n                    radioSite,\r\n                    count: this.state.itemPerPage.toString(),\r\n                    page_index: this.state.activePage.toString()\r\n                }).then(async (response) => {\r\n                    //console.log(response)\r\n\r\n                    // mock test\r\n                    //response.exec_status = \"error\";\r\n\r\n                    const {ConnectivityMatrix, exec_status} = response;\r\n\r\n                    // If data doesnt exist in EAI DB we should set a flag to manage toolbar actions\r\n                    if (exec_status === \"success\" &&\r\n                        ConnectivityMatrix.length > 0) {\r\n\r\n                        this.setStateAsync({isDataExistsInDB: true});\r\n\r\n                        this.handsontableData = ConnectivityMatrix; // store the copy of data\r\n                        this.hot.loadData(this.handsontableData);\r\n\r\n                        this.paginationRowNumbers();\r\n\r\n                        /* Filter for show active rows only*/\r\n                        this.filter = this.hot.getPlugin('filters');\r\n\r\n                        await this.revisionRowFilter();\r\n\r\n                    } else {\r\n\r\n                        this.setStateAsync({isDataExistsInDB: false});\r\n                    }\r\n\r\n                    // remove spinner from screen\r\n                    this.props.setSpinner();\r\n\r\n                }).catch(err => {\r\n                    // err state. If need we can give message to user.\r\n                    // Error handling is managed by RestApiModule.\r\n                    // We don't need to do extra development in here\r\n\r\n                    // Somehow if this block executed, we can only change the flag to false.\r\n                    this.setStateAsync({isDataExistsInDB: false});\r\n\r\n                    // remove spinner from screen\r\n                    this.props.setSpinner();\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    setStateAsync(state) {\r\n        return new Promise((resolve) => {\r\n            this.setState(state, resolve)\r\n        });\r\n    }\r\n\r\n    async handlePageChange(pageNumber) {\r\n        //console.log(pageNumber);\r\n        // TODO: call api to retrieve data for matrix page\r\n        // data will provided by page number\r\n        await this.setStateAsync({activePage: pageNumber});\r\n        this.dataLoad();\r\n    }\r\n\r\n    paginationRowNumbers() {\r\n        // break the handsontable row headers mechanism to show to user exact row numbers while paginating\r\n        const {activePage, itemPerPage} = this.state;\r\n\r\n        const startPoint =((activePage - 1) * itemPerPage) + 1;\r\n        const newNumbers = Array.from(Array(itemPerPage), (_, i) => startPoint + i)\r\n\r\n        this.hot.updateSettings({\r\n            rowHeaders: newNumbers\r\n        })\r\n    }\r\n\r\n    // click event handle for edit button\r\n    handleEditClick() {\r\n\r\n        const {r, c} = this.selectedRowCoords;\r\n        if (r === null && c === null) return;\r\n\r\n        // Lock mechanism controls\r\n        const dto = this.prepareDTOforLockMechanism(r, false);\r\n\r\n        this.restApi.callApi('lock', dto).then(response => {\r\n            const json = response.resultLock;\r\n            const {user} = this.props;\r\n\r\n            console.log(json);\r\n\r\n            // can I continue to edit ?\r\n            const continueToEdit = json.islock && json.uname === user.name;\r\n\r\n            if (continueToEdit) {\r\n\r\n                const etatRule = this.ruleExtractor(\"etatCheckValue\");\r\n                const archivedRule = this.ruleExtractor(\"archivedCheckValue\");\r\n                const etatDataAtCell = this.hot.getDataAtRowProp(r, \"etat\");\r\n                const archivedDataAtCell = this.hot.getDataAtRowProp(r, \"archived\");\r\n\r\n                const checkEtatValue = etatRule.isValue.includes(etatDataAtCell)\r\n                const checkArchivedValue = archivedRule.isValue.includes(archivedDataAtCell)\r\n\r\n                if (checkEtatValue && checkArchivedValue) {\r\n\r\n                    // create backup data before editing;\r\n                    this.handsontableDataBackup = JSON.parse(JSON.stringify(this.handsontableData));\r\n\r\n                    // Change edit mode on redux\r\n                    this.props.setEdit();\r\n\r\n                    this.setCellProperties(r, c);\r\n                    this.editedRowCoords.r = r;\r\n                    this.editedRowCoords.c = c;\r\n                } else {\r\n\r\n                    const {language} = this.props;\r\n                    this.alert.showMessage(\"warning\",\r\n                        language.editModeRestrictionTitle,\r\n                        language.editModeRestriction,\r\n                        false);\r\n                }\r\n            } else {\r\n                this.showMessageForLockMechanism(true, json)\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    // click handle for add new row\r\n    async handleNewRowClick(duplicate = false) {\r\n\r\n        await this.setStateAsync({newRowAdded : true});\r\n        this.editedRowCoords.r = 0;\r\n        this.editedRowCoords.c = 0;\r\n\r\n        // create backup data before editing;\r\n        this.handsontableDataBackup = JSON.parse(JSON.stringify(this.handsontableData));\r\n\r\n        this.props.setEdit();\r\n        this.hot.alter('insert_row', 0, 1);\r\n        this.setCellProperties(0, null, duplicate);\r\n\r\n        if (this.state.showHistory)\r\n            this.iterateRevisionRows();\r\n    }\r\n\r\n    async handleDuplicateRowClick() {\r\n\r\n        const {r, c} = this.selectedRowCoords;\r\n        if (r === null && c === null) return;\r\n\r\n        await this.handleNewRowClick(true);\r\n\r\n        // get existing data at row\r\n        const data = this.hot.getDataAtRow(r);\r\n\r\n        // find radio Site column for special case. we need empty radio site for duplicated row\r\n        const radioSiteColumnIndex = this.findIndexOfColumn(0,'radioSite');\r\n\r\n        // get column count for iteration\r\n        const colCount = this.hot.countCols();\r\n\r\n        // iterate the columns\r\n        for (let x = 0; x <= colCount; x++) {\r\n\r\n            // if column is radio site, pass it\r\n            if (x === radioSiteColumnIndex) continue;\r\n\r\n            // set data\r\n            this.hot.setDataAtCell(0, x, data[x])\r\n        }\r\n    }\r\n\r\n    // history toggle finished\r\n    async handleHistoryToggle() {\r\n\r\n        await this.setStateAsync({showHistory: !this.state.showHistory})\r\n        await this.revisionRowFilter();\r\n    }\r\n\r\n    handleCancelClick() {\r\n        this.setStateAsync({newRowAdded : false}).then(() => {\r\n\r\n            const {r, c} = this.selectedRowCoords;\r\n            if (r === null && c === null) return;\r\n\r\n            // Lock mechanism controls\r\n            const dto = this.prepareDTOforLockMechanism(r, false);\r\n\r\n            // In all circumstances call implicit unlock\r\n            this.restApi.callApi('unlock', dto).then(response => {\r\n                console.log(response);\r\n                this.showMessageForLockMechanism(false, response.resultUnlock)\r\n\r\n            })\r\n\r\n            this.cancelEdit();\r\n        });\r\n    }\r\n\r\n    handleSaveClick() {\r\n        this.saveAction();\r\n    }\r\n\r\n    handleSaveHistoryClick() {\r\n        this.saveAction(true)\r\n    }\r\n\r\n    // save action for row edited or new\r\n    saveAction(revision) {\r\n\r\n        const {language} = this.props;\r\n\r\n        if (this.rowValidation) {\r\n\r\n            const {r, c} = this.editedRowCoords;\r\n            const {token} = this.props;\r\n\r\n            if (r !== null || r !== undefined) {\r\n                // data would send to API\r\n                let data = this.hot.getDataAtRow(r);\r\n\r\n                data = this.columns.reduce((newRowData, item, index) => {\r\n\r\n                    Object.assign(newRowData,\r\n                        (data[index] !== null)\r\n                            ? {[item.data]: data[index]}\r\n                            : {[item.data]: \"\"}\r\n                    );\r\n                    return newRowData;\r\n                }, {});\r\n\r\n                const mandatoryColumnsFilled = this.checkMandatoryColumnsFilled(data);\r\n\r\n                if (mandatoryColumnsFilled) {\r\n\r\n                    let isRevision = false;\r\n                    if (revision) {\r\n                       isRevision = revision\r\n                    }\r\n\r\n                    // Call backend to save row\r\n                    this.restApi.callApi(\"saveRow\", {\r\n                        token,\r\n                        row: data,\r\n                        isNewRow: this.state.newRowAdded,\r\n                        isRevision\r\n                    }).then(response => {\r\n\r\n                        const {processed, log} = response.result;\r\n\r\n                        const message = log.split('\\n').join('<br>');\r\n                        if (processed) {\r\n                            this.alert.showMessage(\"success\",\r\n                                language.saveActionSuccessTitle,\r\n                                message,\r\n                                false\r\n                            )\r\n\r\n\r\n                            this.selectedRowCoords.c = c;\r\n                            this.selectedRowCoords.r = r;\r\n                            this.editedRowCoords.r = null;\r\n                            this.editedRowCoords.c = null;\r\n\r\n                            // Change edit mode on redux\r\n                            this.props.setEdit();\r\n                            // Reset new row state if its true\r\n                            if (this.state.newRowAdded)\r\n                                this.setState({ newRowAdded : false});\r\n\r\n                            this.dataLoad();\r\n\r\n                        } else {\r\n                            this.alert.showMessage(\"error\",\r\n                                language.saveActionFailTitle,\r\n                                message,\r\n                                false\r\n                            )\r\n                        }\r\n                    })\r\n                } else {\r\n\r\n                    const title = language.mandatoryDataTitle;\r\n                    let text = language.mandatoryDataText;\r\n\r\n                    text = text.replace(\"{columns}\", this.mandatoryColumns.join(',<br>'));\r\n\r\n                    this.alert.showMessage(\"error\", title, text, false);\r\n                }\r\n            }\r\n\r\n        } else {\r\n\r\n            const {language} = this.props;\r\n            this.alert.showMessage(\"error\",\r\n                language.validationMessageBoxTitle,\r\n                language.validationErrorGeneralMessage,\r\n                false)\r\n        }\r\n    }\r\n\r\n    async revisionRowFilter() {\r\n        if (this._isMounted) {\r\n            const colIndex = this.findIndexOfColumn(0,'archived');\r\n\r\n            const arg = this.state.showHistory ? '' : 'NO'; // this param is for filtering on handsontable\r\n\r\n            if (this.state.showHistory) {\r\n                this.filter.removeConditions(colIndex);\r\n            } else {\r\n                this.filter.addCondition(colIndex, 'contains', arg);\r\n            }\r\n            await this.filter.filter();\r\n\r\n            // Makeup for revisioned rows.\r\n            await this.iterateRevisionRows();\r\n        }\r\n    }\r\n\r\n    setCellProperties(r, c, isDuplicateRow) {\r\n\r\n        const colCount = this.hot.countCols();\r\n        let col = c !== null ? c : 0;\r\n\r\n        for (let x = 0; x <= colCount; x++) {\r\n            const {prop, readOnly, readOnlyInEditMode} = this.hot.getCellMeta(r,x);\r\n\r\n            if (typeof prop !== \"string\") continue\r\n\r\n            // if prop has got readyOnly attribute with value \"true\", write permission will restricted\r\n            // if prop hasn't got readOnly attribute it would be false by default. So we need to check if\r\n            // this action is adding new row or editing existing row.\r\n            // if action is editing a row then we should check readOnlyInEditMode attribute of prop.\r\n            // if it's exist we should get opposite value because if we add this attribute to prop it value should be \"true\"\r\n            // it means this property can not be writable in edit mode\r\n            // if readOnlyInEditMode attribute is not exist in prop there isn't extra attribute checking for this cell\r\n            // can be writable or not. So we can put \"true\" value to associated variable.\r\n            const writable = readOnly ? !readOnly : !this.state.newRowAdded ? !readOnlyInEditMode : !readOnly;\r\n\r\n            if (writable) {\r\n                if (this.state.permittedColumns.indexOf(prop) >= 0) {\r\n\r\n                    const type = this.hot.getDataType(r, x); // get cell type from loaded map\r\n\r\n                    // this 2 row for initiate the rules on editing row.\r\n                    //const value = this.hot.getDataAtCell(r, x);\r\n                    //this.columnEvents(r, prop, value);\r\n\r\n                    col = col === 0 ? x : col; // when add new row find first editable col.\r\n\r\n                    this.hot.setCellMeta(r, x, \"editor\", type);\r\n                    this.hot.setCellMeta(r, x, \"className\", 'bg-warning text-dark');\r\n                }\r\n            }\r\n        }\r\n        // set initial value for newly adding rows\r\n        if (this.state.newRowAdded && !isDuplicateRow) {\r\n            this.setInitialValueOfColumn();\r\n        }\r\n\r\n\r\n        this.hot.render();\r\n        this.hot.selectCell(r, col);\r\n    }\r\n\r\n    findIndexOfColumn(r, propName) {\r\n        const colCount = this.hot.countCols();\r\n        for (let c = 0; c <= colCount; c++) {\r\n            const {prop} = this.hot.getCellMeta(r,c);\r\n            if (prop === propName) {\r\n                return c;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Before save action mandatory columns are must be filled\r\n    checkMandatoryColumnsFilled(rowData) {\r\n\r\n        const checkData = this.mandatoryColumns.reduce((data, columnId) => {\r\n            data.push(rowData[columnId]);\r\n            return data;\r\n        }, []);\r\n\r\n        return checkData.every(data => {\r\n            return data !== undefined && data !== \"\" && data !== null\r\n        })\r\n    }\r\n\r\n    // Finished initial value setter\r\n    setInitialValueOfColumn() {\r\n        this.columns.map((item) => {\r\n            if (item.hasOwnProperty('initialValue')) {\r\n                this.hot.setDataAtRowProp(0, item.data, item.initialValue)\r\n            }\r\n            return true;\r\n        })\r\n    }\r\n\r\n    // Finished, cancel edit return back to last backup data\r\n    cancelEdit() {\r\n        this.handsontableData = JSON.parse(JSON.stringify(this.handsontableDataBackup));\r\n        this.hot.loadData(this.handsontableData);\r\n        this.hot.render();\r\n\r\n        // Change edit mode on redux\r\n        this.props.setEdit();\r\n\r\n        if (this.state.showHistory)\r\n            this.iterateRevisionRows();\r\n    }\r\n\r\n    // reset row finished\r\n    resetRow(r) {\r\n        const colCount = this.hot.countCols();\r\n        for (let x = 0; x <= colCount; x++) {\r\n\r\n            this.hot.setCellMeta(r, x, \"editor\", false);\r\n            this.hot.setCellMeta(r, x, \"className\", 'bg-primary text-white');\r\n        }\r\n        this.hot.render();\r\n        this.setState({ newRowAdded : false});\r\n    }\r\n\r\n    // reset seleted rows for some reason such as change region, change active page\r\n    resetSelectedRow() {\r\n\r\n        this.selectedRowCoords.r = null\r\n        this.selectedRowCoords.c = null\r\n        this.editedRowCoords.r = null\r\n        this.editedRowCoords.c = null\r\n        this.validatedCell.r = null\r\n        this.validatedCell.c = null\r\n\r\n        this.hot.deselectCell();\r\n    }\r\n\r\n    // disable moves finished\r\n    disableMoves() {\r\n        return false;\r\n    }\r\n\r\n    // Finished ip validation rule\r\n    ipValidate(value, callback) {\r\n\r\n        const pat = /^(?:\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b|null)$/;\r\n\r\n        this.rowValidation = pat.test(value);\r\n        callback(this.rowValidation);\r\n        if (!this.rowValidation)\r\n            this.showMessage(this.errorBoxTitle, this.errorMessages.invalidIP, true);\r\n    }\r\n\r\n    // Finished numeric value validation\r\n    numericValidate(value, callback) {\r\n\r\n        const pat = /^\\d+$/;\r\n\r\n        this.rowValidation = pat.test(value);\r\n        callback(this.rowValidation);\r\n        if (!this.rowValidation)\r\n            this.showMessage(this.errorBoxTitle, this.errorMessages.invalidNumber, true);\r\n    }\r\n\r\n    // Finished validation message box\r\n    showMessage(title, message, validatorClose) {\r\n        confirmAlert({\r\n            title: 'Validation Warning',\r\n            message: message,\r\n            closeOnEscape: false,\r\n            closeOnClickOutside: false,\r\n            customUI: ({ onClose }) => {\r\n\r\n                const closeAction = () => {\r\n                    if (validatorClose) {\r\n                        this.hot.selectCell(this.validatedCell.r, this.validatedCell.c);\r\n                        if (this.hot.getActiveEditor() !== undefined)\r\n                            this.hot.getActiveEditor().beginEditing();\r\n                        onClose();\r\n\r\n                    } else {\r\n                        this.cancelEdit();\r\n                        onClose();\r\n                    }\r\n                }\r\n                return (\r\n                    <div className=\"card\">\r\n                        <div className=\"card-header\">\r\n                            {title}\r\n\r\n                            <button type=\"button\" className=\"close\"\r\n                                    onClick={closeAction}\r\n                                    aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                            <div className={'card-text text-danger'}>{message}</div>\r\n                        </div>\r\n                        <div className=\"card-footer\">\r\n                            <button className={'btn btn-warning'} onClick={closeAction}>\r\n                                Ok\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    // Finished column header groups\r\n    handleColumnHeaders() {\r\n\r\n        // Create a copy of map file\r\n        const headerMap = JSON.parse(JSON.stringify(groupingMap));\r\n\r\n        // Set the header groups for table\r\n        const headerGrouping = headerMap.filter((item) => {\r\n            item.colspan = item.columns.length;\r\n            return typeof item.columns === \"object\"\r\n        })\r\n\r\n        // set each and every column defaults\r\n        const cols = headerMap.map((item) => {\r\n\r\n            return item.columns.map(c => {\r\n\r\n                this.titles.push(c.label);\r\n\r\n                c.editor = false; // default readonly\r\n\r\n                if (typeof c.validator !== \"undefined\") {\r\n\r\n                    if (c.validator === 'ipValidator') {\r\n                        c.validator = (value, callback) => {\r\n                            this.ipValidate(value, callback)\r\n                        }\r\n                    }\r\n\r\n                    if (c.validator === 'isNumeric') {\r\n                        c.validator = (value, callback) => {\r\n                            this.numericValidate(value, callback)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (typeof c.type !== \"undefined\") {\r\n                    if (c.type === 'dropdown') {\r\n                        this.setPickList(c.data).then((list) => {\r\n                            c.source = list;\r\n                        });\r\n                    }\r\n                }\r\n                return c;\r\n            });\r\n        })\r\n\r\n        // spread the columns into single object\r\n        cols.map((c) => {\r\n            this.columns = [...this.columns, ...c];\r\n        })\r\n\r\n        // Pushing header group const to related vars\r\n        this.columnHeaders.push(headerGrouping);\r\n        this.columnHeaders.push(this.titles);\r\n    }\r\n\r\n    // Finished colouring header\r\n    headerColoring(col, TH) {\r\n\r\n        const TR = TH.parentNode;\r\n        const THEAD = TR.parentNode;\r\n\r\n        const b = THEAD.childNodes.length;\r\n        const n = Array.prototype.indexOf.call(THEAD.childNodes, TR);\r\n        const headerLevel = (-1) * b + n;\r\n\r\n        function applyClass(elem, className) {\r\n            if (!Handsontable.dom.hasClass(elem, className))\r\n                Handsontable.dom.addClass(elem, className);\r\n        }\r\n\r\n        if (headerLevel === -1 || headerLevel === -2) {\r\n\r\n            if (col >=0 && col <= 11) applyClass(TH, 'color1');\r\n            if (col === 12) applyClass(TH, 'color2');\r\n            if (col >=13 && col <= 20) applyClass(TH, 'color3');\r\n            if (col >=21 && col <= 27) applyClass(TH, 'color4');\r\n            if (col >=28 && col <= 30) applyClass(TH, 'color5');\r\n            if (col >=31 && col <= 34) applyClass(TH, 'color6');\r\n            if (col >=35 && col <= 43) applyClass(TH, 'color7');\r\n            if (col >=44 && col <= 46) applyClass(TH, 'color8');\r\n            if (col >=47 && col <= 50) applyClass(TH, 'color9');\r\n        }\r\n    }\r\n\r\n    // Finished pick list setter function\r\n    setPickList(name) {\r\n        return new Promise ((res, rej) => {\r\n\r\n            const value = `${name}Picklist_value`;\r\n            const key = `${name}Picklist`;\r\n\r\n            this.restApi.callApi('getPickList', {\r\n                token: this.props.token,\r\n                pickListName: key\r\n\r\n            }).then((response) => {\r\n\r\n                if (response.pickList.length > 0) {\r\n                     const list = response.pickList.map((item) => {\r\n                        return item[value];\r\n                    })\r\n                    res(list)\r\n                }\r\n            }).catch((error) => {\r\n                console.log(error)\r\n            });\r\n        })\r\n    }\r\n\r\n    // Finished revision row makeup\r\n    iterateRevisionRows() {\r\n\r\n        const rc = this.hot.countRows();\r\n        const cc = this.hot.countCols();\r\n\r\n        for (let r = 0; r <= rc; r++) {\r\n            const value = this.hot.getDataAtRowProp(r, 'archived');\r\n            if (value === 'YES' || value === \"Yes\" || value === \"yes\") {\r\n                for (let c = 0; c <= cc; c++) {\r\n                    this.hot.setCellMeta(r, c, 'renderer', (instance, td) => {\r\n\r\n                        const {showHistory} = this.state;\r\n                        if (showHistory)\r\n                            td.classList.add('revision-row');\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        this.hot.render();\r\n    }\r\n\r\n    // Read the rule from imported rule file\r\n    mandatoryColumnExtractor() {\r\n        return groupingMap.reduce((fullArr, item) => {\r\n            const cols = item.columns.reduce((arr, col) => {\r\n                if (col.mandatory) arr.push(col.data)\r\n                return arr;\r\n            }, []);\r\n            return [...fullArr, ...cols]\r\n        }, [])\r\n    }\r\n\r\n    // Read the rule from imported rule file\r\n    ruleExtractor(columnId) {\r\n        return columnLogic.find((item) => {\r\n            return item.id === columnId;\r\n        })\r\n    }\r\n\r\n    // Generic attributes validations and rule runner\r\n    async columnEvents(r, c, newV) {\r\n\r\n        this.validatedCell.r = r;\r\n        this.validatedCell.c = c;\r\n\r\n        const properties = this.ruleExtractor(c);\r\n        if (properties) {\r\n            const {methodCaller, rules, executeRules, paramName, additionalParams, ruleChain} = properties;\r\n\r\n            if (methodCaller) {\r\n                // we understand that this logic needs to call api\r\n\r\n                // default dto\r\n                let dto = {\r\n                    token: this.props.token,\r\n                    [paramName]: this.hot.getDataAtRowProp(r, c)\r\n                };\r\n\r\n                if (typeof additionalParams !== 'undefined' &&\r\n                    typeof additionalParams === 'object') {\r\n\r\n                    // create addition parameter to bind exact one\r\n                    const additionalDTO = additionalParams.map((prop) => {\r\n                        return {[prop]: this.hot.getDataAtRowProp(r, prop)}\r\n                    });\r\n\r\n                    // dto with additional parameters\r\n                    dto = Object.assign({}, dto, ...additionalDTO);\r\n                }\r\n\r\n                // method caller and logic execution\r\n                //await this.genericCL(methodCaller, dto);\r\n                this.restApi.callApi(methodCaller, dto).then((response) => {\r\n\r\n                    if (typeof response.isExist !== 'undefined') {\r\n\r\n                        if (!response.isExist) {\r\n                            // value is not exist in DB, show message\r\n                            this.showMessage(this.errorBoxTitle, this.errorMessages[c], true);\r\n                            return false;\r\n\r\n                        } else {\r\n                            // value is exist in DB, check other rules associated with that one\r\n                            if (executeRules && executeRules.length > 0) {\r\n                                executeRules.map(props => {\r\n\r\n                                    const {propId} = props;\r\n                                    const data = this.hot.getDataAtRowProp(r, propId)\r\n\r\n                                    this.columnEvents(r, propId, data)\r\n                                })\r\n                            }\r\n                        }\r\n\r\n                        if (ruleChain && ruleChain.length > 0) {\r\n                            this.ruleChainHandle(ruleChain, dto, r)\r\n                        }\r\n                    } else {\r\n                        rules[0].changedValue = response.List.map(i => {return i.value})\r\n                        this.staticRules(r, null, rules);\r\n                    }\r\n                })\r\n\r\n            } else {\r\n                this.staticRules(r, newV, rules)\r\n            }\r\n        }\r\n    }\r\n\r\n    ruleChainHandle(ruleChain, dto, r) {\r\n\r\n        ruleChain.map(item => {\r\n            if (item.parentResponse) {\r\n                this.restApi.callApi(item.methodCaller, dto).then(response => {\r\n                    const { exec_status } = response;\r\n                    const value = response[item.parsingKey]\r\n                    if (exec_status === \"success\") {\r\n                        this.staticRules(r, value, item.rules)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    staticRules(r, value, rules) {\r\n        if (rules) {\r\n            rules.map((item) => {\r\n                if (item.columnValue && value) {\r\n                    if (item.columnValue === value) {\r\n                        // status changes\r\n                        this.hot.setDataAtRowProp(r, item.changedId, item.changedValue);\r\n                    }\r\n                } else if (!item.columnValue && value) {\r\n\r\n                    this.hot.setDataAtRowProp(r, item.changedId, value);\r\n\r\n                } else {\r\n                    this.hot.setCellMeta(r, this.hot.propToCol(item.changedId), 'source', item.changedValue);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    handleExport() {\r\n        const {token, region} = this.props;\r\n\r\n        this.restApi.callApi('exportData', {\r\n            region,\r\n            token\r\n        }).then(response => {\r\n            const today = new Date();\r\n            //const todayDate =  '_' + today.getDate() +  (today.toLocaleString('default', { month: 'long' })) + today.getFullYear();\r\n\r\n            const todayDate = '_' + today.getFullYear() + '-' + (today.getMonth()+1) + '-' + today.getDate() + 'T' + today.getHours() + '.' + today.getMinutes()\r\n\r\n            const ws = XLSX.utils.json_to_sheet(response.ExportedExcelAsJSON);\r\n            const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n            const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n            const data = new Blob([excelBuffer], {type: 'xlsx'});\r\n\r\n           // saveAs(data, `DataMatrix${todayDate}.xlsx`);\r\n            saveAs(data, `Exported_RANConn${todayDate}.xlsx`);\r\n        }).catch((error) => {\r\n            console.log(error)\r\n        });\r\n    }\r\n\r\n    handleLockClick() {\r\n\r\n        const {r} = this.selectedRowCoords;\r\n        if (r === null) return;\r\n\r\n        const dto = this.prepareDTOforLockMechanism(r,true);\r\n\r\n        this.restApi.callApi('lock', dto).then(response => {\r\n\r\n            this.showMessageForLockMechanism(true, response.resultLock);\r\n\r\n        })\r\n    }\r\n\r\n    handleUnlockClick() {\r\n        const {r} = this.selectedRowCoords;\r\n        if (r === null) return;\r\n\r\n        const dto = this.prepareDTOforLockMechanism(r,true);\r\n\r\n        this.restApi.callApi('unlock', dto).then(response => {\r\n\r\n            this.showMessageForLockMechanism(false, response.resultUnlock)\r\n        })\r\n\r\n    }\r\n\r\n    prepareDTOforLockMechanism(r, isExplicit) {\r\n        const {token} = this.props;\r\n\r\n        // get existing data at row\r\n        const data = this.hot.getDataAtRow(r);\r\n        const radioSiteColumnIndex = this.findIndexOfColumn(0,'radioSite');\r\n        const revisionNumberColumnIndex = this.findIndexOfColumn(0,'revisionNumber');\r\n\r\n        const radioSite = data[radioSiteColumnIndex].toString();\r\n        const revisionNumber = data[revisionNumberColumnIndex].toString();\r\n\r\n\r\n        return {\r\n            token,\r\n            radioSite,\r\n            revisionNumber,\r\n            isExplicit\r\n        }\r\n    }\r\n\r\n    showMessageForLockMechanism(messageForLock, result) {\r\n\r\n        const {lockMechanism, unlockMechanism} = this.props.language;\r\n\r\n        let message = messageForLock ? lockMechanism[result.code.toString()] : unlockMechanism[result.code.toString()]\r\n\r\n        message = message\r\n            ? message.replace(\"{uname}\", result.uname).replace(\"{time}\", new Date(result.time).toLocaleString())\r\n            : \"Undefined\";\r\n\r\n        this.alert.showMessage('info', unlockMechanism.title, message, false);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        return nextState.isDataExistsInDB !== this.state.isDataExistsInDB ||\r\n            nextState.activePage !== this.state.activePage ||\r\n            nextState.totalCountOfData !== this.state.totalCountOfData ||\r\n            nextState.newRowAdded !== this.state.newRowAdded ||\r\n            nextState.maximize !== this.props.maximize\r\n    }\r\n\r\n    render() {\r\n        const {maximize, language, contentCSS} = this.props;\r\n\r\n        if (language) {\r\n            this.errorBoxTitle = language.validationMessageBoxTitle;\r\n            this.errorMessages = language.validationErrorMessages;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Header/>\r\n                <Row className=\"h-100\">\r\n                    <Sidebar maximize={maximize}/>\r\n                    <Col className={contentCSS}>\r\n                        <Toolbar\r\n                            wrapper={'toolbar mt-2'}\r\n                            isDataExist={this.state.isDataExistsInDB}\r\n                            newRowAdded={this.state.newRowAdded}\r\n                            export={this.handleExport.bind(this)}\r\n                            lock={this.handleLockClick.bind(this)}\r\n                            unlock={this.handleUnlockClick.bind(this)}\r\n                            new={this.handleNewRowClick.bind(this)}\r\n                            duplicate={this.handleDuplicateRowClick.bind(this)}\r\n                            edit={this.handleEditClick.bind(this)}\r\n                            cancel={this.handleCancelClick.bind(this)}\r\n                            save={this.handleSaveClick.bind(this)}\r\n                            save-history={this.handleSaveHistoryClick.bind(this)}\r\n                            history={this.handleHistoryToggle.bind(this)}\r\n                            handleRegionChange={this.dataLoad.bind(this)}\r\n                            handleRadioSiteChange={this.dataLoad.bind(this)}\r\n                        />\r\n\r\n                        <Card className={'mt-1 fixedCard'}>\r\n                            <CardBody>\r\n                                <HotTable ref={this.hotTableComponent} id={'hot'}\r\n                                  licenseKey={'non-commercial-and-evaluation'}\r\n                                  nestedHeaders={this.columnHeaders}\r\n                                  columns={this.columns}\r\n                                  stretchH={'all'}\r\n                                  dropdownMenu={true}\r\n                                  filters={true}\r\n                                  manualColumnResize={true}\r\n                                  width={'100%'}\r\n                                  height={'100%'}\r\n                                  fixedColumnsLeft={0}\r\n                                  columnSorting={true}\r\n                                  currentRowClassName={['bg-primary', 'text-white']}\r\n                                  enterBeginsEditing={false}\r\n                                  outsideClickDeselects={false}\r\n                                  enterMoves={this.disableMoves()}\r\n                                  fillHandle={this.disableMoves()}\r\n                                  afterValidate={(isValid, value, row, prop) => {\r\n                                      // this is check dropdown values are proper or not.\r\n                                      this.validatedCell.r = row;\r\n                                      this.validatedCell.c = prop;\r\n                                  }}\r\n                                  afterGetColHeader={(col, TH) => {\r\n                                      this.headerColoring(col, TH)\r\n                                  }}\r\n                                  afterCreateRow={(index, amount, source) => {\r\n                                      //console.log(index, amount, source)\r\n                                  }}\r\n                                  afterChange={(changes) => {\r\n                                      // TODO: check esc button when its clicked\r\n                                      if (changes) {\r\n                                          const [r, c, oldV, newV] = changes[0];\r\n                                          //&& !this.state.newRowAdded\r\n                                          if (oldV !== newV)\r\n                                            this.columnEvents(r, c, newV);\r\n                                      }\r\n                                  }}\r\n                                />\r\n\r\n                                {!this.state.isDataExistsInDB &&\r\n                                    <EmptyDataset page={'matrix'}/>\r\n                                }\r\n                            </CardBody>\r\n\r\n                            <CardFooter className={'text-center'}>\r\n                                <PaginationMatrix\r\n                                    activePage={this.state.activePage}\r\n                                    itemPerPage={this.state.itemPerPage}\r\n                                    totalCountOfData={this.state.totalCountOfData}\r\n                                    handlePageChange={this.handlePageChange.bind(this)}\r\n                                />\r\n                            </CardFooter>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <ModalImport loadAfterImport={this.dataLoad.bind(this)}/>\r\n                <Spinner/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        user: state.user,\r\n        language: state.language,\r\n        maximize: state.maximize,\r\n        contentCSS: state.contentCSS,\r\n        region: state.region,\r\n        radioSite: state.radioSite,\r\n        spinnerToggle: state.spinnerToggle\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setEdit: () => dispatch(editOnToggle()),\r\n        setSpinner: () => dispatch(spinnerToggle()),\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Matrix);"]},"metadata":{},"sourceType":"module"}