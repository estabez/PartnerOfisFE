{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\components\\\\ModalImport.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { modalImportToggle, spinnerToggle } from \"../redux/actions\";\nimport FileUploadProgress from 'react-fileupload-progress';\nimport XLSX from \"xlsx\";\nimport { make_cols } from \"./MakeColumns\";\nimport { SheetJSFT } from './types';\nimport { groupingMap } from '../matrixDataMap';\nimport RestApiModule from '../RestApiModule';\nimport { Row, Col, Card, CardBody, CardTitle, CardText, CardHeader, CardFooter, Alert, Button } from 'reactstrap';\nimport { saveAs } from 'file-saver';\n\nclass ModalImportTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: null,\n      data: [],\n      cols: [],\n      fileJSON: {},\n      isExcelHeadersValid: null,\n      uploadProgress: 0,\n      showButton1: true,\n      showButton2: false,\n      showButton3: false\n    };\n    const _process$env = process.env,\n          REACT_APP_API_GATEWAY = _process$env.REACT_APP_API_GATEWAY,\n          REACT_APP_MATRIX_SERVICE = _process$env.REACT_APP_MATRIX_SERVICE;\n    this.uploadFileUrl = `${REACT_APP_API_GATEWAY}${REACT_APP_MATRIX_SERVICE}/ImportDataMatrixFromExcel`;\n    this.restApi = new RestApiModule();\n    this.fileInput = React.createRef();\n    this.styleBar = {\n      width: 0\n    };\n  }\n\n  handleSelectFile(e) {\n    const files = e.target.files;\n    const JSONOb = {\n      \"importResult\": [{\n        \"log\": \"sss\",\n        \"errorcount\": 1,\n        \"succsseful_row_count\": 78,\n        \"total_row_processed\": 79\n      }],\n      \"exec_status\": \"success\"\n    };\n    const test = JSON.parse(JSON.stringify(JSONOb));\n    console.log(test);\n    console.log(test.importResult);\n    console.log(test.importResult[0]);\n    if (files && files[0]) this.setState({\n      file: files[0],\n      showButton2: true\n    });\n  }\n\n  handleFile() {\n    /* Boilerplate to set up FileReader */\n    this.props.setSpinner();\n\n    try {\n      const reader = new FileReader();\n      const rABS = !!reader.readAsBinaryString;\n\n      reader.onload = e => {\n        /* Parse data */\n        const bstr = e.target.result;\n        const wb = XLSX.read(bstr, {\n          type: rABS ? 'binary' : 'array',\n          bookVBA: true,\n          sheetRows: 0\n        });\n        /* Get first worksheet */\n\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n\n        const data = XLSX.utils.sheet_to_json(ws, {\n          header: 1,\n          defval: \"\"\n        });\n        /* Update state */\n\n        this.setState({\n          data: data,\n          cols: make_cols(ws['!ref'])\n        }, () => {\n          this.state.fileJSON = JSON.stringify(this.state.data, null, 2);\n          this.handleJSONHeaders();\n        });\n        this.props.setSpinner();\n      };\n\n      if (rABS) {\n        reader.readAsBinaryString(this.state.file);\n      } else {\n        reader.readAsArrayBuffer(this.state.file);\n      }\n    } catch (e) {\n      this.setState({\n        showButton3: false\n      });\n      this.props.setSpinner();\n    }\n  }\n\n  handleJSONHeaders() {\n    const headerMap = JSON.parse(JSON.stringify(groupingMap));\n    const excelHeadersArray = JSON.parse(this.state.fileJSON)[1];\n    const columnsMap = headerMap.reduce((fullArr, item) => {\n      const cols = item.columns.reduce((arr, col) => {\n        if (col.id !== undefined) arr.push(col.id);\n        return arr;\n      }, []);\n      return [...fullArr, ...cols];\n    }, []);\n    const isSame = JSON.stringify(excelHeadersArray) === JSON.stringify(columnsMap);\n    this.setState({\n      isExcelHeadersValid: isSame,\n      showButton3: isSame,\n      showButton2: !isSame\n    });\n  }\n\n  handleTxtReport() {\n    var blob = new Blob([\"Hello, world!\"], {\n      type: \"text/plain;charset=utf-8\"\n    });\n    saveAs(blob, \"Import Report.txt\");\n  }\n\n  toggle() {\n    this.setState({\n      file: null,\n      isExcelHeadersValid: null,\n      showButton2: false,\n      showButton3: false\n    });\n    this.props.setModalImport();\n  }\n\n  customFormRenderer(onSubmit) {\n    const language = this.props.language;\n    return React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: 'success',\n      size: \"lg\",\n      block: true,\n      hidden: !this.state.showButton3,\n      onClick: e => {\n        this.setState({\n          showButton3: false\n        });\n        onSubmit(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, language.upload, React.createElement(\"i\", {\n      className: `icon icon-upload ml-2`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }))));\n  }\n\n  formGetter() {\n    return JSON.stringify({\n      token: this.props.token,\n      importedExcelAsJSON: this.state.fileJSON\n    });\n  }\n\n  customProgressRenderer(progress, hasError, cancelHandler) {\n    if (hasError || progress > -1) {\n      const language = this.props.language;\n      let progressBar = Object.assign({}, this.styleBar);\n      progressBar.width = `${progress}%`;\n      return React.createElement(React.Fragment, null, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"progressWrapper text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Import progress: \", `${progress}%`), React.createElement(\"div\", {\n        className: \"progressBar\",\n        style: progressBar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      })))), progress === 100 && React.createElement(React.Fragment, null, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(Card, {\n        body: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, language.importSection.summaryLabel), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(Card, {\n        color: \"primary\",\n        inverse: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        tag: \"h5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, language.importSection.totalRowCount), React.createElement(CardText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, language.importSection.totalRowText), React.createElement(Alert, {\n        tag: \"h4\",\n        color: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"365 \", language.importSection.rows)))), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(Card, {\n        color: \"success\",\n        inverse: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        tag: \"h5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, language.importSection.successRowCount), React.createElement(CardText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, language.importSection.successRowText), React.createElement(Alert, {\n        tag: \"h4\",\n        color: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"325 rows\")))), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(Card, {\n        color: \"danger\",\n        inverse: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        tag: \"h5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, language.importSection.failedRowCount), React.createElement(CardText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, language.importSection.failedRowText), React.createElement(Alert, {\n        tag: \"h4\",\n        color: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"40 rows\"))))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"primary\",\n        className: \"mt-3\",\n        block: true,\n        size: \"lg\",\n        outline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, language.importSection.downloadLogFile, React.createElement(\"i\", {\n        className: `icon icon-download-save ml-2`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }))))))))));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n  /*\r\n  {\"successfulRowCount\":35,\"totalRowProcessed\":50,\"errorRowCount\":15,\"exec_status\":\"success\"}\r\n  */\n\n\n  render() {\n    const language = this.props.language;\n\n    if (language) {\n      return React.createElement(Modal, {\n        isOpen: this.props.open,\n        size: 'lg',\n        centered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggle.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, language.importDataMatrixFile), React.createElement(ModalBody, {\n        className: 'import-file',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: fileInput => this.fileInput = fileInput,\n        type: \"file\",\n        accept: SheetJSFT,\n        onChange: this.handleSelectFile.bind(this),\n        hidden: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: '12',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, !this.state.file && React.createElement(\"div\", {\n        className: 'choose-file-wrapper',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"chose-file\",\n        onClick: () => this.fileInput.click(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, language.chooseFile)), this.state.file && React.createElement(\"div\", {\n        className: 'choose-file-wrapper',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, language.importSection.selectedFileLabel, this.state.file.name))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }), this.state.file && React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, this.state.showButton2 && React.createElement(Button, {\n        color: 'primary',\n        className: 'mt-3 mb-3',\n        size: \"lg\",\n        block: true,\n        onClick: this.handleFile.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, language.validate, React.createElement(\"i\", {\n        className: `icon icon-file ml-2`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      })), this.state.isExcelHeadersValid === true && React.createElement(Alert, {\n        color: \"success\",\n        className: 'mt-2',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: `icon icon-check mr-2`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }), language.importSection.selectedFileValid), this.state.isExcelHeadersValid === false && React.createElement(Alert, {\n        color: \"danger\",\n        className: 'mt-2',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: `icon icon-cross mr-2`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }), language.importSection.selectedFileNotValid))), React.createElement(FileUploadProgress, {\n        url: this.uploadFileUrl,\n        method: \"POST\",\n        beforeSend: request => {\n          request.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n          return request;\n        },\n        onProgress: (e, request, progress) => {\n          console.log('progress', e, request, progress);\n          this.props.setSpinner();\n        },\n        onLoad: (e, request) => {\n          console.log('load', e, request);\n          this.props.setSpinner();\n        },\n        onError: (e, request) => {\n          console.log('error', e, request);\n          this.props.setSpinner();\n        },\n        onAbort: (e, request) => {\n          console.log('abort', e, request);\n          this.props.setSpinner();\n        },\n        formGetter: this.formGetter.bind(this),\n        formRenderer: this.customFormRenderer.bind(this),\n        progressRenderer: this.customProgressRenderer.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    open: state.modalImportToggle,\n    import: state.import,\n    language: state.language,\n    token: state.token\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setModalImport: () => dispatch(modalImportToggle()),\n    setSpinner: () => dispatch(spinnerToggle())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalImportTemplate);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/ModalImport.jsx"],"names":["React","connect","Modal","ModalHeader","ModalBody","modalImportToggle","spinnerToggle","FileUploadProgress","XLSX","make_cols","SheetJSFT","groupingMap","RestApiModule","Row","Col","Card","CardBody","CardTitle","CardText","CardHeader","CardFooter","Alert","Button","saveAs","ModalImportTemplate","Component","constructor","props","state","file","data","cols","fileJSON","isExcelHeadersValid","uploadProgress","showButton1","showButton2","showButton3","process","env","REACT_APP_API_GATEWAY","REACT_APP_MATRIX_SERVICE","uploadFileUrl","restApi","fileInput","createRef","styleBar","width","handleSelectFile","e","files","target","JSONOb","test","JSON","parse","stringify","console","log","importResult","setState","handleFile","setSpinner","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","sheetRows","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","defval","handleJSONHeaders","readAsArrayBuffer","headerMap","excelHeadersArray","columnsMap","reduce","fullArr","item","columns","arr","col","id","undefined","push","isSame","handleTxtReport","blob","Blob","toggle","setModalImport","customFormRenderer","onSubmit","language","upload","formGetter","token","importedExcelAsJSON","customProgressRenderer","progress","hasError","cancelHandler","progressBar","Object","assign","importSection","summaryLabel","totalRowCount","totalRowText","rows","successRowCount","successRowText","failedRowCount","failedRowText","downloadLogFile","render","open","bind","importDataMatrixFile","click","chooseFile","selectedFileLabel","name","validate","selectedFileValid","selectedFileNotValid","request","setRequestHeader","mapStateToProps","import","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Modal, ModalHeader, ModalBody} from 'reactstrap';\r\nimport {modalImportToggle, spinnerToggle} from \"../redux/actions\";\r\nimport FileUploadProgress from 'react-fileupload-progress';\r\nimport XLSX from \"xlsx\";\r\nimport {make_cols} from \"./MakeColumns\";\r\nimport {SheetJSFT} from './types';\r\nimport {groupingMap} from '../matrixDataMap';\r\nimport RestApiModule from '../RestApiModule';\r\nimport {Row, Col, Card, CardBody, CardTitle, CardText, CardHeader, CardFooter, Alert, Button} from 'reactstrap';\r\n\r\nimport {saveAs} from 'file-saver';\r\n\r\nclass ModalImportTemplate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file: null,\r\n            data: [],\r\n            cols: [],\r\n            fileJSON: {},\r\n            isExcelHeadersValid: null,\r\n            uploadProgress: 0,\r\n            showButton1: true,\r\n            showButton2: false,\r\n            showButton3: false,\r\n        }\r\n        const {REACT_APP_API_GATEWAY, REACT_APP_MATRIX_SERVICE} = process.env;\r\n\r\n        this.uploadFileUrl = `${REACT_APP_API_GATEWAY}${REACT_APP_MATRIX_SERVICE}/ImportDataMatrixFromExcel`;\r\n        this.restApi = new RestApiModule();\r\n\r\n        this.fileInput = React.createRef();\r\n\r\n        this.styleBar = {\r\n            width: 0,\r\n        }\r\n    }\r\n\r\n\r\n    handleSelectFile(e) {\r\n        const files = e.target.files;\r\n\r\n\r\n        const JSONOb = {\"importResult\":[{\"log\": \"sss\",\"errorcount\":1,\"succsseful_row_count\":78,\"total_row_processed\":79}],\"exec_status\":\"success\"};\r\n        const test = JSON.parse(JSON.stringify(JSONOb))\r\n        console.log(test);\r\n\r\n        console.log(test.importResult);\r\n        console.log((test.importResult)[0]);\r\n\r\n        if (files && files[0])\r\n            this.setState({\r\n                file: files[0],\r\n                showButton2: true\r\n            });\r\n    };\r\n\r\n    handleFile() {\r\n        /* Boilerplate to set up FileReader */\r\n        this.props.setSpinner();\r\n        try {\r\n\r\n            const reader = new FileReader();\r\n            const rABS = !!reader.readAsBinaryString;\r\n            reader.onload = (e) => {\r\n                /* Parse data */\r\n                const bstr = e.target.result;\r\n                const wb = XLSX.read(bstr, {type: rABS ? 'binary' : 'array', bookVBA: true, sheetRows: 0});\r\n                /* Get first worksheet */\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n\r\n                /* Convert array of arrays */\r\n                const data = XLSX.utils.sheet_to_json(ws, {\r\n                    header: 1,\r\n                    defval: \"\"\r\n                });\r\n\r\n                /* Update state */\r\n                this.setState({data: data, cols: make_cols(ws['!ref'])}, () => {\r\n                    this.state.fileJSON = JSON.stringify(this.state.data, null, 2);\r\n                    this.handleJSONHeaders();\r\n\r\n                });\r\n                this.props.setSpinner();\r\n            };\r\n\r\n            if (rABS) {\r\n                reader.readAsBinaryString(this.state.file);\r\n            } else {\r\n                reader.readAsArrayBuffer(this.state.file);\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n            this.setState({showButton3: false})\r\n            this.props.setSpinner();\r\n        }\r\n\r\n    }\r\n\r\n    handleJSONHeaders () {\r\n\r\n        const headerMap = JSON.parse(JSON.stringify(groupingMap));\r\n        const excelHeadersArray = (JSON.parse(this.state.fileJSON))[1];\r\n\r\n        const columnsMap = headerMap.reduce((fullArr, item) => {\r\n            const cols = item.columns.reduce((arr, col) => {\r\n                if (col.id !== undefined) arr.push(col.id)\r\n                return arr;\r\n            }, []);\r\n            return [...fullArr, ...cols]\r\n        }, [])\r\n\r\n        const isSame = JSON.stringify(excelHeadersArray) === JSON.stringify(columnsMap);\r\n        this.setState({isExcelHeadersValid: isSame, showButton3: isSame, showButton2: !isSame});\r\n    }\r\n\r\n\r\n    handleTxtReport() {\r\n        var blob = new Blob([\"Hello, world!\"], {type: \"text/plain;charset=utf-8\"});\r\n        saveAs(blob, \"Import Report.txt\");\r\n    }\r\n\r\n\r\n    toggle() {\r\n        this.setState({\r\n            file: null,\r\n            isExcelHeadersValid: null,\r\n            showButton2: false,\r\n            showButton3: false,\r\n        })\r\n        this.props.setModalImport();\r\n    }\r\n\r\n    customFormRenderer(onSubmit) {\r\n        const {language} = this.props;\r\n\r\n        return (\r\n            <Row>\r\n                <Col>\r\n                    <Button color={'success'} size={\"lg\"} block\r\n                            hidden={!this.state.showButton3}\r\n                            onClick={(e) => {\r\n                                this.setState({showButton3: false});\r\n                                onSubmit(e)\r\n                            }}>\r\n                        {language.upload}\r\n                        <i className={`icon icon-upload ml-2`}/>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    formGetter() {\r\n        return JSON.stringify({\r\n            token: this.props.token,\r\n            importedExcelAsJSON: this.state.fileJSON\r\n        });\r\n    }\r\n\r\n    customProgressRenderer(progress, hasError, cancelHandler) {\r\n        if (hasError || progress > -1) {\r\n\r\n            const {language} = this.props;\r\n\r\n            let progressBar = Object.assign({}, this.styleBar);\r\n            progressBar.width = `${progress}%`;\r\n\r\n            return (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <div className={\"progressWrapper text-center\"}>\r\n                                <span>Import progress: {`${progress}%`}</span>\r\n                                <div className={\"progressBar\"} style={progressBar} />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {progress === 100 &&\r\n                     <>\r\n                         <Row>\r\n                             <Col>\r\n                                 <Card body={false}>\r\n                                     <CardHeader>\r\n                                         {language.importSection.summaryLabel}\r\n                                     </CardHeader>\r\n                                     <CardBody>\r\n                                         <Row>\r\n                                             <Col>\r\n                                                 <Card color={\"primary\"} inverse>\r\n                                                     <CardBody>\r\n                                                         <CardTitle tag={\"h5\"}>{language.importSection.totalRowCount}</CardTitle>\r\n                                                         <CardText>{language.importSection.totalRowText}</CardText>\r\n                                                         <Alert tag={\"h4\"} color={\"info\"}>365 {language.importSection.rows}</Alert>\r\n                                                     </CardBody>\r\n                                                 </Card>\r\n                                             </Col>\r\n                                             <Col>\r\n                                                 <Card color={\"success\"} inverse>\r\n                                                     <CardBody>\r\n                                                         <CardTitle tag={\"h5\"}>{language.importSection.successRowCount}</CardTitle>\r\n                                                         <CardText>{language.importSection.successRowText}</CardText>\r\n                                                         <Alert tag={\"h4\"} color={\"info\"}>325 rows</Alert>\r\n                                                     </CardBody>\r\n                                                 </Card>\r\n                                             </Col>\r\n                                             <Col>\r\n                                                 <Card color={\"danger\"} inverse>\r\n                                                     <CardBody>\r\n                                                         <CardTitle tag={\"h5\"}>{language.importSection.failedRowCount}</CardTitle>\r\n                                                         <CardText>{language.importSection.failedRowText}</CardText>\r\n                                                         <Alert tag={\"h4\"} color={\"info\"}>40 rows</Alert>\r\n                                                     </CardBody>\r\n                                                 </Card>\r\n                                             </Col>\r\n                                         </Row>\r\n                                         <Row>\r\n                                             <Col>\r\n                                                 <hr/>\r\n                                                 <Button color={\"primary\"} className={\"mt-3\"} block size={\"lg\"} outline>\r\n                                                     {language.importSection.downloadLogFile}\r\n                                                     <i className={`icon icon-download-save ml-2`}/>\r\n                                                 </Button>\r\n                                             </Col>\r\n                                         </Row>\r\n                                     </CardBody>\r\n                                 </Card>\r\n                             </Col>\r\n                         </Row>\r\n\r\n                     </>\r\n                    }\r\n                </>\r\n            );\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    /*\r\n    {\"successfulRowCount\":35,\"totalRowProcessed\":50,\"errorRowCount\":15,\"exec_status\":\"success\"}\r\n    */\r\n    render() {\r\n        const {language} = this.props;\r\n        if (language) {\r\n            return (\r\n                <Modal isOpen={this.props.open} size={'lg'} centered={true}>\r\n                    <ModalHeader toggle={this.toggle.bind(this)}>{language.importDataMatrixFile}</ModalHeader>\r\n                    <ModalBody className={'import-file'}>\r\n\r\n                        <input ref={fileInput => this.fileInput = fileInput} type=\"file\"\r\n                               accept={SheetJSFT} onChange={this.handleSelectFile.bind(this)} hidden={true}  />\r\n\r\n                        <Row>\r\n                            <Col md={'12'}>\r\n                                {!this.state.file &&\r\n                                <div className={'choose-file-wrapper'}>\r\n                                    <Button className={\"chose-file\"} onClick={() => this.fileInput.click()}>\r\n                                        {language.chooseFile}\r\n                                    </Button>\r\n                                </div>\r\n                                }\r\n                                {this.state.file &&\r\n                                <div className={'choose-file-wrapper'}>\r\n                                    <h4>\r\n                                        {language.importSection.selectedFileLabel}\r\n                                        {this.state.file.name}\r\n                                    </h4>\r\n                                </div>\r\n                                }\r\n                            </Col>\r\n                            <hr/>\r\n\r\n                            {this.state.file &&\r\n                            <Col>\r\n                                {this.state.showButton2 &&\r\n                                <Button color={'primary'} className={'mt-3 mb-3'} size={\"lg\"} block\r\n                                        onClick={this.handleFile.bind(this)}>\r\n                                    {language.validate}\r\n                                    <i className={`icon icon-file ml-2`}/>\r\n                                </Button>\r\n                                }\r\n                                {this.state.isExcelHeadersValid === true &&\r\n                                <Alert color=\"success\" className={'mt-2'}>\r\n                                    <i className={`icon icon-check mr-2`}/>\r\n                                    {language.importSection.selectedFileValid}\r\n                                </Alert>\r\n                                }\r\n                                {this.state.isExcelHeadersValid === false &&\r\n                                <Alert color=\"danger\" className={'mt-2'}>\r\n                                    <i className={`icon icon-cross mr-2`}/>\r\n                                    {language.importSection.selectedFileNotValid}\r\n                                </Alert>\r\n                                }\r\n                            </Col>\r\n                            }\r\n                        </Row>\r\n\r\n                        <FileUploadProgress\r\n                            url={this.uploadFileUrl}\r\n                            method={\"POST\"}\r\n                            beforeSend={(request) => {\r\n                                request.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\r\n                                return request\r\n                            }}\r\n                            onProgress={(e, request, progress) => {\r\n                                console.log('progress', e, request, progress);\r\n                                this.props.setSpinner();\r\n                            }}\r\n                            onLoad={(e, request) => {\r\n                                console.log('load', e, request);\r\n                                this.props.setSpinner();\r\n                            }}\r\n                            onError={(e, request) => {\r\n                                console.log('error', e, request);\r\n                                this.props.setSpinner();\r\n                            }}\r\n                            onAbort={(e, request) => {\r\n                                console.log('abort', e, request);\r\n                                this.props.setSpinner();\r\n                            }}\r\n                            formGetter={this.formGetter.bind(this)}\r\n                            formRenderer={this.customFormRenderer.bind(this)}\r\n                            progressRenderer={this.customProgressRenderer.bind(this)}\r\n\r\n                        />\r\n                    </ModalBody>\r\n\r\n                </Modal>\r\n            )\r\n        } else {\r\n            return (<></>)\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        open: state.modalImportToggle,\r\n        import: state.import,\r\n        language: state.language,\r\n        token: state.token\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModalImport: () => dispatch(modalImportToggle()),\r\n        setSpinner: () => dispatch(spinnerToggle()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalImportTemplate);"]},"metadata":{},"sourceType":"module"}