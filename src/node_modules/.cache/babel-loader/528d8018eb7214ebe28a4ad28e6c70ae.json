{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\views\\\\Matrix.jsx\";\nimport React, { createRef } from 'react';\nimport { connect } from \"react-redux\";\nimport { Row, Col, Card, CardBody, CardFooter, Jumbotron, Button } from 'reactstrap';\nimport { HotTable } from '@handsontable/react';\nimport Handsontable from 'handsontable';\nimport { groupingMap } from '../matrixDataMap';\nimport { columnLogic } from '../matrixColumnLogicMap';\nimport Pagination from \"react-js-pagination\";\nimport Header from '../components/Header';\nimport Sidebar from '../components/Sidebar';\nimport Toolbar from '../components/ToolbarMatrix';\nimport ModalTemplate from '../components/ModalImport';\nimport Spinner from '../components/Spinner';\nimport data from '../sampleData/data';\nimport { editOnToggle } from \"../redux/actions\";\nimport { confirmAlert } from 'react-confirm-alert'; // Import\n\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport ModalExportTemplate from \"../components/ModalExport\"; // Import css\n\nimport RestApiModule from '../RestApiModule';\n\nclass Matrix extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.restApi = new RestApiModule();\n    this.hotTableComponent = createRef();\n    this.hot = null;\n    this.handsontableData = data.SAFI;\n    this.handsontableDataBackup = null;\n    this.errorMessages = null;\n    this.errorBoxTitle = null;\n    this.columnHeaders = [];\n    this.titles = [];\n    this.columns = [];\n    this.handleColumnHeaders();\n    this.editable = ['region', 'etat', 'oldAggrSite', 'newAggrSite', 'radioSite' //,'rncName', 'bscName'\n    ]; // test - will remove\n\n    this.selectedRowCoords = {\n      r: null,\n      c: null\n    };\n    this.editedRowCoords = {\n      r: null,\n      c: null\n    };\n    this.validatedCell = {\n      r: null,\n      c: null\n    };\n    this.rowValidation = true;\n    this.showHistory = false;\n    this.filter = null;\n    this.radioSite = {\n      isExists: false,\n      value: ''\n    }; // check it, if doesnt need, remove\n\n    this.state = {\n      isDataExistsInDB: false,\n      newRowAdded: false,\n      showHistory: false,\n      activePages: 1\n    };\n    Handsontable.hooks.add('afterSelectionEnd', (r, c) => {\n      this.selectedRowCoords.r = r;\n      this.selectedRowCoords.c = c;\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true; // TODO: get data from api to load data, if not exist isDataExistsInDB attributed should be false else true.\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  setStateAsync(state) {\n    return new Promise(resolve => {\n      this.setState(state, resolve);\n    });\n  }\n\n  fakeDataLoad() {\n    this.setStateAsync({\n      isDataExistsInDB: true\n    });\n\n    if (this._isMounted) {\n      this.hot = this.hotTableComponent.current.hotInstance;\n      this.hot.loadData(this.handsontableData);\n      /* Filter for show active rows only*/\n\n      this.filter = this.hot.getPlugin('filters');\n      const colIndex = this.findIndexOfColumn(0, 'archived');\n      this.filter.addCondition(colIndex, 'contains', 'No');\n      this.filter.filter();\n    }\n  }\n\n  handlePageChange(pageNumber) {\n    //console.log(pageNumber);\n    // TODO: call api to retrieve data for matrix page\n    // data will provided by page number\n    this.setStateAsync({\n      activePage: pageNumber\n    });\n  }\n\n  handleEditClick() {\n    const _this$selectedRowCoor = this.selectedRowCoords,\n          r = _this$selectedRowCoor.r,\n          c = _this$selectedRowCoor.c;\n    if (r === null && c === null) return; //console.log(this.hot.getCellMeta(r, 4));\n    //console.log(this.hot.getRangedData([r, 0, r, this.hot.countCols()]));\n    // create backup data before editing;\n\n    this.handsontableDataBackup = JSON.parse(JSON.stringify(this.handsontableData)); // Change edit mode on redux\n\n    this.props.setEdit();\n    this.setCellProperties(r, c);\n    this.editedRowCoords.r = r;\n    this.editedRowCoords.c = c;\n  }\n\n  async handleCancelClick() {\n    await this.setStateAsync({\n      newRowAdded: false\n    });\n    this.cancelEdit();\n  }\n\n  handleSaveClick() {\n    if (this.rowValidation) {\n      const _this$editedRowCoords = this.editedRowCoords,\n            r = _this$editedRowCoords.r,\n            c = _this$editedRowCoords.c; // data would send to API\n\n      const data = this.hot.getDataAtRow(r);\n      console.log(data);\n      this.resetRow(r); // should remove, refresh data from DB\n\n      this.selectedRowCoords.r = r;\n      this.selectedRowCoords.c = c;\n      this.editedRowCoords.r = null;\n      this.editedRowCoords.c = null; // Change edit mode on redux\n\n      this.props.setEdit();\n    } else {\n      alert('Validation errors');\n    }\n  }\n\n  handleSaveHistoryClick() {\n    alert('History handle');\n  }\n\n  async handleNewRowClick() {\n    await this.setStateAsync({\n      newRowAdded: true\n    }); // create backup data before editing;\n\n    this.handsontableDataBackup = JSON.parse(JSON.stringify(this.handsontableData));\n    this.props.setEdit();\n    this.hot.alter('insert_row', 0, 1);\n    this.setCellProperties(0, null);\n  } // history toggle finished\n\n\n  async handleHistoryToggle() {\n    const colIndex = this.findIndexOfColumn(0, 'archived');\n    const arg = this.showHistory ? '' : 'No'; // this param is for filtering on handsontable\n\n    if (!this.state.showHistory) {\n      this.filter.removeConditions(colIndex);\n    } else {\n      this.filter.addCondition(colIndex, 'contains', arg);\n    }\n\n    await this.filter.filter();\n    this.setStateAsync({\n      showHistory: !this.state.showHistory\n    }); // Makeup for revisioned rows.\n\n    this.iterateRevisionRows();\n  }\n\n  setCellProperties(r, c) {\n    const colCount = this.hot.countCols();\n    let col = c !== null ? c : 0;\n\n    for (let x = 0; x <= colCount; x++) {\n      const _this$hot$getCellMeta = this.hot.getCellMeta(r, x),\n            prop = _this$hot$getCellMeta.prop;\n\n      if (this.editable.indexOf(prop) >= 0) {\n        const type = this.hot.getDataType(r, x); // get cell type from loaded map\n        // this 2 row for initiate the rules on editing row.\n        //const value = this.hot.getDataAtCell(r, x);\n        //this.columnEvents(r, prop, value);\n\n        col = col === 0 ? x : col; // when add new row find first editable col.\n\n        this.hot.setCellMeta(r, x, \"editor\", type);\n        this.hot.setCellMeta(r, x, \"className\", 'bg-warning text-dark');\n      }\n    } // set initial value for newly adding rows\n\n\n    if (this.state.newRowAdded) {\n      this.setInitialValueOfColumn();\n    }\n\n    this.hot.render();\n    this.hot.selectCell(r, col);\n  }\n\n  findIndexOfColumn(r, propName) {\n    const colCount = this.hot.countCols();\n\n    for (let c = 0; c <= colCount; c++) {\n      const _this$hot$getCellMeta2 = this.hot.getCellMeta(r, c),\n            prop = _this$hot$getCellMeta2.prop;\n\n      if (prop === propName) {\n        return c;\n      }\n    }\n  } // Finished initial value setter\n\n\n  setInitialValueOfColumn() {\n    this.columns.map(item => {\n      if (item.hasOwnProperty('initialValue')) {\n        this.hot.setDataAtRowProp(0, item.data, item.initialValue);\n      }\n\n      return true;\n    });\n  } // Finished, cancel edit return back to last backup data\n\n\n  cancelEdit() {\n    this.handsontableData = JSON.parse(JSON.stringify(this.handsontableDataBackup));\n    this.hot.loadData(this.handsontableData);\n    this.hot.render(); // Change edit mode on redux\n\n    this.props.setEdit();\n  } // reset row finished\n\n\n  resetRow(r) {\n    const colCount = this.hot.countCols();\n\n    for (let x = 0; x <= colCount; x++) {\n      this.hot.setCellMeta(r, x, \"editor\", false);\n      this.hot.setCellMeta(r, x, \"className\", 'bg-primary text-white');\n    }\n\n    this.hot.render();\n    this.setState({\n      newRowAdded: false\n    });\n  } // disable moves finished\n\n\n  disableMoves() {\n    return false;\n  } // Finished ip validation rule\n\n\n  ipValidate(value, callback) {\n    const pat = /^(?:\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b|null)$/; //const pat = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\n\n    this.rowValidation = pat.test(value);\n    callback(this.rowValidation);\n    if (!this.rowValidation) this.showMessage(this.errorBoxTitle, this.errorMessages.invalidIP, true);\n  } // Finished numeric value validation\n\n\n  numericValidate(value, callback) {\n    const pat = /^\\d+$/;\n    this.rowValidation = pat.test(value);\n    callback(this.rowValidation);\n    if (!this.rowValidation) this.showMessage(this.errorBoxTitle, this.errorMessages.invalidNumber, true);\n  } // Read the rule from imported rule file\n\n\n  ruleExtractor(columnId) {\n    return columnLogic.find(item => {\n      return item.id === columnId;\n    });\n  } // Finished validation message box\n\n\n  showMessage(title, message, validatorClose) {\n    confirmAlert({\n      title: 'Validation Warning',\n      message: message,\n      closeOnEscape: false,\n      closeOnClickOutside: false,\n      customUI: ({\n        onClose\n      }) => {\n        const closeAction = () => {\n          if (validatorClose) {\n            this.hot.selectCell(this.validatedCell.r, this.validatedCell.c);\n            this.hot.getActiveEditor().beginEditing();\n            onClose();\n          } else {\n            this.cancelEdit();\n            onClose();\n          }\n        };\n\n        return React.createElement(\"div\", {\n          className: \"card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 328\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 329\n          },\n          __self: this\n        }, title, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          onClick: closeAction,\n          \"aria-label\": \"Close\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 332\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          \"aria-hidden\": \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 335\n          },\n          __self: this\n        }, \"\\xD7\"))), React.createElement(\"div\", {\n          className: \"card-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: 'card-text text-danger',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 340\n          },\n          __self: this\n        }, message)), React.createElement(\"div\", {\n          className: \"card-footer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 342\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: 'btn btn-warning',\n          onClick: closeAction,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 343\n          },\n          __self: this\n        }, \"Ok\")));\n      }\n    });\n  } // Finished column header groups\n\n\n  handleColumnHeaders() {\n    // Create a copy of map file\n    const headerMap = JSON.parse(JSON.stringify(groupingMap)); // Set the header groups for table\n\n    const headerGrouping = headerMap.filter(item => {\n      item.colspan = item.columns.length;\n      return typeof item.columns !== \"array\";\n    }); // set each and every column defaults\n\n    const cols = headerMap.map(item => {\n      return item.columns.map(c => {\n        this.titles.push(c.label);\n        c.editor = false; // default readonly\n\n        if (typeof c.validator !== \"undefined\") {\n          if (c.validator === 'ipValidator') {\n            c.validator = (value, callback) => {\n              this.ipValidate(value, callback);\n            };\n          }\n\n          if (c.validator === 'isNumeric') {\n            c.validator = (value, callback) => {\n              this.numericValidate(value, callback);\n            };\n          }\n        }\n\n        if (typeof c.type !== \"undefined\") {\n          if (c.type === 'dropdown') {\n            this.setPickList(c.data).then(list => {\n              c.source = list;\n            });\n          }\n        }\n\n        return c;\n      });\n    }); // spread the columns into single object\n\n    cols.map(c => {\n      this.columns = [...this.columns, ...c];\n    }); // Pushing header group const to related vars\n\n    this.columnHeaders.push(headerGrouping);\n    this.columnHeaders.push(this.titles);\n  } // Finished colouring header\n\n\n  headerColoring(col, TH) {\n    const TR = TH.parentNode;\n    const THEAD = TR.parentNode;\n    const b = THEAD.childNodes.length;\n    const n = Array.prototype.indexOf.call(THEAD.childNodes, TR);\n    const headerLevel = -1 * b + n;\n\n    function applyClass(elem, className) {\n      if (!Handsontable.dom.hasClass(elem, className)) Handsontable.dom.addClass(elem, className);\n    }\n\n    if (headerLevel === -1 || headerLevel === -2) {\n      if (col >= 0 && col <= 11) applyClass(TH, 'color1');\n      if (col === 12) applyClass(TH, 'color2');\n      if (col >= 13 && col <= 20) applyClass(TH, 'color3');\n      if (col >= 21 && col <= 27) applyClass(TH, 'color4');\n      if (col >= 28 && col <= 30) applyClass(TH, 'color5');\n      if (col >= 31 && col <= 34) applyClass(TH, 'color6');\n      if (col >= 35 && col <= 43) applyClass(TH, 'color7');\n      if (col >= 44 && col <= 46) applyClass(TH, 'color8');\n      if (col >= 47 && col <= 50) applyClass(TH, 'color9');\n    }\n  } // Finished pick list setter function\n\n\n  setPickList(name) {\n    return new Promise((res, rej) => {\n      const value = `${name}Picklist_value`;\n      const key = `${name}Picklist`;\n      this.restApi.callApi('getPickList', {\n        token: this.props.token,\n        pickListName: key\n      }).then(response => {\n        if (response.pickList.length > 0) {\n          const list = response.pickList.map(item => {\n            return item[value];\n          });\n          res(list);\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    });\n  } // Finished revision row makeup\n\n\n  iterateRevisionRows() {\n    function applyClass(instance, td, row, col, prop, value, cellProperties) {\n      if (!td.classList.contains('revision-row')) td.classList.add('revision-row');\n    }\n\n    if (this._isMounted) {\n      const rc = this.hot.countRows();\n      const cc = this.hot.countCols();\n\n      for (let r = 0; r <= rc; r++) {\n        const value = this.hot.getDataAtRowProp(r, 'archived');\n\n        if (value === 'Yes') {\n          for (let c = 0; c <= cc; c++) {\n            this.hot.setCellMeta(r, c, 'renderer', applyClass);\n          }\n        }\n      }\n\n      this.hot.render();\n    }\n  } // Generic Column Logic method\n\n\n  genericCL(methodCaller, dto) {\n    this.restApi.callApi(methodCaller, dto).then(response => {\n      const c = this.validatedCell.c;\n      if (!response.isExist) this.showMessage(this.errorBoxTitle, this.errorMessages[c], true); // TODO: add else block to execute rules\n    });\n  }\n\n  async columnEvents(r, c, newV) {\n    this.validatedCell.r = r;\n    this.validatedCell.c = c;\n    const properties = this.ruleExtractor(c);\n\n    if (properties) {\n      const methodCaller = properties.methodCaller,\n            rules = properties.rules,\n            paramName = properties.paramName,\n            additionalParams = properties.additionalParams;\n\n      if (methodCaller) {\n        // we understand that this logic needs to call api\n        // default dto\n        let dto = {\n          token: this.props.token,\n          [paramName]: newV\n        };\n\n        if (typeof additionalParams !== 'undefined' && typeof additionalParams === 'object') {\n          // create addition parameter to bind exact one\n          const additionalDTO = additionalParams.map(prop => {\n            return {\n              [prop]: this.hot.getDataAtRowProp(r, prop)\n            };\n          }); // dto with additional parameters\n\n          dto = Object.assign({}, dto, ...additionalDTO);\n        } // method caller and logic execution\n        //await this.genericCL(methodCaller, dto);\n\n\n        this.restApi.callApi(methodCaller, dto).then(response => {\n          if (!response.isExist) {\n            this.showMessage(this.errorBoxTitle, this.errorMessages[c], true);\n            return false;\n          }\n        });\n      } else {\n        // this logic doesnt need to call api. It has own rule\n        //if (!this.state.newRowAdded) {\n        //edit mode\n        if (rules) {\n          rules.map(item => {\n            if (item.columnValue === newV) {\n              this.hot.setDataAtRowProp(r, item.changedId, item.changedValue);\n            }\n          });\n        } //}\n\n      }\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          maximize = _this$props.maximize,\n          language = _this$props.language,\n          contentCSS = _this$props.contentCSS;\n\n    if (language) {\n      this.errorBoxTitle = language.validationMessageBoxTitle;\n      this.errorMessages = language.validationErrorMessages;\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }), React.createElement(Row, {\n      className: \"h-100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      maximize: maximize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }), React.createElement(Col, {\n      className: contentCSS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      wrapper: 'toolbar mt-2',\n      isDataExist: this.state.isDataExistsInDB,\n      newRowAdded: this.state.newRowAdded,\n      newClick: this.handleNewRowClick.bind(this),\n      editClick: this.handleEditClick.bind(this),\n      cancelClick: this.handleCancelClick.bind(this),\n      saveClick: this.handleSaveClick.bind(this),\n      saveHistoryClick: this.handleSaveHistoryClick.bind(this),\n      historyToggle: this.handleHistoryToggle.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }), React.createElement(Card, {\n      className: 'mt-1 fixedCard',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, React.createElement(CardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, React.createElement(HotTable, {\n      ref: this.hotTableComponent,\n      id: 'hot',\n      rowHeaders: true,\n      licenseKey: 'non-commercial-and-evaluation',\n      nestedHeaders: this.columnHeaders,\n      columns: this.columns,\n      stretchH: 'all',\n      dropdownMenu: true,\n      filters: true,\n      manualColumnResize: true,\n      width: '100%',\n      height: '100%',\n      fixedColumnsLeft: 0,\n      columnSorting: true,\n      currentRowClassName: ['bg-primary', 'text-white'],\n      enterBeginsEditing: false,\n      outsideClickDeselects: false,\n      enterMoves: this.disableMoves(),\n      fillHandle: this.disableMoves(),\n      afterValidate: (isValid, value, row, prop) => {\n        // this is check dropdown values are proper or not.\n        this.validatedCell.r = row;\n        this.validatedCell.c = prop;\n      },\n      afterGetColHeader: (col, TH) => {\n        this.headerColoring(col, TH);\n      },\n      afterCreateRow: (index, amount, source) => {\n        console.log(index, amount, source);\n      },\n      afterChange: changes => {\n        // TODO: check esc button when its clicked\n        if (changes) {\n          const _changes$ = _slicedToArray(changes[0], 4),\n                r = _changes$[0],\n                c = _changes$[1],\n                oldV = _changes$[2],\n                newV = _changes$[3];\n\n          if (oldV !== newV) this.columnEvents(r, c, newV);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }), !this.state.isDataExistsInDB && React.createElement(\"div\", {\n      className: 'empty-data',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      className: \"empty-data-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"display-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    }, \"Connectivity Matrix Data\"), React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }, \"This page is using for manipulate the imported data to EAI DB.\"), React.createElement(\"hr\", {\n      className: \"my-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }, \"It seems you have to do import for the first initialize. Please use the import button which is exist on toolbar or click below button to load fake data.\"), React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      size: 'lg',\n      onClick: this.fakeDataLoad.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }, \"Click the load Data !\"))))), React.createElement(CardFooter, {\n      className: 'text-center',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, React.createElement(Pagination, {\n      activePage: this.state.activePage,\n      itemsCountPerPage: 25,\n      totalItemsCount: 395,\n      pageRangeDisplayed: 10,\n      onChange: this.handlePageChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    }))))), React.createElement(ModalTemplate, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }), React.createElement(ModalExportTemplate, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662\n      },\n      __self: this\n    }), React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.token,\n    language: state.language,\n    maximize: state.maximize,\n    contentCSS: state.contentCSS\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setEdit: () => dispatch(editOnToggle())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Matrix);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/views/Matrix.jsx"],"names":["React","createRef","connect","Row","Col","Card","CardBody","CardFooter","Jumbotron","Button","HotTable","Handsontable","groupingMap","columnLogic","Pagination","Header","Sidebar","Toolbar","ModalTemplate","Spinner","data","editOnToggle","confirmAlert","ModalExportTemplate","RestApiModule","Matrix","Component","constructor","props","_isMounted","restApi","hotTableComponent","hot","handsontableData","SAFI","handsontableDataBackup","errorMessages","errorBoxTitle","columnHeaders","titles","columns","handleColumnHeaders","editable","selectedRowCoords","r","c","editedRowCoords","validatedCell","rowValidation","showHistory","filter","radioSite","isExists","value","state","isDataExistsInDB","newRowAdded","activePages","hooks","add","componentDidMount","componentWillUnmount","setStateAsync","Promise","resolve","setState","fakeDataLoad","current","hotInstance","loadData","getPlugin","colIndex","findIndexOfColumn","addCondition","handlePageChange","pageNumber","activePage","handleEditClick","JSON","parse","stringify","setEdit","setCellProperties","handleCancelClick","cancelEdit","handleSaveClick","getDataAtRow","console","log","resetRow","alert","handleSaveHistoryClick","handleNewRowClick","alter","handleHistoryToggle","arg","removeConditions","iterateRevisionRows","colCount","countCols","col","x","getCellMeta","prop","indexOf","type","getDataType","setCellMeta","setInitialValueOfColumn","render","selectCell","propName","map","item","hasOwnProperty","setDataAtRowProp","initialValue","disableMoves","ipValidate","callback","pat","test","showMessage","invalidIP","numericValidate","invalidNumber","ruleExtractor","columnId","find","id","title","message","validatorClose","closeOnEscape","closeOnClickOutside","customUI","onClose","closeAction","getActiveEditor","beginEditing","headerMap","headerGrouping","colspan","length","cols","push","label","editor","validator","setPickList","then","list","source","headerColoring","TH","TR","parentNode","THEAD","b","childNodes","n","Array","prototype","call","headerLevel","applyClass","elem","className","dom","hasClass","addClass","name","res","rej","key","callApi","token","pickListName","response","pickList","catch","error","instance","td","row","cellProperties","classList","contains","rc","countRows","cc","getDataAtRowProp","genericCL","methodCaller","dto","isExist","columnEvents","newV","properties","rules","paramName","additionalParams","additionalDTO","Object","assign","columnValue","changedId","changedValue","maximize","language","contentCSS","validationMessageBoxTitle","validationErrorMessages","bind","isValid","index","amount","changes","oldV","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {createRef} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Row, Col, Card, CardBody, CardFooter, Jumbotron, Button} from 'reactstrap';\r\n\r\nimport {HotTable} from '@handsontable/react';\r\nimport Handsontable from 'handsontable';\r\nimport {groupingMap} from '../matrixDataMap';\r\nimport {columnLogic} from '../matrixColumnLogicMap';\r\nimport Pagination from \"react-js-pagination\";\r\n\r\n\r\nimport Header from '../components/Header'\r\nimport Sidebar from '../components/Sidebar'\r\nimport Toolbar from '../components/ToolbarMatrix'\r\nimport ModalTemplate from '../components/ModalImport'\r\nimport Spinner from '../components/Spinner'\r\nimport data from '../sampleData/data';\r\nimport {editOnToggle} from \"../redux/actions\";\r\n\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport ModalExportTemplate from \"../components/ModalExport\"; // Import css\r\n\r\nimport RestApiModule from '../RestApiModule'\r\n\r\nclass Matrix extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.restApi = new RestApiModule();\r\n\r\n        this.hotTableComponent = createRef();\r\n        this.hot = null;\r\n        this.handsontableData = data.SAFI;\r\n        this.handsontableDataBackup = null;\r\n\r\n        this.errorMessages = null;\r\n        this.errorBoxTitle = null;\r\n        this.columnHeaders = [];\r\n        this.titles = [];\r\n        this.columns = [];\r\n        this.handleColumnHeaders();\r\n        this.editable = ['region','etat','oldAggrSite', 'newAggrSite', 'radioSite'\r\n        //,'rncName', 'bscName'\r\n        ]; // test - will remove\r\n\r\n        this.selectedRowCoords = {r: null, c: null};\r\n        this.editedRowCoords = {r: null, c: null};\r\n        this.validatedCell = {r: null, c: null};\r\n        this.rowValidation = true;\r\n        this.showHistory = false;\r\n        this.filter = null;\r\n\r\n        this.radioSite = {\r\n                isExists: false,\r\n                value: ''\r\n        }; // check it, if doesnt need, remove\r\n\r\n        this.state = {\r\n            isDataExistsInDB: false,\r\n            newRowAdded: false,\r\n            showHistory: false,\r\n            activePages: 1\r\n        };\r\n\r\n        Handsontable.hooks.add('afterSelectionEnd', (r, c) => {\r\n            this.selectedRowCoords.r = r;\r\n            this.selectedRowCoords.c = c;\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n\r\n        // TODO: get data from api to load data, if not exist isDataExistsInDB attributed should be false else true.\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    setStateAsync(state) {\r\n        return new Promise((resolve) => {\r\n            this.setState(state, resolve)\r\n        });\r\n    }\r\n\r\n    fakeDataLoad() {\r\n        this.setStateAsync({isDataExistsInDB: true});\r\n\r\n        if (this._isMounted) {\r\n\r\n            this.hot = this.hotTableComponent.current.hotInstance;\r\n            this.hot.loadData(this.handsontableData);\r\n\r\n            /* Filter for show active rows only*/\r\n            this.filter = this.hot.getPlugin('filters');\r\n\r\n            const colIndex = this.findIndexOfColumn(0, 'archived');\r\n            this.filter.addCondition(colIndex, 'contains', 'No');\r\n            this.filter.filter();\r\n        }\r\n    }\r\n\r\n    handlePageChange(pageNumber) {\r\n        //console.log(pageNumber);\r\n        // TODO: call api to retrieve data for matrix page\r\n        // data will provided by page number\r\n        this.setStateAsync({activePage: pageNumber});\r\n    }\r\n\r\n    handleEditClick() {\r\n\r\n        const {r, c} = this.selectedRowCoords;\r\n        if (r === null && c === null) return;\r\n\r\n        //console.log(this.hot.getCellMeta(r, 4));\r\n        //console.log(this.hot.getRangedData([r, 0, r, this.hot.countCols()]));\r\n\r\n        // create backup data before editing;\r\n        this.handsontableDataBackup = JSON.parse(JSON.stringify(this.handsontableData));\r\n\r\n        // Change edit mode on redux\r\n        this.props.setEdit();\r\n\r\n        this.setCellProperties(r, c);\r\n        this.editedRowCoords.r = r;\r\n        this.editedRowCoords.c = c;\r\n    }\r\n\r\n    async handleCancelClick() {\r\n        await this.setStateAsync({newRowAdded : false});\r\n        this.cancelEdit();\r\n    }\r\n\r\n    handleSaveClick() {\r\n        if (this.rowValidation) {\r\n\r\n            const {r, c} = this.editedRowCoords;\r\n\r\n            // data would send to API\r\n            const data = this.hot.getDataAtRow(r);\r\n            console.log(data);\r\n\r\n            this.resetRow(r); // should remove, refresh data from DB\r\n\r\n            this.selectedRowCoords.r = r;\r\n            this.selectedRowCoords.c = c;\r\n            this.editedRowCoords.r = null;\r\n            this.editedRowCoords.c = null;\r\n\r\n\r\n            // Change edit mode on redux\r\n            this.props.setEdit();\r\n        } else {\r\n            alert('Validation errors');\r\n        }\r\n    }\r\n\r\n    handleSaveHistoryClick() {\r\n        alert('History handle');\r\n    }\r\n\r\n    async handleNewRowClick() {\r\n\r\n        await this.setStateAsync({newRowAdded : true});\r\n\r\n        // create backup data before editing;\r\n        this.handsontableDataBackup = JSON.parse(JSON.stringify(this.handsontableData));\r\n\r\n        this.props.setEdit();\r\n        this.hot.alter('insert_row', 0, 1);\r\n        this.setCellProperties(0, null);\r\n    }\r\n\r\n    // history toggle finished\r\n    async handleHistoryToggle() {\r\n\r\n        const colIndex = this.findIndexOfColumn(0,'archived');\r\n\r\n        const arg = this.showHistory ? '' : 'No'; // this param is for filtering on handsontable\r\n\r\n        if (!this.state.showHistory) {\r\n            this.filter.removeConditions(colIndex);\r\n        } else {\r\n            this.filter.addCondition(colIndex, 'contains', arg);\r\n        }\r\n        await this.filter.filter();\r\n\r\n        this.setStateAsync({showHistory: !this.state.showHistory});\r\n\r\n        // Makeup for revisioned rows.\r\n        this.iterateRevisionRows();\r\n    }\r\n\r\n    setCellProperties(r, c) {\r\n\r\n        const colCount = this.hot.countCols();\r\n        let col = c !== null ? c : 0;\r\n\r\n        for (let x = 0; x <= colCount; x++) {\r\n            const {prop} = this.hot.getCellMeta(r,x);\r\n\r\n            if (this.editable.indexOf(prop) >= 0) {\r\n\r\n                const type = this.hot.getDataType(r,x); // get cell type from loaded map\r\n\r\n                // this 2 row for initiate the rules on editing row.\r\n                //const value = this.hot.getDataAtCell(r, x);\r\n                //this.columnEvents(r, prop, value);\r\n\r\n                col = col === 0 ? x : col; // when add new row find first editable col.\r\n\r\n                this.hot.setCellMeta(r, x, \"editor\", type);\r\n                this.hot.setCellMeta(r, x, \"className\", 'bg-warning text-dark');\r\n            }\r\n        }\r\n        // set initial value for newly adding rows\r\n        if (this.state.newRowAdded) {\r\n            this.setInitialValueOfColumn();\r\n        }\r\n\r\n\r\n        this.hot.render();\r\n        this.hot.selectCell(r, col);\r\n    }\r\n\r\n    findIndexOfColumn(r, propName) {\r\n        const colCount = this.hot.countCols();\r\n        for (let c = 0; c <= colCount; c++) {\r\n            const {prop} = this.hot.getCellMeta(r,c);\r\n            if (prop === propName) {\r\n                return c;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Finished initial value setter\r\n    setInitialValueOfColumn() {\r\n        this.columns.map((item) => {\r\n            if (item.hasOwnProperty('initialValue')) {\r\n                this.hot.setDataAtRowProp(0, item.data, item.initialValue)\r\n            }\r\n            return true;\r\n        })\r\n    }\r\n\r\n    // Finished, cancel edit return back to last backup data\r\n    cancelEdit() {\r\n        this.handsontableData = JSON.parse(JSON.stringify(this.handsontableDataBackup));\r\n        this.hot.loadData(this.handsontableData);\r\n        this.hot.render();\r\n\r\n        // Change edit mode on redux\r\n        this.props.setEdit();\r\n    }\r\n\r\n    // reset row finished\r\n    resetRow(r) {\r\n        const colCount = this.hot.countCols();\r\n        for (let x = 0; x <= colCount; x++) {\r\n\r\n            this.hot.setCellMeta(r, x, \"editor\", false);\r\n            this.hot.setCellMeta(r, x, \"className\", 'bg-primary text-white');\r\n        }\r\n        this.hot.render();\r\n        this.setState({ newRowAdded : false});\r\n    }\r\n\r\n    // disable moves finished\r\n    disableMoves() {\r\n        return false;\r\n    }\r\n\r\n    // Finished ip validation rule\r\n    ipValidate(value, callback) {\r\n\r\n        const pat = /^(?:\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b|null)$/;\r\n        //const pat = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\r\n\r\n        this.rowValidation = pat.test(value);\r\n        callback(this.rowValidation);\r\n        if (!this.rowValidation)\r\n            this.showMessage(this.errorBoxTitle, this.errorMessages.invalidIP, true);\r\n    }\r\n\r\n    // Finished numeric value validation\r\n    numericValidate(value, callback) {\r\n\r\n        const pat = /^\\d+$/;\r\n\r\n        this.rowValidation = pat.test(value);\r\n        callback(this.rowValidation);\r\n        if (!this.rowValidation)\r\n            this.showMessage(this.errorBoxTitle, this.errorMessages.invalidNumber, true);\r\n    }\r\n\r\n    // Read the rule from imported rule file\r\n    ruleExtractor(columnId) {\r\n        return columnLogic.find((item) => {\r\n            return item.id === columnId;\r\n        })\r\n    }\r\n\r\n    // Finished validation message box\r\n    showMessage(title, message, validatorClose) {\r\n        confirmAlert({\r\n            title: 'Validation Warning',\r\n            message: message,\r\n            closeOnEscape: false,\r\n            closeOnClickOutside: false,\r\n            customUI: ({ onClose }) => {\r\n\r\n                const closeAction = () => {\r\n                    if (validatorClose) {\r\n                        this.hot.selectCell(this.validatedCell.r, this.validatedCell.c);\r\n                        this.hot.getActiveEditor().beginEditing();\r\n                        onClose();\r\n\r\n                    } else {\r\n                        this.cancelEdit();\r\n                        onClose();\r\n                    }\r\n                }\r\n                return (\r\n                    <div className=\"card\">\r\n                        <div className=\"card-header\">\r\n                            {title}\r\n\r\n                            <button type=\"button\" className=\"close\"\r\n                                    onClick={closeAction}\r\n                                    aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                            <div className={'card-text text-danger'}>{message}</div>\r\n                        </div>\r\n                        <div className=\"card-footer\">\r\n                            <button className={'btn btn-warning'} onClick={closeAction}>\r\n                                Ok\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    // Finished column header groups\r\n    handleColumnHeaders() {\r\n\r\n        // Create a copy of map file\r\n        const headerMap = JSON.parse(JSON.stringify(groupingMap));\r\n\r\n        // Set the header groups for table\r\n        const headerGrouping = headerMap.filter((item) => {\r\n            item.colspan = item.columns.length;\r\n            return typeof item.columns !== \"array\"\r\n        })\r\n\r\n        // set each and every column defaults\r\n        const cols = headerMap.map((item) => {\r\n\r\n            return item.columns.map(c => {\r\n\r\n                this.titles.push(c.label);\r\n\r\n                c.editor = false; // default readonly\r\n\r\n                if (typeof c.validator !== \"undefined\") {\r\n\r\n                    if (c.validator === 'ipValidator') {\r\n                        c.validator = (value, callback) => {\r\n                            this.ipValidate(value, callback)\r\n                        }\r\n                    }\r\n\r\n                    if (c.validator === 'isNumeric') {\r\n                        c.validator = (value, callback) => {\r\n                            this.numericValidate(value, callback)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (typeof c.type !== \"undefined\") {\r\n                    if (c.type === 'dropdown') {\r\n                        this.setPickList(c.data).then((list) => {\r\n                            c.source = list;\r\n                        });\r\n                    }\r\n                }\r\n                return c;\r\n            });\r\n        })\r\n\r\n        // spread the columns into single object\r\n        cols.map((c) => {\r\n            this.columns = [...this.columns, ...c];\r\n        })\r\n\r\n        // Pushing header group const to related vars\r\n        this.columnHeaders.push(headerGrouping);\r\n        this.columnHeaders.push(this.titles);\r\n    }\r\n\r\n    // Finished colouring header\r\n    headerColoring(col, TH) {\r\n\r\n        const TR = TH.parentNode;\r\n        const THEAD = TR.parentNode;\r\n\r\n        const b = THEAD.childNodes.length;\r\n        const n = Array.prototype.indexOf.call(THEAD.childNodes, TR);\r\n        const headerLevel = (-1) * b + n;\r\n\r\n        function applyClass(elem, className) {\r\n            if (!Handsontable.dom.hasClass(elem, className))\r\n                Handsontable.dom.addClass(elem, className);\r\n        }\r\n\r\n        if (headerLevel === -1 || headerLevel === -2) {\r\n\r\n            if (col >=0 && col <= 11) applyClass(TH, 'color1');\r\n            if (col === 12) applyClass(TH, 'color2');\r\n            if (col >=13 && col <= 20) applyClass(TH, 'color3');\r\n            if (col >=21 && col <= 27) applyClass(TH, 'color4');\r\n            if (col >=28 && col <= 30) applyClass(TH, 'color5');\r\n            if (col >=31 && col <= 34) applyClass(TH, 'color6');\r\n            if (col >=35 && col <= 43) applyClass(TH, 'color7');\r\n            if (col >=44 && col <= 46) applyClass(TH, 'color8');\r\n            if (col >=47 && col <= 50) applyClass(TH, 'color9');\r\n        }\r\n    }\r\n\r\n    // Finished pick list setter function\r\n    setPickList(name) {\r\n\r\n        return new Promise ((res, rej) => {\r\n\r\n            const value = `${name}Picklist_value`;\r\n            const key = `${name}Picklist`;\r\n\r\n            this.restApi.callApi('getPickList', {\r\n                token: this.props.token,\r\n                pickListName: key\r\n\r\n            }).then((response) => {\r\n\r\n                if (response.pickList.length > 0) {\r\n                     const list = response.pickList.map((item) => {\r\n                        return item[value];\r\n                    })\r\n                    res(list)\r\n                }\r\n            }).catch((error) => {\r\n                console.log(error)\r\n            });\r\n        })\r\n    }\r\n\r\n    // Finished revision row makeup\r\n    iterateRevisionRows() {\r\n\r\n        function applyClass(instance, td, row, col, prop, value, cellProperties) {\r\n            if (!td.classList.contains('revision-row'))\r\n                td.classList.add('revision-row');\r\n        }\r\n\r\n        if (this._isMounted) {\r\n\r\n            const rc = this.hot.countRows();\r\n            const cc = this.hot.countCols();\r\n\r\n            for (let r = 0; r <= rc; r++) {\r\n                const value = this.hot.getDataAtRowProp(r, 'archived');\r\n                if (value === 'Yes') {\r\n                    for (let c = 0; c <= cc; c++) {\r\n                        this.hot.setCellMeta(r, c, 'renderer', applyClass)\r\n                    }\r\n                }\r\n            }\r\n            this.hot.render();\r\n        }\r\n    }\r\n\r\n    // Generic Column Logic method\r\n    genericCL(methodCaller, dto) {\r\n\r\n        this.restApi.callApi(methodCaller, dto).then((response) => {\r\n\r\n            const {c} = this.validatedCell;\r\n\r\n            if (!response.isExist)\r\n                this.showMessage(this.errorBoxTitle, this.errorMessages[c], true);\r\n\r\n            // TODO: add else block to execute rules\r\n        })\r\n    }\r\n\r\n    async columnEvents(r, c, newV) {\r\n\r\n        this.validatedCell.r = r;\r\n        this.validatedCell.c = c;\r\n\r\n        const properties = this.ruleExtractor(c);\r\n        if (properties) {\r\n            const {methodCaller, rules, paramName, additionalParams} = properties;\r\n\r\n            if (methodCaller) {\r\n                // we understand that this logic needs to call api\r\n\r\n                // default dto\r\n                let dto = {\r\n                    token: this.props.token,\r\n                    [paramName]: newV\r\n                };\r\n\r\n                if (typeof additionalParams !== 'undefined' &&\r\n                    typeof additionalParams === 'object') {\r\n\r\n                    // create addition parameter to bind exact one\r\n\r\n                    const additionalDTO = additionalParams.map((prop) => {\r\n                        return {[prop]: this.hot.getDataAtRowProp(r, prop)}\r\n                    });\r\n\r\n                    // dto with additional parameters\r\n                    dto = Object.assign({}, dto, ...additionalDTO);\r\n                }\r\n\r\n                // method caller and logic execution\r\n                //await this.genericCL(methodCaller, dto);\r\n                this.restApi.callApi(methodCaller, dto).then((response) => {\r\n\r\n                    if (!response.isExist) {\r\n                        this.showMessage(this.errorBoxTitle, this.errorMessages[c], true);\r\n                        return false;\r\n                    }\r\n                })\r\n\r\n            } else {\r\n                // this logic doesnt need to call api. It has own rule\r\n\r\n                //if (!this.state.newRowAdded) {\r\n                    //edit mode\r\n\r\n                    if (rules) {\r\n                        rules.map((item) => {\r\n                            if (item.columnValue === newV) {\r\n                                this.hot.setDataAtRowProp(r, item.changedId, item.changedValue);\r\n                            }\r\n                        })\r\n                    }\r\n                //}\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {maximize, language, contentCSS} = this.props;\r\n\r\n        if (language) {\r\n            this.errorBoxTitle = language.validationMessageBoxTitle;\r\n            this.errorMessages = language.validationErrorMessages;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Header/>\r\n                <Row className=\"h-100\">\r\n                    <Sidebar maximize={maximize}/>\r\n                    <Col className={contentCSS}>\r\n                        <Toolbar\r\n                            wrapper={'toolbar mt-2'}\r\n                            isDataExist={this.state.isDataExistsInDB}\r\n                            newRowAdded={this.state.newRowAdded}\r\n                            newClick={this.handleNewRowClick.bind(this)}\r\n                            editClick={this.handleEditClick.bind(this)}\r\n                            cancelClick={this.handleCancelClick.bind(this)}\r\n                            saveClick={this.handleSaveClick.bind(this)}\r\n                            saveHistoryClick={this.handleSaveHistoryClick.bind(this)}\r\n                            historyToggle={this.handleHistoryToggle.bind(this)}\r\n                        />\r\n\r\n                        <Card className={'mt-1 fixedCard'}>\r\n                            <CardBody>\r\n\r\n                                <HotTable ref={this.hotTableComponent} id={'hot'}\r\n                                  rowHeaders={true}\r\n                                  licenseKey={'non-commercial-and-evaluation'}\r\n                                  nestedHeaders={this.columnHeaders}\r\n                                  columns={this.columns}\r\n                                  stretchH={'all'}\r\n                                  dropdownMenu={true}\r\n                                  filters={true}\r\n                                  manualColumnResize={true}\r\n                                  width={'100%'}\r\n                                  height={'100%'}\r\n                                  fixedColumnsLeft={0}\r\n                                  columnSorting={true}\r\n                                  currentRowClassName={['bg-primary', 'text-white']}\r\n                                  enterBeginsEditing={false}\r\n                                  outsideClickDeselects={false}\r\n                                  enterMoves={this.disableMoves()}\r\n                                  fillHandle={this.disableMoves()}\r\n                                  afterValidate={(isValid, value, row, prop) => {\r\n                                      // this is check dropdown values are proper or not.\r\n                                      this.validatedCell.r = row;\r\n                                      this.validatedCell.c = prop;\r\n                                  }}\r\n                                  afterGetColHeader={(col, TH) => {\r\n                                      this.headerColoring(col, TH)\r\n                                  }}\r\n                                  afterCreateRow={(index, amount, source) => {\r\n                                      console.log(index, amount, source)\r\n                                  }}\r\n                                  afterChange={(changes) => {\r\n                                      // TODO: check esc button when its clicked\r\n                                      if (changes) {\r\n                                          const [r, c, oldV, newV] = changes[0];\r\n                                          if (oldV !== newV)\r\n                                            this.columnEvents(r, c, newV);\r\n                                      }\r\n                                  }}\r\n                                />\r\n\r\n                                {!this.state.isDataExistsInDB &&\r\n                                <div className={'empty-data'}>\r\n                                    <Jumbotron className=\"empty-data-content\">\r\n                                        <h1 className=\"display-5\">Connectivity Matrix Data</h1>\r\n                                        <p className=\"lead\">This page is using for manipulate the imported data to EAI DB.</p>\r\n                                        <hr className=\"my-2\" />\r\n                                        <p>It seems you have to do import for the first initialize. Please use the import button which is exist on toolbar or click below button to load fake data.</p>\r\n                                        <p className=\"lead\">\r\n                                            <Button color=\"primary\" size={'lg'}\r\n                                                    onClick={this.fakeDataLoad.bind(this)}>Click the load Data !</Button>\r\n                                        </p>\r\n                                    </Jumbotron>\r\n                                </div>\r\n                                }\r\n                            </CardBody>\r\n\r\n                            <CardFooter className={'text-center'}>\r\n                                <Pagination\r\n                                    activePage={this.state.activePage}\r\n                                    itemsCountPerPage={25}\r\n                                    totalItemsCount={395}\r\n                                    pageRangeDisplayed={10}\r\n                                    onChange={this.handlePageChange.bind(this)}\r\n                                />\r\n                            </CardFooter>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <ModalTemplate/>\r\n                <ModalExportTemplate/>\r\n                <Spinner/>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        language: state.language,\r\n        maximize: state.maximize,\r\n        contentCSS: state.contentCSS\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setEdit: () => dispatch(editOnToggle()),\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Matrix);"]},"metadata":{},"sourceType":"module"}