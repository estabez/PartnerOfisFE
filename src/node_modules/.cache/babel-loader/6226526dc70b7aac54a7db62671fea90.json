{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\components\\\\ModalImport.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { modalImportToggle, spinnerToggle } from \"../redux/actions\";\nimport FileUploadProgress from 'react-fileupload-progress';\nimport XLSX from \"xlsx\";\nimport { make_cols } from \"./MakeColumns\";\nimport { SheetJSFT } from './types';\nimport { groupingMap } from '../matrixDataMap';\nimport RestApiModule from '../RestApiModule';\nimport { Row, Col, Card, CardBody, CardFooter, Jumbotron, Button, Input } from 'reactstrap';\nimport { saveAs } from 'file-saver';\nconst styles = {\n  progressWrapper: {\n    height: '25px',\n    marginTop: '10px',\n    marginBottom: '10px',\n    width: '100%',\n    float: 'left',\n    overflow: 'hidden',\n    backgroundColor: '#f5f5f5',\n    borderRadius: '4px',\n    WebkitBoxShadow: 'inset 0 1px 2px rgba(0,0,0,.1)',\n    boxShadow: 'inset 0 1px 2px rgba(0,0,0,.1)'\n  },\n  progressBar: {\n    float: 'left',\n    width: '0',\n    height: '100%',\n    fontSize: '12px',\n    lineHeight: '20px',\n    color: '#fff',\n    textAlign: 'center',\n    backgroundColor: '#5cb85c',\n    WebkitBoxShadow: 'inset 0 -1px 0 rgba(0,0,0,.15)',\n    boxShadow: 'inset 0 -1px 0 rgba(0,0,0,.15)',\n    WebkitTransition: 'width .6s ease',\n    Otransition: 'width .6s ease',\n    transition: 'width .6s ease'\n  },\n  cancelButton: {\n    marginTop: '5px',\n    WebkitAppearance: 'none',\n    padding: 0,\n    cursor: 'pointer',\n    background: '0 0',\n    border: 0,\n    float: 'left',\n    fontSize: '21px',\n    fontWeight: 700,\n    lineHeight: 1,\n    color: '#000',\n    textShadow: '0 1px 0 #fff',\n    filter: 'alpha(opacity=20)',\n    opacity: '.2'\n  },\n  bslabel: {\n    display: 'inline-block',\n    maxWidth: '100%',\n    marginBottom: '5px',\n    fontWeight: 700\n  },\n  bsHelp: {\n    display: 'block',\n    marginTop: '5px',\n    marginBottom: '10px',\n    color: '#737373'\n  },\n  bsButton: {\n    padding: '1px 5px',\n    fontSize: '12px',\n    lineHeight: '1.5',\n    borderRadius: '3px',\n    color: '#fff',\n    backgroundColor: '#337ab7',\n    borderColor: '#2e6da4',\n    display: 'inline-block',\n    marginBottom: 0,\n    fontWeight: 400,\n    textAlign: 'center',\n    whiteSpace: 'nowrap',\n    verticalAlign: 'middle',\n    touchAction: 'manipulation',\n    cursor: 'pointer',\n    WebkitUserSelect: 'none',\n    MozUserSelect: 'none',\n    msUserSelect: 'none',\n    userSelect: 'none',\n    backgroundImage: 'none',\n    border: '1px solid transparent'\n  }\n};\n\nclass ModalImportTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: null,\n      data: [],\n      cols: [],\n      fileJSON: {},\n      newJSONfromImported: {},\n      headersArray: [],\n      isExcelHeadersValid: false,\n      loading: true,\n      isUploadDisabled: true,\n      isValidateDisabled: true,\n      uploadHasError: true,\n      uploadProgress: 0,\n      showProgress: false\n    };\n    const _process$env = process.env,\n          REACT_APP_API_GATEWAY = _process$env.REACT_APP_API_GATEWAY,\n          REACT_APP_MATRIX_SERVICE = _process$env.REACT_APP_MATRIX_SERVICE;\n    this.uploadFileUrl = `${REACT_APP_API_GATEWAY}${REACT_APP_MATRIX_SERVICE}/ImportDataMatrixFromExcel`;\n    this.showProgress = false;\n    this.restApi = new RestApiModule();\n    this.fileInput = React.createRef();\n  }\n\n  handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) this.setState({\n      file: files[0]\n    });\n    this.setState({\n      isUploadDisabled: false\n    });\n  }\n\n  handleFile() {\n    /* Boilerplate to set up FileReader */\n    this.setState({\n      showProgress: true\n    });\n    this.props.setSpinner();\n\n    try {\n      const reader = new FileReader();\n      const rABS = !!reader.readAsBinaryString;\n\n      reader.onload = e => {\n        /* Parse data */\n        const bstr = e.target.result;\n        const wb = XLSX.read(bstr, {\n          type: rABS ? 'binary' : 'array',\n          bookVBA: true,\n          sheetRows: 0\n        });\n        /* Get first worksheet */\n\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n\n        const data = XLSX.utils.sheet_to_json(ws, {\n          header: 1,\n          defval: \"\"\n        });\n        /* Update state */\n\n        this.setState({\n          data: data,\n          cols: make_cols(ws['!ref'])\n        }, () => {\n          this.state.fileJSON = JSON.stringify(this.state.data, null, 2);\n          this.handleJSONHeaders();\n          console.log(this.state.isExcelHeadersValid);\n        });\n\n        if (this.state.isExcelHeadersValid) {\n          this.setState({\n            isValidateDisabled: false,\n            uploadHasError: false,\n            uploadProgress: 100\n          });\n        } else {\n          this.setState({\n            isValidateDisabled: true,\n            uploadHasError: true,\n            uploadProgress: 100\n          });\n        }\n\n        this.props.setSpinner();\n      };\n\n      if (rABS) {\n        reader.readAsBinaryString(this.state.file);\n      } else {\n        reader.readAsArrayBuffer(this.state.file);\n      }\n    } catch (e) {\n      this.setState({\n        isValidateDisabled: true,\n        uploadHasError: true,\n        uploadProgress: 100\n      });\n      this.props.setSpinner();\n    }\n  }\n\n  handleJSONHeaders() {\n    const excelHeadersArray = JSON.parse(this.state.fileJSON)[1];\n    console.log(excelHeadersArray);\n    const headerMap = JSON.parse(JSON.stringify(groupingMap));\n    headerMap.map(headers => {\n      for (let a = 0; a < headers.columns.length; a++) {\n        if (headers.columns[a].id !== undefined) {\n          this.state.headersArray.push(headers.columns[a].id);\n        }\n      }\n    });\n    console.log(this.state.headersArray);\n\n    if (JSON.stringify(excelHeadersArray) === JSON.stringify(this.state.headersArray)) {\n      console.log(\"same\");\n      this.state.isExcelHeadersValid = true;\n    } else {\n      console.log(\"dif\");\n      this.state.isExcelHeadersValid = false;\n    }\n\n    this.state.headersArray = [];\n  }\n\n  handleTxtReport() {\n    var blob = new Blob([\"Hello, world!\"], {\n      type: \"text/plain;charset=utf-8\"\n    });\n    saveAs(blob, \"Import Report.txt\");\n  }\n\n  toggle() {\n    this.props.setModalImport();\n  }\n\n  customFormRenderer(onSubmit) {\n    const language = this.props.language;\n    return React.createElement(\"form\", {\n      id: \"customForm\",\n      style: {\n        marginBottom: '15px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: 'row',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'col-4',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \" \"), React.createElement(\"div\", {\n      className: 'col-4 mt-4',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      ref: sendBackend => this.sendBackend = sendBackend,\n      hidden: this.state.isValidateDisabled,\n      className: 'btn btn-success btn-block',\n      onClick: onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, language.validate)), React.createElement(\"div\", {\n      className: 'col-4',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.handleTxtReport,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, \"Download Report as txt\")))));\n  }\n\n  formGetter() {\n    return JSON.stringify({\n      token: this.props.token,\n      importedExcelAsJSON: this.state.fileJSON\n    });\n  }\n\n  customProgressRenderer(progress, hasError, cancelHandler) {\n    if (hasError || progress > -1) {\n      let barStyle = Object.assign({}, styles.progressBar);\n      barStyle.width = progress + '%';\n      let message = React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, barStyle.width);\n      console.log(hasError);\n\n      if (hasError || !this.state.isExcelHeadersValid) {\n        barStyle.backgroundColor = '#d9534f';\n        message = React.createElement(\"span\", {\n          style: {\n            'color': '#a94442'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277\n          },\n          __self: this\n        }, \"Validate failed, Check Excel headers and re-import.\");\n      }\n\n      if (!hasError && this.state.isExcelHeadersValid) {\n        message = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280\n          },\n          __self: this\n        }, \"Done\");\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: styles.progressWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: barStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: 'alert alert-info mt-2',\n        style: {\n          'clear': 'left'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, message));\n    } else {\n      return;\n    }\n  }\n\n  render() {\n    const language = this.props.language;\n\n    if (language) {\n      return React.createElement(Modal, {\n        isOpen: this.props.open,\n        size: 'lg',\n        centered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggle.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, language.importDataMatrixFile), React.createElement(ModalBody, {\n        className: 'import-file',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: fileInput => this.fileInput = fileInput,\n        type: \"file\",\n        accept: SheetJSFT,\n        onChange: this.handleChange.bind(this),\n        hidden: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: '12',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, !this.state.file && React.createElement(\"div\", {\n        className: 'choose-file-wrapper',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: () => this.fileInput.click(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, language.chooseFile)), this.state.file && React.createElement(\"div\", {\n        className: 'choose-file-wrapper',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, this.state.file.name))), this.state.file && React.createElement(Col, {\n        md: '12',\n        className: 'mt-3',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: 'primary',\n        block: true,\n        onClick: this.handleFile.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, language.validate))), React.createElement(FileUploadProgress, {\n        url: this.uploadFileUrl,\n        method: \"POST\",\n        beforeSend: request => {\n          request.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n          return request;\n        },\n        onProgress: (e, request, progress) => {\n          console.log('progress', e, request, progress);\n          this.props.setSpinner();\n        },\n        onLoad: (e, request) => {\n          console.log('load', e, request);\n          this.props.setSpinner();\n        },\n        onError: (e, request) => {\n          console.log('error', e, request);\n          this.props.setSpinner();\n        },\n        onAbort: (e, request) => {\n          console.log('abort', e, request);\n          this.props.setSpinner();\n        },\n        formGetter: this.formGetter.bind(this),\n        formRenderer: this.customFormRenderer.bind(this),\n        progressRenderer: this.customProgressRenderer.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    open: state.modalImportToggle,\n    import: state.import,\n    language: state.language,\n    token: state.token\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setModalImport: () => dispatch(modalImportToggle()),\n    setSpinner: () => dispatch(spinnerToggle())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalImportTemplate);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/ModalImport.jsx"],"names":["React","connect","Modal","ModalHeader","ModalBody","modalImportToggle","spinnerToggle","FileUploadProgress","XLSX","make_cols","SheetJSFT","groupingMap","RestApiModule","Row","Col","Card","CardBody","CardFooter","Jumbotron","Button","Input","saveAs","styles","progressWrapper","height","marginTop","marginBottom","width","float","overflow","backgroundColor","borderRadius","WebkitBoxShadow","boxShadow","progressBar","fontSize","lineHeight","color","textAlign","WebkitTransition","Otransition","transition","cancelButton","WebkitAppearance","padding","cursor","background","border","fontWeight","textShadow","filter","opacity","bslabel","display","maxWidth","bsHelp","bsButton","borderColor","whiteSpace","verticalAlign","touchAction","WebkitUserSelect","MozUserSelect","msUserSelect","userSelect","backgroundImage","ModalImportTemplate","Component","constructor","props","state","file","data","cols","fileJSON","newJSONfromImported","headersArray","isExcelHeadersValid","loading","isUploadDisabled","isValidateDisabled","uploadHasError","uploadProgress","showProgress","process","env","REACT_APP_API_GATEWAY","REACT_APP_MATRIX_SERVICE","uploadFileUrl","restApi","fileInput","createRef","handleChange","e","files","target","setState","handleFile","setSpinner","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","sheetRows","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","defval","JSON","stringify","handleJSONHeaders","console","log","readAsArrayBuffer","excelHeadersArray","parse","headerMap","map","headers","a","columns","length","id","undefined","push","handleTxtReport","blob","Blob","toggle","setModalImport","customFormRenderer","onSubmit","language","sendBackend","validate","formGetter","token","importedExcelAsJSON","customProgressRenderer","progress","hasError","cancelHandler","barStyle","Object","assign","message","render","open","bind","importDataMatrixFile","click","chooseFile","name","request","setRequestHeader","mapStateToProps","import","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Modal, ModalHeader, ModalBody} from 'reactstrap';\r\nimport {modalImportToggle, spinnerToggle} from \"../redux/actions\";\r\nimport FileUploadProgress from 'react-fileupload-progress';\r\nimport XLSX from \"xlsx\";\r\nimport {make_cols} from \"./MakeColumns\";\r\nimport {SheetJSFT} from './types';\r\nimport {groupingMap} from '../matrixDataMap';\r\nimport RestApiModule from '../RestApiModule';\r\nimport {Row, Col, Card, CardBody, CardFooter, Jumbotron, Button, Input} from 'reactstrap';\r\nimport {saveAs} from 'file-saver';\r\n\r\nconst styles = {\r\n    progressWrapper: {\r\n        height: '25px',\r\n        marginTop: '10px',\r\n        marginBottom: '10px',\r\n        width: '100%',\r\n        float: 'left',\r\n        overflow: 'hidden',\r\n        backgroundColor: '#f5f5f5',\r\n        borderRadius: '4px',\r\n        WebkitBoxShadow: 'inset 0 1px 2px rgba(0,0,0,.1)',\r\n        boxShadow: 'inset 0 1px 2px rgba(0,0,0,.1)'\r\n    },\r\n    progressBar: {\r\n        float: 'left',\r\n        width: '0',\r\n        height: '100%',\r\n        fontSize: '12px',\r\n        lineHeight: '20px',\r\n        color: '#fff',\r\n        textAlign: 'center',\r\n        backgroundColor: '#5cb85c',\r\n        WebkitBoxShadow: 'inset 0 -1px 0 rgba(0,0,0,.15)',\r\n        boxShadow: 'inset 0 -1px 0 rgba(0,0,0,.15)',\r\n        WebkitTransition: 'width .6s ease',\r\n        Otransition: 'width .6s ease',\r\n        transition: 'width .6s ease'\r\n    },\r\n    cancelButton: {\r\n        marginTop: '5px',\r\n        WebkitAppearance: 'none',\r\n        padding: 0,\r\n        cursor: 'pointer',\r\n        background: '0 0',\r\n        border: 0,\r\n        float: 'left',\r\n        fontSize: '21px',\r\n        fontWeight: 700,\r\n        lineHeight: 1,\r\n        color: '#000',\r\n        textShadow: '0 1px 0 #fff',\r\n        filter: 'alpha(opacity=20)',\r\n        opacity: '.2'\r\n    },\r\n\r\n    bslabel: {\r\n        display: 'inline-block',\r\n        maxWidth: '100%',\r\n        marginBottom: '5px',\r\n        fontWeight: 700\r\n    },\r\n\r\n    bsHelp: {\r\n        display: 'block',\r\n        marginTop: '5px',\r\n        marginBottom: '10px',\r\n        color: '#737373'\r\n    },\r\n\r\n    bsButton: {\r\n        padding: '1px 5px',\r\n        fontSize: '12px',\r\n        lineHeight: '1.5',\r\n        borderRadius: '3px',\r\n        color: '#fff',\r\n        backgroundColor: '#337ab7',\r\n        borderColor: '#2e6da4',\r\n        display: 'inline-block',\r\n        marginBottom: 0,\r\n        fontWeight: 400,\r\n        textAlign: 'center',\r\n        whiteSpace: 'nowrap',\r\n        verticalAlign: 'middle',\r\n        touchAction: 'manipulation',\r\n        cursor: 'pointer',\r\n        WebkitUserSelect: 'none',\r\n        MozUserSelect: 'none',\r\n        msUserSelect: 'none',\r\n        userSelect: 'none',\r\n        backgroundImage: 'none',\r\n        border: '1px solid transparent'\r\n    }\r\n};\r\n\r\n\r\nclass ModalImportTemplate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file: null,\r\n            data: [],\r\n            cols: [],\r\n            fileJSON: {},\r\n            newJSONfromImported: {},\r\n            headersArray: [],\r\n            isExcelHeadersValid: false,\r\n            loading: true,\r\n            isUploadDisabled: true,\r\n            isValidateDisabled: true,\r\n            uploadHasError: true,\r\n            uploadProgress: 0,\r\n            showProgress: false\r\n        }\r\n        const {REACT_APP_API_GATEWAY, REACT_APP_MATRIX_SERVICE} = process.env\r\n\r\n        this.uploadFileUrl = `${REACT_APP_API_GATEWAY}${REACT_APP_MATRIX_SERVICE}/ImportDataMatrixFromExcel`\r\n        this.showProgress = false;\r\n        this.restApi = new RestApiModule();\r\n\r\n        this.fileInput = React.createRef();\r\n    }\r\n\r\n\r\n    handleChange(e) {\r\n        const files = e.target.files;\r\n\r\n        if (files && files[0]) this.setState({file: files[0]});\r\n        this.setState({\r\n            isUploadDisabled: false\r\n        })\r\n    };\r\n\r\n    handleFile() {\r\n        /* Boilerplate to set up FileReader */\r\n        this.setState({\r\n            showProgress: true\r\n        })\r\n        this.props.setSpinner();\r\n        try {\r\n\r\n            const reader = new FileReader();\r\n            const rABS = !!reader.readAsBinaryString;\r\n            reader.onload = (e) => {\r\n                /* Parse data */\r\n                const bstr = e.target.result;\r\n                const wb = XLSX.read(bstr, {type: rABS ? 'binary' : 'array', bookVBA: true, sheetRows: 0});\r\n                /* Get first worksheet */\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n\r\n                /* Convert array of arrays */\r\n                const data = XLSX.utils.sheet_to_json(ws, {\r\n                    header: 1,\r\n                    defval: \"\"\r\n                });\r\n\r\n                /* Update state */\r\n                this.setState({data: data, cols: make_cols(ws['!ref'])}, () => {\r\n                    this.state.fileJSON = JSON.stringify(this.state.data, null, 2);\r\n                    this.handleJSONHeaders();\r\n                    console.log(this.state.isExcelHeadersValid);\r\n\r\n                });\r\n                if(this.state.isExcelHeadersValid) {\r\n                    this.setState({\r\n                        isValidateDisabled: false,\r\n                        uploadHasError: false,\r\n                        uploadProgress: 100\r\n                    });\r\n                }else{\r\n                    this.setState({\r\n                        isValidateDisabled: true,\r\n                        uploadHasError: true,\r\n                        uploadProgress: 100\r\n                    });\r\n                }\r\n                this.props.setSpinner();\r\n            };\r\n\r\n            if (rABS) {\r\n                reader.readAsBinaryString(this.state.file);\r\n            } else {\r\n                reader.readAsArrayBuffer(this.state.file);\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n            this.setState({\r\n                isValidateDisabled: true,\r\n                uploadHasError: true,\r\n                uploadProgress: 100\r\n            });\r\n            this.props.setSpinner();\r\n        }\r\n\r\n    }\r\n\r\n    handleJSONHeaders () {\r\n\r\n        const excelHeadersArray = (JSON.parse(this.state.fileJSON))[1];\r\n        console.log(excelHeadersArray);\r\n\r\n        const headerMap = JSON.parse(JSON.stringify(groupingMap));\r\n        headerMap.map((headers) => {\r\n            for(let a = 0; a< headers.columns.length; a++){\r\n                if(headers.columns[a].id !== undefined){\r\n                this.state.headersArray.push(headers.columns[a].id);\r\n                }\r\n            }\r\n        });\r\n\r\n        console.log(this.state.headersArray);\r\n\r\n        if(JSON.stringify(excelHeadersArray) === JSON.stringify(this.state.headersArray)){\r\n            console.log(\"same\");\r\n            this.state.isExcelHeadersValid = true;\r\n        }else{\r\n            console.log(\"dif\");\r\n            this.state.isExcelHeadersValid = false;\r\n        }\r\n\r\n        this.state.headersArray = [];\r\n    }\r\n\r\n\r\n    handleTxtReport() {\r\n        var blob = new Blob([\"Hello, world!\"], {type: \"text/plain;charset=utf-8\"});\r\n        saveAs(blob, \"Import Report.txt\");\r\n    }\r\n\r\n\r\n    toggle() {\r\n        this.props.setModalImport();\r\n    }\r\n\r\n    customFormRenderer(onSubmit) {\r\n        const {language} = this.props;\r\n        return (\r\n            <form id='customForm' style={{marginBottom: '15px'}}>\r\n                <hr/>\r\n                <div className={'row'}>\r\n                    <div className={'col-4'}> </div>\r\n                    <div className={'col-4 mt-4'}>\r\n                        <button type=\"button\" ref={sendBackend => this.sendBackend = sendBackend}\r\n                                hidden={this.state.isValidateDisabled} className={'btn btn-success btn-block'}\r\n                                onClick={onSubmit}>{language.validate}</button>\r\n                    </div>\r\n                    <div className={'col-4'}>\r\n                        <div>\r\n                            <button onClick={this.handleTxtReport}>Download Report as txt</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    formGetter() {\r\n        return JSON.stringify({\r\n            token: this.props.token,\r\n            importedExcelAsJSON: this.state.fileJSON\r\n        });\r\n    }\r\n\r\n    customProgressRenderer(progress, hasError, cancelHandler) {\r\n        if (hasError || progress > -1) {\r\n            let barStyle = Object.assign({}, styles.progressBar);\r\n            barStyle.width = progress + '%';\r\n\r\n            let message = (<span>{barStyle.width}</span>);\r\nconsole.log(hasError);\r\n            if (hasError || !this.state.isExcelHeadersValid) {\r\n                barStyle.backgroundColor = '#d9534f';\r\n                message = (<span style={{'color': '#a94442'}}>Validate failed, Check Excel headers and re-import.</span>);\r\n            }\r\n            if (!hasError && this.state.isExcelHeadersValid) {\r\n                message = (<span>Done</span>);\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div style={styles.progressWrapper}>\r\n                        <div style={barStyle}></div>\r\n                    </div>\r\n                    <div className={'alert alert-info mt-2'} style={{'clear': 'left'}}>\r\n                        {message}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {language} = this.props;\r\n        if (language) {\r\n            return (\r\n                <Modal isOpen={this.props.open} size={'lg'} centered={true}>\r\n                    <ModalHeader toggle={this.toggle.bind(this)}>{language.importDataMatrixFile}</ModalHeader>\r\n                    <ModalBody className={'import-file'}>\r\n\r\n                        <input ref={fileInput => this.fileInput = fileInput} type=\"file\"\r\n                               accept={SheetJSFT} onChange={this.handleChange.bind(this)} hidden={true}  />\r\n\r\n                        <Row>\r\n                            <Col md={'12'}>\r\n                                {!this.state.file &&\r\n                                <div className={'choose-file-wrapper'}>\r\n                                    <Button onClick={() => this.fileInput.click()}>\r\n                                        {language.chooseFile}\r\n                                    </Button>\r\n                                </div>\r\n                                }\r\n                                {this.state.file &&\r\n                                <div className={'choose-file-wrapper'}>\r\n                                    {/*<h4>{language.noFileChosen}</h4>*/}\r\n                                    <h4>{this.state.file.name}</h4>\r\n                                </div>\r\n                                }\r\n\r\n                            </Col>\r\n\r\n                            {this.state.file &&\r\n                            <Col md={'12'} className={'mt-3'}>\r\n                                <Button color={'primary'} block onClick={this.handleFile.bind(this)}>\r\n                                    {language.validate}\r\n                                </Button>\r\n                                {/*<div ref={uploadProgressBar => this.uploadProgressBar = uploadProgressBar} className={'mt-3'}>\r\n                                    {this.state.showProgress &&\r\n                                    this.customProgressRenderer(this.state.uploadProgress, this.state.uploadHasError)\r\n                                    }\r\n                                </div>*/}\r\n                            </Col>\r\n                            }\r\n                        </Row>\r\n\r\n                        <FileUploadProgress\r\n                            url={this.uploadFileUrl}\r\n                            method={\"POST\"}\r\n                            beforeSend={(request) => {\r\n                                request.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\r\n                                return request\r\n                            }}\r\n                            onProgress={(e, request, progress) => {\r\n                                console.log('progress', e, request, progress);\r\n                                this.props.setSpinner();\r\n                            }}\r\n                            onLoad={(e, request) => {\r\n                                console.log('load', e, request);\r\n                                this.props.setSpinner();\r\n                            }}\r\n                            onError={(e, request) => {\r\n                                console.log('error', e, request);\r\n                                this.props.setSpinner();\r\n                            }}\r\n                            onAbort={(e, request) => {\r\n                                console.log('abort', e, request);\r\n                                this.props.setSpinner();\r\n                            }}\r\n                            formGetter={this.formGetter.bind(this)}\r\n                            formRenderer={this.customFormRenderer.bind(this)}\r\n                            progressRenderer={this.customProgressRenderer.bind(this)}\r\n\r\n                        />\r\n                    </ModalBody>\r\n\r\n                </Modal>\r\n            )\r\n        } else {\r\n            return (<></>)\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        open: state.modalImportToggle,\r\n        import: state.import,\r\n        language: state.language,\r\n        token: state.token\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModalImport: () => dispatch(modalImportToggle()),\r\n        setSpinner: () => dispatch(spinnerToggle()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalImportTemplate);"]},"metadata":{},"sourceType":"module"}