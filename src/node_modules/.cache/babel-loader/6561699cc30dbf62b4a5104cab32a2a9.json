{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\components\\\\SelectRadioSite.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Input } from 'reactstrap';\nimport { setSelectedRadioSite } from \"../redux/actions\";\n\nclass SelectRadioSite extends React.Component {\n  async handleSelectedRadio(ev) {\n    let val = ev.target.value;\n    val = +val === 0 ? null : val; // if nothing selected value should be null to get all list\n\n    await this.props.setSelectedRadioSite(val); // this should return true to parent for reset activePage value;\n\n    this.props.handleRadioSiteChange(val === null ? true : \"radioSite\");\n  }\n\n  render() {\n    const _this$props = this.props,\n          language = _this$props.language,\n          radioSites = _this$props.radioSites;\n\n    if (language && radioSites) {\n      return React.createElement(Input, {\n        type: 'select',\n        className: 'custom-select',\n        onChange: this.handleSelectedRadio.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, language.loadByRadioSite), radioSites.map(value => {\n        return React.createElement(\"option\", {\n          key: value,\n          value: value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, value);\n      }));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    language: state.language,\n    token: state.token,\n    radioSites: state.radioSites\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setSelectedRadioSite: radioSite => {\n      dispatch(setSelectedRadioSite(radioSite));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectRadioSite);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/SelectRadioSite.jsx"],"names":["React","connect","Input","setSelectedRadioSite","SelectRadioSite","Component","handleSelectedRadio","ev","val","target","value","props","handleRadioSiteChange","render","language","radioSites","bind","loadByRadioSite","map","mapStateToProps","state","token","mapDispatchToProps","dispatch","radioSite"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,KAAR,QAAoB,YAApB;AACA,SAAQC,oBAAR,QAAmC,kBAAnC;;AAEA,MAAMC,eAAN,SAA8BJ,KAAK,CAACK,SAApC,CAA8C;AAE1C,QAAMC,mBAAN,CAA0BC,EAA1B,EAA8B;AAC1B,QAAIC,GAAG,GAAGD,EAAE,CAACE,MAAH,CAAUC,KAApB;AAEAF,IAAAA,GAAG,GAAG,CAACA,GAAD,KAAS,CAAT,GAAa,IAAb,GAAoBA,GAA1B,CAH0B,CAGK;;AAE/B,UAAM,KAAKG,KAAL,CAAWR,oBAAX,CAAgCK,GAAhC,CAAN,CAL0B,CAO1B;;AACA,SAAKG,KAAL,CAAWC,qBAAX,CAAkCJ,GAAG,KAAK,IAAT,GAAiB,IAAjB,GAAwB,WAAzD;AACH;;AAEDK,EAAAA,MAAM,GAAG;AAAA,wBAC0B,KAAKF,KAD/B;AAAA,UACEG,QADF,eACEA,QADF;AAAA,UACYC,UADZ,eACYA,UADZ;;AAGL,QAAID,QAAQ,IAAIC,UAAhB,EAA4B;AACxB,aACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,QAAb;AAAuB,QAAA,SAAS,EAAE,eAAlC;AACI,QAAA,QAAQ,EAAE,KAAKT,mBAAL,CAAyBU,IAAzB,CAA8B,IAA9B,CADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGI;AAAQ,QAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmBF,QAAQ,CAACG,eAA5B,CAHJ,EAIKF,UAAU,CAACG,GAAX,CAAgBR,KAAD,IAAW;AACvB,eAAQ;AAAQ,UAAA,GAAG,EAAEA,KAAb;AAAoB,UAAA,KAAK,EAAEA,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAmCA,KAAnC,CAAR;AACH,OAFA,CAJL,CADJ;AAWH,KAZD,MAYO;AACH,aACI,yCADJ;AAGH;AACJ;;AAjCyC;;AAoC9C,SAASS,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,SAAO;AACHN,IAAAA,QAAQ,EAAEM,KAAK,CAACN,QADb;AAEHO,IAAAA,KAAK,EAAED,KAAK,CAACC,KAFV;AAGHN,IAAAA,UAAU,EAAEK,KAAK,CAACL;AAHf,GAAP;AAKH;;AACD,SAASO,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACHpB,IAAAA,oBAAoB,EAAGqB,SAAD,IAAe;AAACD,MAAAA,QAAQ,CAACpB,oBAAoB,CAACqB,SAAD,CAArB,CAAR;AAA0C;AAD7E,GAAP;AAGH;;AAED,eAAevB,OAAO,CAACkB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6ClB,eAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Input} from 'reactstrap';\r\nimport {setSelectedRadioSite} from \"../redux/actions\";\r\n\r\nclass SelectRadioSite extends React.Component {\r\n\r\n    async handleSelectedRadio(ev) {\r\n        let val = ev.target.value;\r\n\r\n        val = +val === 0 ? null : val; // if nothing selected value should be null to get all list\r\n\r\n        await this.props.setSelectedRadioSite(val);\r\n\r\n        // this should return true to parent for reset activePage value;\r\n        this.props.handleRadioSiteChange((val === null) ? true : \"radioSite\");\r\n    }\r\n\r\n    render() {\r\n        const {language, radioSites} = this.props;\r\n\r\n        if (language && radioSites) {\r\n            return (\r\n                <Input type={'select'} className={'custom-select'}\r\n                    onChange={this.handleSelectedRadio.bind(this)}\r\n                >\r\n                    <option value=\"0\">{language.loadByRadioSite}</option>\r\n                    {radioSites.map((value) => {\r\n                        return (<option key={value} value={value}>{value}</option>)\r\n                    })\r\n                    }\r\n                </Input>\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        language: state.language,\r\n        token: state.token,\r\n        radioSites: state.radioSites\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setSelectedRadioSite: (radioSite) => {dispatch(setSelectedRadioSite(radioSite))}\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectRadioSite);"]},"metadata":{},"sourceType":"module"}