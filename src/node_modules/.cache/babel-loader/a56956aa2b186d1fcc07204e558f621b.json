{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\SSCM\\\\ss\\\\src\\\\src\\\\components\\\\SelectRegion.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Input } from 'reactstrap';\nimport { setRadioSites, setSelectedRegion, setSelectedRadioSite } from \"../redux/actions\";\nimport RestApiModule from '../RestApiModule';\n\nclass SelectRegion extends React.Component {\n  constructor(props) {\n    super(props);\n    this.restApi = new RestApiModule();\n  }\n\n  async handleSelectedRegion(ev) {\n    let val = ev.target.value;\n    val = +val === 0 ? this.props.regions[0] : val;\n    await this.props.setSelectedRegion(val);\n    const {\n      token\n    } = this.props;\n    this.restApi.callApi('getRadioListByRegion', {\n      region: val,\n      token\n    }).then(async response => {\n      const list = await response.List.map(item => {\n        return item.value;\n      });\n      this.props.setRadioSites(list.sort());\n      this.props.setSelectedRadioSite(undefined);\n    });\n    this.props.handleRegionChange(true); // this should return true to parent for reset activePage value;\n  }\n\n  render() {\n    const {\n      language,\n      regions,\n      editOn,\n      region\n    } = this.props;\n\n    if (language && regions) {\n      return /*#__PURE__*/React.createElement(Input, {\n        type: 'select',\n        className: 'custom-select',\n        disabled: editOn,\n        onChange: this.handleSelectedRegion.bind(this),\n        value: region,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }\n      }, regions.map(value => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          key: value,\n          value: value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 33\n          }\n        }, value);\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    language: state.language,\n    token: state.token,\n    regions: state.regions,\n    region: state.region,\n    editOn: state.editOn\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setSelectedRegion: region => {\n      dispatch(setSelectedRegion(region));\n    },\n    setRadioSites: list => {\n      dispatch(setRadioSites(list));\n    },\n    setSelectedRadioSite: radioSite => {\n      dispatch(setSelectedRadioSite(radioSite));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectRegion);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/SSCM/ss/src/src/components/SelectRegion.jsx"],"names":["React","connect","Input","setRadioSites","setSelectedRegion","setSelectedRadioSite","RestApiModule","SelectRegion","Component","constructor","props","restApi","handleSelectedRegion","ev","val","target","value","regions","token","callApi","region","then","response","list","List","map","item","sort","undefined","handleRegionChange","render","language","editOn","bind","mapStateToProps","state","mapDispatchToProps","dispatch","radioSite"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Input} from 'reactstrap';\r\nimport {setRadioSites, setSelectedRegion, setSelectedRadioSite} from \"../redux/actions\";\r\n\r\nimport RestApiModule from '../RestApiModule'\r\n\r\nclass SelectRegion extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.restApi = new RestApiModule();\r\n    }\r\n\r\n    async handleSelectedRegion(ev) {\r\n        let val = ev.target.value;\r\n\r\n        val = +val === 0 ? this.props.regions[0] : val;\r\n\r\n        await this.props.setSelectedRegion(val);\r\n\r\n        const {token} = this.props;\r\n\r\n        this.restApi.callApi('getRadioListByRegion', {\r\n            region: val,\r\n            token\r\n        }).then(async (response) => {\r\n\r\n            const list = await response.List.map((item) => {\r\n                return item.value;\r\n            });\r\n\r\n            this.props.setRadioSites(list.sort());\r\n            this.props.setSelectedRadioSite(undefined);\r\n\r\n        })\r\n\r\n        this.props.handleRegionChange(true) // this should return true to parent for reset activePage value;\r\n    }\r\n\r\n    render() {\r\n        const {language, regions, editOn, region} = this.props;\r\n\r\n        if (language && regions) {\r\n            return (\r\n                <Input type={'select'} className={'custom-select'}\r\n                       disabled={editOn}\r\n                       onChange={this.handleSelectedRegion.bind(this)}\r\n                       value={region}\r\n                >\r\n                    {regions.map((value) => {\r\n                        return (<option key={value} value={value}>{value}</option>)\r\n                    })\r\n                    }\r\n                </Input>\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        language: state.language,\r\n        token: state.token,\r\n        regions: state.regions,\r\n        region: state.region,\r\n        editOn: state.editOn\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setSelectedRegion: (region) => {dispatch(setSelectedRegion(region))},\r\n        setRadioSites: (list) => {dispatch(setRadioSites(list))},\r\n        setSelectedRadioSite: (radioSite) => {dispatch(setSelectedRadioSite(radioSite))}\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectRegion);"]},"metadata":{},"sourceType":"module"}