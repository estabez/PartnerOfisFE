{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{connect}from\"react-redux\";import MaximizeContent from\"./MaximizeContent\";import{Row,Col,Card,CardBody,Button,ButtonGroup}from'reactstrap';import{modalImportToggle}from\"../redux/actions\";import SelectRegion from'./SelectRegion';import SelectRadioSite from'./SelectRadioSite';import ReactTooltip from'react-tooltip';// REST\nimport RestApiModule from'../RestApiModule';// Alert\nimport AlertModule from'../AlertModule';var ToolbarMatrix=/*#__PURE__*/function(_React$Component){_inherits(ToolbarMatrix,_React$Component);var _super=_createSuper(ToolbarMatrix);function ToolbarMatrix(props){var _this;_classCallCheck(this,ToolbarMatrix);_this=_super.call(this,props);_this.restApi=new RestApiModule();_this.alert=new AlertModule();return _this;}_createClass(ToolbarMatrix,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState,snapshot){ReactTooltip.rebuild();}},{key:\"openImportModal\",value:function openImportModal(){var _this2=this;var _this$props=this.props,token=_this$props.token,setModalImport=_this$props.setModalImport,language=_this$props.language;this.restApi.callApi('getImportStatus',{token:token}).then(function(response){var isImportOngoing=response.isImportOngoing,user=response.user;if(!isImportOngoing){setModalImport();}else{var message=language.importSection.ongoingImportText.replace('{username}',user);_this2.alert.showMessage('warning',language.importSection.ongoingImportTitle,message,false);}});}},{key:\"render\",value:function render(){var _this3=this;var _this$props2=this.props,language=_this$props2.language,wrapper=_this$props2.wrapper,tooltipPlacement=_this$props2.tooltipPlacement;if(language){return/*#__PURE__*/React.createElement(Card,{className:wrapper},/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{xs:2},/*#__PURE__*/React.createElement(SelectRegion,{handleRegionChange:this.props.handleRegionChange.bind(this)})),/*#__PURE__*/React.createElement(Col,{xs:2},/*#__PURE__*/React.createElement(SelectRadioSite,{handleRadioSiteChange:this.props.handleRadioSiteChange.bind(this)})),/*#__PURE__*/React.createElement(Col,{xs:8,className:\"text-right tools\"},/*#__PURE__*/React.createElement(ButtonGroup,null,language.matrixViewToolbar.map(function(item,key){if(item.clickEvent==='edit'||item.id==='saveOptions'){item.showMe=!_this3.props.editOn;}// disable buttons if edit mode on\nvar disableAttr=_this3.props.editOn?item.showMe:false;// if data empty just import button can be clickable\nif(!_this3.props.isDataExist){disableAttr=!(item.clickEvent==='import');}if(item.id!=='saveOptions'){return/*#__PURE__*/React.createElement(Button,{key:key,\"data-tip\":item.title,\"data-place\":tooltipPlacement,disabled:disableAttr,className:item.showMe?undefined:'d-none',onClick:item.clickEvent==='import'?_this3.openImportModal.bind(_this3):_this3.props[item.clickEvent],color:item.btnClass},/*#__PURE__*/React.createElement(\"i\",{className:\"icon \".concat(item.icon)}));}else if(item.id==='saveOptions'&&_this3.props.editOn){return/*#__PURE__*/React.createElement(\"div\",{className:\"dropdown\",key:key},/*#__PURE__*/React.createElement(Button,{\"data-tip\":item.title,\"data-place\":tooltipPlacement,color:item.btnClass,\"data-toggle\":\"dropdown\"},/*#__PURE__*/React.createElement(\"i\",{className:\"icon \".concat(item.icon)})),/*#__PURE__*/React.createElement(\"div\",{className:\"dropdown-menu dropdown-menu-right\"},item.children.map(function(child,childKey){var showOption=_this3.props.newRowAdded===true?child.showOnNewRow:true;var divClass=\"\".concat(child.class,\" \").concat(showOption?'':' d-none');return/*#__PURE__*/React.createElement(\"div\",{className:divClass,onClick:_this3.props[child.clickEvent],key:childKey},/*#__PURE__*/React.createElement(\"i\",{className:\"icon \".concat(child.icon,\" mr-2\")}),child.title);})));}})),/*#__PURE__*/React.createElement(MaximizeContent,null)))));}else{return/*#__PURE__*/React.createElement(React.Fragment,null);}}}]);return ToolbarMatrix;}(React.Component);function mapStateToProps(state){return{token:state.token,language:state.language,editOn:state.editOn,maximize:state.maximize,tooltipPlacement:state.tooltipPlacement};}function mapDispatchToProps(dispatch){return{setModalImport:function setModalImport(){return dispatch(modalImportToggle());}};}export default connect(mapStateToProps,mapDispatchToProps)(ToolbarMatrix);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/ToolbarMatrix.jsx"],"names":["React","connect","MaximizeContent","Row","Col","Card","CardBody","Button","ButtonGroup","modalImportToggle","SelectRegion","SelectRadioSite","ReactTooltip","RestApiModule","AlertModule","ToolbarMatrix","props","restApi","alert","prevProps","prevState","snapshot","rebuild","token","setModalImport","language","callApi","then","response","isImportOngoing","user","message","importSection","ongoingImportText","replace","showMessage","ongoingImportTitle","wrapper","tooltipPlacement","handleRegionChange","bind","handleRadioSiteChange","matrixViewToolbar","map","item","key","clickEvent","id","showMe","editOn","disableAttr","isDataExist","title","undefined","openImportModal","btnClass","icon","children","child","childKey","showOption","newRowAdded","showOnNewRow","divClass","class","Component","mapStateToProps","state","maximize","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport MaximizeContent from \"./MaximizeContent\";\r\nimport {Row, Col, Card, CardBody, Button, ButtonGroup} from 'reactstrap';\r\nimport {modalImportToggle} from \"../redux/actions\";\r\nimport SelectRegion from './SelectRegion';\r\nimport SelectRadioSite from './SelectRadioSite';\r\nimport ReactTooltip from 'react-tooltip'\r\n\r\n// REST\r\nimport RestApiModule from '../RestApiModule'\r\n// Alert\r\nimport AlertModule from '../AlertModule'\r\n\r\nclass ToolbarMatrix extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.restApi = new RestApiModule();\r\n        this.alert = new AlertModule();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        ReactTooltip.rebuild();\r\n    }\r\n\r\n    openImportModal() {\r\n\r\n        const {token, setModalImport, language} = this.props\r\n\r\n        this.restApi.callApi('getImportStatus', {\r\n            token\r\n        }).then(response => {\r\n\r\n            const {isImportOngoing, user} = response;\r\n\r\n            if (!isImportOngoing) {\r\n                setModalImport()\r\n            } else {\r\n                const message = language.importSection.ongoingImportText.replace('{username}', user);\r\n\r\n                this.alert.showMessage(\r\n                    'warning',\r\n                    language.importSection.ongoingImportTitle,\r\n                    message,\r\n                    false)\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const {language, wrapper, tooltipPlacement} = this.props;\r\n\r\n        if (language) {\r\n\r\n            return (\r\n                <Card className={wrapper}>\r\n                    <CardBody>\r\n\r\n                        <Row>\r\n                            <Col xs={2}>\r\n                                <SelectRegion\r\n                                    handleRegionChange={this.props.handleRegionChange.bind(this)}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col xs={2}>\r\n                                <SelectRadioSite\r\n                                    handleRadioSiteChange={this.props.handleRadioSiteChange.bind(this)}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={8} className=\"text-right tools\">\r\n\r\n                                <ButtonGroup>\r\n                                {\r\n                                language.matrixViewToolbar.map((item, key) => {\r\n\r\n                                    if ((item.clickEvent === 'edit' ||\r\n                                        item.id === 'saveOptions')) {\r\n                                        item.showMe = !this.props.editOn\r\n                                    }\r\n\r\n                                    // disable buttons if edit mode on\r\n                                    let disableAttr = this.props.editOn ? item.showMe : false;\r\n\r\n                                    // if data empty just import button can be clickable\r\n                                    if (!this.props.isDataExist) {\r\n                                        disableAttr = !(item.clickEvent === 'import');\r\n\r\n                                    }\r\n\r\n                                    if (item.id !== 'saveOptions') {\r\n                                        return (\r\n                                            <Button key={key}\r\n                                                    data-tip={item.title}\r\n                                                    data-place={tooltipPlacement}\r\n                                                    disabled={disableAttr}\r\n                                                    className={item.showMe\r\n                                                        ? undefined\r\n                                                        : 'd-none'\r\n                                                    }\r\n                                                    onClick={item.clickEvent === 'import'\r\n                                                        ? this.openImportModal.bind(this)\r\n                                                        : this.props[item.clickEvent]\r\n                                                    }\r\n                                                    color={item.btnClass}>\r\n                                                <i className={`icon ${item.icon}`}/>\r\n                                            </Button>\r\n                                        )\r\n                                    } else if (item.id === 'saveOptions' && this.props.editOn) {\r\n\r\n                                        return (\r\n\r\n                                            <div className=\"dropdown\" key={key}>\r\n                                                <Button data-tip={item.title}\r\n                                                        data-place={tooltipPlacement}\r\n                                                        color={item.btnClass}\r\n                                                        data-toggle=\"dropdown\">\r\n                                                    <i className={`icon ${item.icon}`}/>\r\n                                                </Button>\r\n                                                <div className=\"dropdown-menu dropdown-menu-right\">\r\n                                                    {item.children.map((child, childKey) => {\r\n\r\n                                                        const showOption = this.props.newRowAdded === true\r\n                                                            ? child.showOnNewRow\r\n                                                            : true;\r\n\r\n                                                        const divClass = `${child.class} ${\r\n                                                            (showOption) ? '' : ' d-none'\r\n                                                            }`;\r\n\r\n                                                        return (\r\n                                                            <div className={divClass}\r\n                                                               onClick={this.props[child.clickEvent]}\r\n                                                               key={childKey}>\r\n                                                                <i className={`icon ${child.icon} mr-2`}/>\r\n                                                                {child.title}\r\n                                                            </div>\r\n                                                        )\r\n                                                    })\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                })\r\n                                }\r\n                                </ButtonGroup>\r\n\r\n                                <MaximizeContent/>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        language: state.language,\r\n        editOn: state.editOn,\r\n        maximize: state.maximize,\r\n        tooltipPlacement: state.tooltipPlacement\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModalImport: () => dispatch(modalImportToggle())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToolbarMatrix);"]},"metadata":{},"sourceType":"module"}