{"ast":null,"code":"/*\r\n* Rest Api module\r\n* Use for call rest api methods from one hand\r\n* It includes error handler\r\n*\r\n*/\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\n\nclass RestApiModule {\n  constructor() {\n    this.serverPath = process.env.REACT_APP_API_GATEWAY;\n    this.endpoints = {\n      login: {\n        serviceName: process.env.REACT_APP_AUTH_SERVICE,\n        methodName: \"/LoginWithCredentials\"\n      },\n      logout: {\n        serviceName: process.env.REACT_APP_AUTH_SERVICE,\n        methodName: \"/Logout\"\n      },\n      checkToken: {\n        serviceName: process.env.REACT_APP_AUTH_SERVICE,\n        methodName: \"/LoginWithToken\"\n      },\n      getRoles: {\n        serviceName: process.env.REACT_APP_AUTH_SERVICE,\n        methodName: \"/GetUserRolesList\"\n      },\n      getRegions: {\n        serviceName: process.env.REACT_APP_AUTH_SERVICE,\n        methodName: \"/GetUserRegions\"\n      },\n      ranFirst: {\n        serviceName: process.env.REACT_APP_RAN_SERVICE,\n        methodName: \"/GetRANTopologyFirstLevelforRegion\"\n      },\n      ranSecond: {\n        serviceName: process.env.REACT_APP_RAN_SERVICE,\n        methodName: \"/GetRANTopologySecondLevelforAggregSite\"\n      },\n      core: {\n        serviceName: process.env.REACT_APP_CORE_SERVICE,\n        methodName: \"/CoreTopologyView\"\n      },\n      wdm: {\n        serviceName: process.env.REACT_APP_WDM_SERVICE,\n        methodName: \"/WDMTopologyView\"\n      }\n    };\n  }\n\n  callApi(endpoint, dto) {\n    return new Promise((res, rej) => {\n      const _this$endpoints$endpo = this.endpoints[endpoint],\n            serviceName = _this$endpoints$endpo.serviceName,\n            methodName = _this$endpoints$endpo.methodName;\n      axios({\n        method: \"POST\",\n        url: `${this.serverPath}${serviceName}${methodName}`,\n        data: dto\n      }).then(async response => {\n        //console.log(response);\n        const _response$data = response.data,\n              exec_status = _response$data.exec_status,\n              error_code = _response$data.error_code,\n              error_message = _response$data.error_message;\n\n        if (exec_status === 'success') {\n          res(response.data);\n        }\n\n        if (exec_status === 'error') {\n          if (+error_code === 10) {\n            Swal.fire({\n              title: 'Error',\n              text: error_message,\n              icon: 'error',\n              showCancelButton: false,\n              confirmButtonColor: '#3085d6',\n              cancelButtonColor: '#d33',\n              confirmButtonText: 'OK'\n            }).then(result => {\n              if (result.value) {\n                window.store.dispatch(window.setAuthUser(null));\n                window.store.dispatch(window.setToken(null));\n                document.location = `${process.env.PUBLIC_URL}`;\n                /*Swal.fire(\r\n                    'Deleted!',\r\n                    'Your file has been deleted.',\r\n                    'success'\r\n                )*/\n              }\n            });\n          }\n\n          rej(error_message);\n        }\n      }).catch(err => {\n        rej(err);\n      });\n    });\n  }\n\n  errorHandler() {}\n\n}\n\nexport default RestApiModule;","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/RestApiModule.js"],"names":["axios","Swal","RestApiModule","constructor","serverPath","process","env","REACT_APP_API_GATEWAY","endpoints","login","serviceName","REACT_APP_AUTH_SERVICE","methodName","logout","checkToken","getRoles","getRegions","ranFirst","REACT_APP_RAN_SERVICE","ranSecond","core","REACT_APP_CORE_SERVICE","wdm","REACT_APP_WDM_SERVICE","callApi","endpoint","dto","Promise","res","rej","method","url","data","then","response","exec_status","error_code","error_message","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","value","window","store","dispatch","setAuthUser","setToken","document","location","PUBLIC_URL","catch","err","errorHandler"],"mappings":"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","sourcesContent":["/*\r\n* Rest Api module\r\n* Use for call rest api methods from one hand\r\n* It includes error handler\r\n*\r\n*/\r\n\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\n\r\nclass RestApiModule {\r\n\r\n    constructor() {\r\n        this.serverPath = process.env.REACT_APP_API_GATEWAY;\r\n        this.endpoints = {\r\n            login: {\r\n                serviceName: process.env.REACT_APP_AUTH_SERVICE,\r\n                methodName: \"/LoginWithCredentials\"\r\n            },\r\n            logout: {\r\n                serviceName: process.env.REACT_APP_AUTH_SERVICE,\r\n                methodName: \"/Logout\"\r\n            },\r\n            checkToken: {\r\n                serviceName: process.env.REACT_APP_AUTH_SERVICE,\r\n                methodName: \"/LoginWithToken\"\r\n            },\r\n            getRoles:{\r\n                serviceName: process.env.REACT_APP_AUTH_SERVICE,\r\n                methodName: \"/GetUserRolesList\"\r\n            },\r\n            getRegions: {\r\n                serviceName: process.env.REACT_APP_AUTH_SERVICE,\r\n                methodName: \"/GetUserRegions\"\r\n            },\r\n            ranFirst: {\r\n                serviceName: process.env.REACT_APP_RAN_SERVICE,\r\n                methodName: \"/GetRANTopologyFirstLevelforRegion\",\r\n            },\r\n            ranSecond: {\r\n                serviceName: process.env.REACT_APP_RAN_SERVICE,\r\n                methodName: \"/GetRANTopologySecondLevelforAggregSite\"\r\n            },\r\n            core: {\r\n                serviceName: process.env.REACT_APP_CORE_SERVICE,\r\n                methodName: \"/CoreTopologyView\"\r\n            },\r\n            wdm: {\r\n                serviceName: process.env.REACT_APP_WDM_SERVICE,\r\n                methodName: \"/WDMTopologyView\"\r\n            }\r\n        }\r\n    }\r\n\r\n    callApi(endpoint, dto) {\r\n\r\n        return new Promise((res, rej) => {\r\n            const {serviceName, methodName} = this.endpoints[endpoint];\r\n\r\n            axios({\r\n                method: \"POST\",\r\n                url: `${this.serverPath}${serviceName}${methodName}`,\r\n                data: dto\r\n            }).then(async (response) => {\r\n\r\n                //console.log(response);\r\n\r\n                const {exec_status, error_code, error_message} = response.data;\r\n\r\n                if (exec_status === 'success') {\r\n                    res(response.data);\r\n                }\r\n\r\n                if (exec_status === 'error') {\r\n\r\n                    if (+error_code === 10) {\r\n                        Swal.fire({\r\n                            title: 'Error',\r\n                            text: error_message,\r\n                            icon: 'error',\r\n                            showCancelButton: false,\r\n                            confirmButtonColor: '#3085d6',\r\n                            cancelButtonColor: '#d33',\r\n                            confirmButtonText: 'OK'\r\n                        }).then((result) => {\r\n                            if (result.value) {\r\n                                window.store.dispatch(window.setAuthUser(null));\r\n                                window.store.dispatch(window.setToken(null));\r\n                                document.location = `${process.env.PUBLIC_URL}`;\r\n\r\n                                /*Swal.fire(\r\n                                    'Deleted!',\r\n                                    'Your file has been deleted.',\r\n                                    'success'\r\n                                )*/\r\n                            }\r\n                        })\r\n\r\n\r\n                    }\r\n                    rej(error_message)\r\n                }\r\n\r\n            }).catch((err) => {\r\n\r\n                rej(err)\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    errorHandler() {\r\n\r\n    }\r\n}\r\n\r\nexport default RestApiModule;"]},"metadata":{},"sourceType":"module"}