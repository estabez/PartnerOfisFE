{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\views\\\\Ran.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport Toolbar from '../components/TopologyToolbar';\nimport Header from \"../components/Header\";\nimport Sidebar from \"../components/Sidebar\";\nimport ModalTemplate from '../components/Modal';\nimport TopologyDiagram from '../components/TopologyDiagram';\nimport { modalToggle, modalTitle, setTopologyFirstLevel, setTopologySecondLevel, setTopologySecondLevelDropdownLabels } from \"../redux/actions\";\nimport IconModule from '../IconModule';\nimport RestApiModule from '../RestApiModule';\n\nclass Ran extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.events = {\n      doubleClick: event => {\n        const nodes = event.nodes;\n        const nodeID = nodes[0];\n\n        if (nodeID) {\n          // type must be aggreg_site\n          const node = this.props.graph.nodes.find(item => {\n            return item.id === nodeID;\n          });\n\n          if (node.type === 'AGGREGATE_SITE') {\n            this.getDataByAggregSite(nodeID);\n            this.props.setModalTitle(nodeID);\n          }\n        }\n      }\n      /*afterDrawing: (e) => {\r\n          console.log(e);\r\n      }*/\n\n    };\n    this.Icons = new IconModule();\n    this.state = {\n      firstLevelData: null,\n      dropdownLabels: null\n    };\n    this.unformatedData = null;\n    this.unformatedDataSecondLevel = null;\n    this.restApi = new RestApiModule();\n    this.today = new Date();\n    this.todayDate = '_' + this.today.getDate() + this.today.toLocaleString('default', {\n      month: 'long'\n    }) + this.today.getFullYear();\n    this.fileName = 'RanTopology' + this.todayDate + '.png';\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    await this.getDataByRegion();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  setStateAsync(state) {\n    return new Promise(resolve => {\n      this.setState(state, resolve);\n    });\n  }\n\n  getDataByRegion() {\n    const _this$props = this.props,\n          token = _this$props.token,\n          region = _this$props.region;\n    this.restApi.callApi('ranFirst', {\n      token,\n      region\n    }).then(async response => {\n      const d = response.RANTopologyFirstLevelViewData;\n\n      if (this._isMounted) {\n        await this.setStateAsync({\n          firstLevelData: d\n        });\n        this.prepareFirstLevelData();\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  async getDataByAggregSite(id) {\n    const token = this.props.token;\n    this.restApi.callApi('ranSecond', {\n      selectedNode: id,\n      token\n    }).then(async response => {\n      const d = response.RANTopologySecondLevelViewData;\n      if (d.length > 0) await this.prepareSecondLevelData(d, id);\n      this.props.setModal();\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  prepareFirstLevelData() {\n    let nodes = [],\n        edges = [],\n        labels = [];\n\n    function pushItem(id, type, Icons) {\n      if (type === 'AGGREGATE_SITE') {\n        labels.push(id);\n      }\n\n      nodes.push({\n        id: id,\n        label: id,\n        type: type,\n        shape: 'image',\n        font: {\n          color: 'black',\n          size: '13'\n        },\n        image: Icons.getIconForNode(type)\n      });\n    }\n\n    this.state.firstLevelData.map(item => {\n      const indexA = nodes.findIndex(data => data.id === item.NODE_A);\n\n      if (indexA < 0) {\n        pushItem(item.NODE_A, item.NODE_A_TYPE, this.Icons);\n      }\n\n      const indexB = nodes.findIndex(data => data.id === item.NODE_B);\n\n      if (indexB < 0) {\n        pushItem(item.NODE_B, item.NODE_B_TYPE, this.Icons);\n      }\n\n      edges.push({\n        from: item.NODE_A,\n        to: item.NODE_B\n      });\n    }); // this row for store the first state of graph data.\n    // Once we select a node, it will turn to red font, others will stay black.\n\n    this.unformatedData = {\n      nodes,\n      edges\n    }; // once the data is ready to show, redux is updating.\n\n    this.props.setTopologyFirstLevel({\n      nodes,\n      edges\n    });\n    this.setState({\n      dropdownLabels: labels.sort()\n    });\n  }\n\n  prepareSecondLevelData(data, aggregSite) {\n    let nodes = [],\n        edges = [],\n        labels = [];\n\n    function pushItem(id, Icons) {\n      const radioIcon = Icons.getIconForNode('RADIO_SITE');\n      const aggregIcon = Icons.getIconForNode('AGGREGATE_SITE');\n      nodes.push({\n        id: id,\n        label: id,\n        shape: 'image',\n        font: {\n          color: 'black',\n          size: '13'\n        },\n        image: id === aggregSite ? aggregIcon : radioIcon\n      });\n      if (id !== aggregSite) labels.push(id);\n    }\n\n    if (data) {\n      data.map(item => {\n        const indexA = nodes.findIndex(data => data.id === item.A_SITE);\n\n        if (indexA < 0) {\n          pushItem(item.A_SITE, this.Icons);\n        }\n\n        const indexB = nodes.findIndex(data => data.id === item.Z_SITE);\n\n        if (indexB < 0) {\n          pushItem(item.Z_SITE, this.Icons);\n        }\n\n        edges.push({\n          from: item.A_SITE,\n          to: item.Z_SITE\n        });\n      }); // this row for store the first state of graph data.\n      // Once we select a node, it will turn to red font, others will stay black.\n\n      this.unformatedDataSecondLevel = {\n        nodes,\n        edges\n      }; // set the second level topology diagram.\n      // It will update the redux and it trigger to rerender of modal window.\n\n      this.props.setTopologySecondLevel({\n        nodes,\n        edges\n      }); // set the secondLevel topology view dropdown list\n\n      this.props.setTopologySecondLevelDropDown({\n        dropdownList: labels\n      });\n    }\n  }\n\n  async handleSelectAggregSite(selectedNodeId) {\n    let newGraph = JSON.parse(JSON.stringify(this.unformatedData));\n\n    if (newGraph) {\n      newGraph.nodes.map(node => {\n        if (node.id === selectedNodeId) {\n          node.font = {\n            color: 'red',\n            size: this.props.fontSize\n          };\n          node.size = 555;\n        }\n      });\n      this.props.setTopologyFirstLevel(newGraph);\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          language = _this$props2.language,\n          maximize = _this$props2.maximize,\n          contentCSS = _this$props2.contentCSS,\n          graph = _this$props2.graph;\n    const diagramAreaIdLevelOne = 'diagramLevel1';\n    const diagramAreaIdLevelTwo = 'diagramLevel2';\n\n    if (graph !== null && language !== null) {\n      return React.createElement(React.Fragment, null, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row h-100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(Sidebar, {\n        maximize: maximize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: contentCSS,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(Toolbar, {\n        wrapper: 'card toolbar mt-2',\n        labels: this.state.dropdownLabels,\n        handleAggregSiteChange: this.handleSelectAggregSite.bind(this),\n        handleRegionChange: this.getDataByRegion.bind(this),\n        topologyLevel: 1,\n        diagramAreaId: diagramAreaIdLevelOne,\n        snapshotFileName: this.fileName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: diagramAreaIdLevelOne,\n        className: 'card mt-1 fixedCard',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: 'topologyViewHeader',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, language.ranTopology), React.createElement(TopologyDiagram, {\n        id: 'diagramLevel1',\n        height: '95%',\n        graph: graph,\n        events: this.events,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }))))), React.createElement(ModalTemplate, {\n        diagramAreaId: diagramAreaIdLevelTwo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.token,\n    region: state.region,\n    language: state.language,\n    maximize: state.maximize,\n    contentCSS: state.contentCSS,\n    graph: state.topologyFirstLevel,\n    fontSize: state.topologySelectedNodeFontSize\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setModal: () => dispatch(modalToggle()),\n    setModalTitle: content => dispatch(modalTitle(content)),\n    setTopologyFirstLevel: graph => dispatch(setTopologyFirstLevel(graph)),\n    setTopologySecondLevel: graph => dispatch(setTopologySecondLevel(graph)),\n    setTopologySecondLevelDropDown: labels => dispatch(setTopologySecondLevelDropdownLabels(labels))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ran);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/views/Ran.jsx"],"names":["React","connect","Toolbar","Header","Sidebar","ModalTemplate","TopologyDiagram","modalToggle","modalTitle","setTopologyFirstLevel","setTopologySecondLevel","setTopologySecondLevelDropdownLabels","IconModule","RestApiModule","Ran","Component","constructor","props","_isMounted","events","doubleClick","event","nodes","nodeID","node","graph","find","item","id","type","getDataByAggregSite","setModalTitle","Icons","state","firstLevelData","dropdownLabels","unformatedData","unformatedDataSecondLevel","restApi","today","Date","todayDate","getDate","toLocaleString","month","getFullYear","fileName","componentDidMount","getDataByRegion","componentWillUnmount","setStateAsync","Promise","resolve","setState","token","region","callApi","then","response","d","RANTopologyFirstLevelViewData","prepareFirstLevelData","catch","error","console","log","selectedNode","RANTopologySecondLevelViewData","length","prepareSecondLevelData","setModal","edges","labels","pushItem","push","label","shape","font","color","size","image","getIconForNode","map","indexA","findIndex","data","NODE_A","NODE_A_TYPE","indexB","NODE_B","NODE_B_TYPE","from","to","sort","aggregSite","radioIcon","aggregIcon","A_SITE","Z_SITE","setTopologySecondLevelDropDown","dropdownList","handleSelectAggregSite","selectedNodeId","newGraph","JSON","parse","stringify","fontSize","render","language","maximize","contentCSS","diagramAreaIdLevelOne","diagramAreaIdLevelTwo","bind","ranTopology","mapStateToProps","topologyFirstLevel","topologySelectedNodeFontSize","mapDispatchToProps","dispatch","content"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Toolbar from '../components/TopologyToolbar'\r\nimport Header from \"../components/Header\";\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport ModalTemplate from '../components/Modal'\r\nimport TopologyDiagram from '../components/TopologyDiagram'\r\nimport {\r\n    modalToggle, modalTitle,\r\n    setTopologyFirstLevel,\r\n    setTopologySecondLevel,\r\n    setTopologySecondLevelDropdownLabels\r\n} from \"../redux/actions\";\r\n\r\nimport IconModule from '../IconModule';\r\nimport RestApiModule from '../RestApiModule'\r\n\r\nclass Ran extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.Icons = new IconModule();\r\n\r\n        this.state = {\r\n            firstLevelData: null,\r\n            dropdownLabels: null,\r\n        }\r\n\r\n        this.unformatedData = null\r\n        this.unformatedDataSecondLevel = null\r\n\r\n        this.restApi = new RestApiModule();\r\n\r\n        this.today = new Date();\r\n        this.todayDate = '_' + this.today.getDate() +  (this.today.toLocaleString('default', { month: 'long' })) + this.today.getFullYear();\r\n        this.fileName = 'RanTopology' + this.todayDate + '.png';\r\n    }\r\n\r\n    events = {\r\n        doubleClick: (event) => {\r\n            const {nodes} = event;\r\n            const nodeID = nodes[0];\r\n\r\n            if (nodeID) {\r\n                // type must be aggreg_site\r\n                const node = this.props.graph.nodes.find((item) => {\r\n                    return item.id === nodeID\r\n                });\r\n                if (node.type === 'AGGREGATE_SITE') {\r\n                    this.getDataByAggregSite(nodeID);\r\n\r\n                    this.props.setModalTitle(nodeID);\r\n\r\n                }\r\n            }\r\n        },\r\n        /*afterDrawing: (e) => {\r\n            console.log(e);\r\n        }*/\r\n    };\r\n\r\n    async componentDidMount() {\r\n\r\n        this._isMounted = true;\r\n        await this.getDataByRegion();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    setStateAsync(state) {\r\n        return new Promise((resolve) => {\r\n            this.setState(state, resolve)\r\n        });\r\n    }\r\n\r\n    getDataByRegion() {\r\n\r\n        const {token, region} = this.props;\r\n\r\n        this.restApi.callApi('ranFirst', {\r\n            token,\r\n            region\r\n\r\n        }).then(async (response) => {\r\n\r\n            const d = response.RANTopologyFirstLevelViewData;\r\n\r\n            if (this._isMounted) {\r\n                await this.setStateAsync({firstLevelData: d});\r\n\r\n                this.prepareFirstLevelData();\r\n            }\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n        });\r\n\r\n    }\r\n\r\n    async getDataByAggregSite(id) {\r\n\r\n        const {token} = this.props;\r\n\r\n        this.restApi.callApi('ranSecond', {\r\n            selectedNode: id,\r\n            token\r\n\r\n        }).then(async (response) => {\r\n\r\n            const d = response.RANTopologySecondLevelViewData;\r\n\r\n            if (d.length > 0) await this.prepareSecondLevelData(d, id);\r\n\r\n            this.props.setModal();\r\n\r\n        }).catch((error) => {\r\n            console.log(error)\r\n        });\r\n    }\r\n\r\n    prepareFirstLevelData() {\r\n\r\n        let nodes = [], edges = [], labels = [];\r\n\r\n        function pushItem(id, type, Icons) {\r\n\r\n            if (type === 'AGGREGATE_SITE') {\r\n                labels.push(id);\r\n            }\r\n            nodes.push({\r\n                id: id,\r\n                label: id,\r\n                type: type,\r\n                shape: 'image',\r\n                font: {color: 'black', size: '13'},\r\n                image: Icons.getIconForNode(type)\r\n            })\r\n        }\r\n\r\n        this.state.firstLevelData.map((item) => {\r\n\r\n            const indexA = nodes.findIndex(data => data.id === item.NODE_A);\r\n            if (indexA < 0) {\r\n                pushItem(item.NODE_A, item.NODE_A_TYPE, this.Icons);\r\n            }\r\n\r\n            const indexB = nodes.findIndex(data => data.id === item.NODE_B);\r\n            if (indexB < 0) {\r\n                pushItem(item.NODE_B, item.NODE_B_TYPE, this.Icons);\r\n            }\r\n\r\n            edges.push({\r\n                from: item.NODE_A,\r\n                to: item.NODE_B\r\n            });\r\n        });\r\n\r\n        // this row for store the first state of graph data.\r\n        // Once we select a node, it will turn to red font, others will stay black.\r\n        this.unformatedData = {nodes, edges};\r\n\r\n        // once the data is ready to show, redux is updating.\r\n        this.props.setTopologyFirstLevel({\r\n            nodes,\r\n            edges\r\n        });\r\n\r\n        this.setState({dropdownLabels: labels.sort()});\r\n\r\n    }\r\n\r\n    prepareSecondLevelData(data, aggregSite) {\r\n\r\n        let nodes = [], edges = [], labels = [];\r\n\r\n        function pushItem(id, Icons) {\r\n\r\n            const radioIcon = Icons.getIconForNode('RADIO_SITE');\r\n            const aggregIcon = Icons.getIconForNode('AGGREGATE_SITE');\r\n\r\n            nodes.push({\r\n                id: id,\r\n                label: id,\r\n                shape: 'image',\r\n                font: {color: 'black', size: '13'},\r\n                image: id === aggregSite ? aggregIcon : radioIcon\r\n            })\r\n\r\n            if (id !== aggregSite) labels.push(id);\r\n        }\r\n\r\n        if (data) {\r\n            data.map((item) => {\r\n\r\n                const indexA = nodes.findIndex(data => data.id === item.A_SITE);\r\n                if (indexA < 0) {\r\n                    pushItem(item.A_SITE, this.Icons);\r\n                }\r\n\r\n                const indexB = nodes.findIndex(data => data.id === item.Z_SITE);\r\n                if (indexB < 0) {\r\n                    pushItem(item.Z_SITE, this.Icons);\r\n                }\r\n\r\n                edges.push({\r\n                    from: item.A_SITE,\r\n                    to: item.Z_SITE\r\n                });\r\n            });\r\n\r\n            // this row for store the first state of graph data.\r\n            // Once we select a node, it will turn to red font, others will stay black.\r\n            this.unformatedDataSecondLevel = {nodes, edges};\r\n\r\n            // set the second level topology diagram.\r\n            // It will update the redux and it trigger to rerender of modal window.\r\n            this.props.setTopologySecondLevel({\r\n                nodes,\r\n                edges\r\n            });\r\n\r\n            // set the secondLevel topology view dropdown list\r\n            this.props.setTopologySecondLevelDropDown({\r\n                dropdownList: labels\r\n            })\r\n        }\r\n    }\r\n\r\n    async handleSelectAggregSite(selectedNodeId) {\r\n\r\n        let newGraph = JSON.parse(JSON.stringify(this.unformatedData));\r\n\r\n        if (newGraph) {\r\n            newGraph.nodes.map((node) => {\r\n                if (node.id === selectedNodeId) {\r\n                    node.font = {color: 'red', size: this.props.fontSize};\r\n                    node.size = 555;\r\n                }\r\n            });\r\n            this.props.setTopologyFirstLevel(newGraph);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {language, maximize, contentCSS, graph} = this.props;\r\n        const diagramAreaIdLevelOne = 'diagramLevel1';\r\n        const diagramAreaIdLevelTwo = 'diagramLevel2';\r\n\r\n        if (graph !== null && language !== null) {\r\n            return (\r\n                <>\r\n                    <Header/>\r\n                    <div className=\"row h-100\">\r\n                        <Sidebar maximize={maximize}/>\r\n                        <div className={contentCSS}>\r\n                            <Toolbar wrapper={'card toolbar mt-2'}\r\n                                     labels={this.state.dropdownLabels}\r\n                                     handleAggregSiteChange={this.handleSelectAggregSite.bind(this)}\r\n                                     handleRegionChange={this.getDataByRegion.bind(this)}\r\n                                     topologyLevel={1}\r\n                                     diagramAreaId={diagramAreaIdLevelOne}\r\n                                     snapshotFileName={this.fileName}\r\n                            />\r\n\r\n                            <div id={diagramAreaIdLevelOne} className={'card mt-1 fixedCard'}>\r\n                                <div className=\"card-body\">\r\n                                    <h4 className={'topologyViewHeader'}>{language.ranTopology}</h4>\r\n                                    <TopologyDiagram\r\n                                        id={'diagramLevel1'}\r\n                                        height={'95%'}\r\n                                        graph={graph}\r\n                                        events={this.events}/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <ModalTemplate diagramAreaId={diagramAreaIdLevelTwo} />\r\n                </>\r\n            )\r\n        } else {\r\n            return (<></>);\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        region: state.region,\r\n        language: state.language,\r\n        maximize: state.maximize,\r\n        contentCSS: state.contentCSS,\r\n        graph: state.topologyFirstLevel,\r\n        fontSize: state.topologySelectedNodeFontSize\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModal: () => dispatch(modalToggle()),\r\n        setModalTitle: (content) => dispatch(modalTitle(content)),\r\n        setTopologyFirstLevel: (graph) => dispatch(setTopologyFirstLevel(graph)),\r\n        setTopologySecondLevel: (graph) => dispatch(setTopologySecondLevel(graph)),\r\n        setTopologySecondLevelDropDown: (labels) => dispatch(setTopologySecondLevelDropdownLabels(labels))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Ran);"]},"metadata":{},"sourceType":"module"}