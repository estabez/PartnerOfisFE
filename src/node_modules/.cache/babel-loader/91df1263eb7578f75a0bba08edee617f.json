{"ast":null,"code":"/*\n * JavaScript Canvas to Blob\n * https://github.com/blueimp/JavaScript-Canvas-to-Blob\n *\n * Copyright 2012, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on stackoverflow user Stoive's code snippet:\n * http://stackoverflow.com/q/4998908\n */\n\n/* global define, Uint8Array, ArrayBuffer, module */\n;\n\n(function (window) {\n  'use strict';\n\n  var CanvasPrototype = window.HTMLCanvasElement && window.HTMLCanvasElement.prototype;\n\n  var hasBlobConstructor = window.Blob && function () {\n    try {\n      return Boolean(new Blob());\n    } catch (e) {\n      return false;\n    }\n  }();\n\n  var hasArrayBufferViewSupport = hasBlobConstructor && window.Uint8Array && function () {\n    try {\n      return new Blob([new Uint8Array(100)]).size === 100;\n    } catch (e) {\n      return false;\n    }\n  }();\n\n  var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n  var dataURIPattern = /^data:((.*?)(;charset=.*?)?)(;base64)?,/;\n\n  var dataURLtoBlob = (hasBlobConstructor || BlobBuilder) && window.atob && window.ArrayBuffer && window.Uint8Array && function (dataURI) {\n    var matches, mediaType, isBase64, dataString, byteString, arrayBuffer, intArray, i, bb; // Parse the dataURI components as per RFC 2397\n\n    matches = dataURI.match(dataURIPattern);\n\n    if (!matches) {\n      throw new Error('invalid data URI');\n    } // Default to text/plain;charset=US-ASCII\n\n\n    mediaType = matches[2] ? matches[1] : 'text/plain' + (matches[3] || ';charset=US-ASCII');\n    isBase64 = !!matches[4];\n    dataString = dataURI.slice(matches[0].length);\n\n    if (isBase64) {\n      // Convert base64 to raw binary data held in a string:\n      byteString = atob(dataString);\n    } else {\n      // Convert base64/URLEncoded data component to raw binary:\n      byteString = decodeURIComponent(dataString);\n    } // Write the bytes of the string to an ArrayBuffer:\n\n\n    arrayBuffer = new ArrayBuffer(byteString.length);\n    intArray = new Uint8Array(arrayBuffer);\n\n    for (i = 0; i < byteString.length; i += 1) {\n      intArray[i] = byteString.charCodeAt(i);\n    } // Write the ArrayBuffer (or ArrayBufferView) to a blob:\n\n\n    if (hasBlobConstructor) {\n      return new Blob([hasArrayBufferViewSupport ? intArray : arrayBuffer], {\n        type: mediaType\n      });\n    }\n\n    bb = new BlobBuilder();\n    bb.append(arrayBuffer);\n    return bb.getBlob(mediaType);\n  };\n\n  if (window.HTMLCanvasElement && !CanvasPrototype.toBlob) {\n    if (CanvasPrototype.mozGetAsFile) {\n      CanvasPrototype.toBlob = function (callback, type, quality) {\n        var self = this;\n        setTimeout(function () {\n          if (quality && CanvasPrototype.toDataURL && dataURLtoBlob) {\n            callback(dataURLtoBlob(self.toDataURL(type, quality)));\n          } else {\n            callback(self.mozGetAsFile('blob', type));\n          }\n        });\n      };\n    } else if (CanvasPrototype.toDataURL && dataURLtoBlob) {\n      CanvasPrototype.toBlob = function (callback, type, quality) {\n        var self = this;\n        setTimeout(function () {\n          callback(dataURLtoBlob(self.toDataURL(type, quality)));\n        });\n      };\n    }\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return dataURLtoBlob;\n    });\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = dataURLtoBlob;\n  } else {\n    window.dataURLtoBlob = dataURLtoBlob;\n  }\n})(window);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/SSCM/ss/src/node_modules/blueimp-canvas-to-blob/js/canvas-to-blob.js"],"names":["window","CanvasPrototype","HTMLCanvasElement","prototype","hasBlobConstructor","Blob","Boolean","e","hasArrayBufferViewSupport","Uint8Array","size","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","dataURIPattern","dataURLtoBlob","atob","ArrayBuffer","dataURI","matches","mediaType","isBase64","dataString","byteString","arrayBuffer","intArray","i","bb","match","Error","slice","length","decodeURIComponent","charCodeAt","type","append","getBlob","toBlob","mozGetAsFile","callback","quality","self","setTimeout","toDataURL","define","amd","module","exports"],"mappings":"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","sourcesContent":["/*\n * JavaScript Canvas to Blob\n * https://github.com/blueimp/JavaScript-Canvas-to-Blob\n *\n * Copyright 2012, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on stackoverflow user Stoive's code snippet:\n * http://stackoverflow.com/q/4998908\n */\n\n/* global define, Uint8Array, ArrayBuffer, module */\n\n;(function (window) {\n  'use strict'\n\n  var CanvasPrototype =\n    window.HTMLCanvasElement && window.HTMLCanvasElement.prototype\n  var hasBlobConstructor =\n    window.Blob &&\n    (function () {\n      try {\n        return Boolean(new Blob())\n      } catch (e) {\n        return false\n      }\n    })()\n  var hasArrayBufferViewSupport =\n    hasBlobConstructor &&\n    window.Uint8Array &&\n    (function () {\n      try {\n        return new Blob([new Uint8Array(100)]).size === 100\n      } catch (e) {\n        return false\n      }\n    })()\n  var BlobBuilder =\n    window.BlobBuilder ||\n    window.WebKitBlobBuilder ||\n    window.MozBlobBuilder ||\n    window.MSBlobBuilder\n  var dataURIPattern = /^data:((.*?)(;charset=.*?)?)(;base64)?,/\n  var dataURLtoBlob =\n    (hasBlobConstructor || BlobBuilder) &&\n    window.atob &&\n    window.ArrayBuffer &&\n    window.Uint8Array &&\n    function (dataURI) {\n      var matches,\n        mediaType,\n        isBase64,\n        dataString,\n        byteString,\n        arrayBuffer,\n        intArray,\n        i,\n        bb\n      // Parse the dataURI components as per RFC 2397\n      matches = dataURI.match(dataURIPattern)\n      if (!matches) {\n        throw new Error('invalid data URI')\n      }\n      // Default to text/plain;charset=US-ASCII\n      mediaType = matches[2]\n        ? matches[1]\n        : 'text/plain' + (matches[3] || ';charset=US-ASCII')\n      isBase64 = !!matches[4]\n      dataString = dataURI.slice(matches[0].length)\n      if (isBase64) {\n        // Convert base64 to raw binary data held in a string:\n        byteString = atob(dataString)\n      } else {\n        // Convert base64/URLEncoded data component to raw binary:\n        byteString = decodeURIComponent(dataString)\n      }\n      // Write the bytes of the string to an ArrayBuffer:\n      arrayBuffer = new ArrayBuffer(byteString.length)\n      intArray = new Uint8Array(arrayBuffer)\n      for (i = 0; i < byteString.length; i += 1) {\n        intArray[i] = byteString.charCodeAt(i)\n      }\n      // Write the ArrayBuffer (or ArrayBufferView) to a blob:\n      if (hasBlobConstructor) {\n        return new Blob([hasArrayBufferViewSupport ? intArray : arrayBuffer], {\n          type: mediaType\n        })\n      }\n      bb = new BlobBuilder()\n      bb.append(arrayBuffer)\n      return bb.getBlob(mediaType)\n    }\n  if (window.HTMLCanvasElement && !CanvasPrototype.toBlob) {\n    if (CanvasPrototype.mozGetAsFile) {\n      CanvasPrototype.toBlob = function (callback, type, quality) {\n        var self = this\n        setTimeout(function () {\n          if (quality && CanvasPrototype.toDataURL && dataURLtoBlob) {\n            callback(dataURLtoBlob(self.toDataURL(type, quality)))\n          } else {\n            callback(self.mozGetAsFile('blob', type))\n          }\n        })\n      }\n    } else if (CanvasPrototype.toDataURL && dataURLtoBlob) {\n      CanvasPrototype.toBlob = function (callback, type, quality) {\n        var self = this\n        setTimeout(function () {\n          callback(dataURLtoBlob(self.toDataURL(type, quality)))\n        })\n      }\n    }\n  }\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return dataURLtoBlob\n    })\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = dataURLtoBlob\n  } else {\n    window.dataURLtoBlob = dataURLtoBlob\n  }\n})(window)\n"]},"metadata":{},"sourceType":"script"}