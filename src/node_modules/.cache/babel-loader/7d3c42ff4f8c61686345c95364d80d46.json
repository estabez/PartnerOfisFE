{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\components\\\\ModalImport.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { modalImportToggle, spinnerToggle } from \"../redux/actions\";\nimport FileUploadProgress from 'react-fileupload-progress';\nimport XLSX from \"xlsx\";\nimport { groupingMap } from '../matrixDataMap';\nimport RestApiModule from '../RestApiModule';\nimport { Row, Col, Card, CardBody, CardTitle, CardText, CardHeader, Alert, Button } from 'reactstrap';\nimport { saveAs } from 'file-saver'; // Alert module import\n\nimport AlertModule from '../AlertModule';\n\nclass ModalImport extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: null,\n      isExcelHeadersValid: null,\n      progress: -1,\n      showButton1: true,\n      showButton2: false,\n      showButton3: false\n    };\n    this.fileJSON = {};\n    this.data = [];\n    this.cols = [];\n    const _process$env = process.env,\n          REACT_APP_API_GATEWAY = _process$env.REACT_APP_API_GATEWAY,\n          REACT_APP_MATRIX_SERVICE = _process$env.REACT_APP_MATRIX_SERVICE;\n    this.uploadFileUrl = `${REACT_APP_API_GATEWAY}${REACT_APP_MATRIX_SERVICE}/ImportDataMatrixFromExcel`;\n    this.restApi = new RestApiModule();\n    this.alert = new AlertModule();\n    this.fileInput = React.createRef();\n    this.styleBar = {\n      width: 0\n    };\n    this.progressAction = null; // handle interval\n  }\n\n  handleSelectFile(e) {\n    function checkFileType(file) {\n      const allowedTypes = process.env.REACT_APP_ACCEPTED_IMPORT_FILE_EXT.split(\",\");\n      const extension = file.name.substring(file.name.lastIndexOf('.'));\n      return allowedTypes.includes(extension);\n    }\n\n    const files = e.target.files;\n    if (files && files[0]) if (checkFileType(files[0])) {\n      this.setState({\n        file: files[0],\n        showButton2: true,\n        isExcelHeadersValid: null\n      });\n    } else {\n      const language = this.props.language;\n      this.alert.showMessage(\"error\", language.importSection.wrongFileExtTitle, language.importSection.wrongFileExt, false);\n    }\n  }\n\n  handleFile() {\n    /* Boilerplate to set up FileReader */\n    this.props.setSpinner();\n\n    try {\n      const reader = new FileReader();\n      const rABS = !!reader.readAsBinaryString;\n\n      reader.onload = e => {\n        /* Parse data */\n        const bstr = e.target.result;\n        const wb = XLSX.read(bstr, {\n          type: rABS ? 'binary' : 'array',\n          bookVBA: true,\n          sheetRows: 0\n        });\n        /* Get first worksheet */\n\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n\n        const data = XLSX.utils.sheet_to_json(ws, {\n          header: 1,\n          defval: \"\"\n        });\n        /* Store the json data */\n\n        this.fileJSON = JSON.stringify(data, null, 2);\n        this.handleJSONHeaders();\n        this.props.setSpinner();\n      };\n\n      if (rABS) {\n        reader.readAsBinaryString(this.state.file);\n      } else {\n        reader.readAsArrayBuffer(this.state.file);\n      }\n    } catch (e) {\n      this.setState({\n        showButton3: false\n      });\n      this.props.setSpinner();\n    }\n  }\n\n  handleJSONHeaders() {\n    const headerMap = JSON.parse(JSON.stringify(groupingMap));\n    const excelHeadersArray = JSON.parse(this.fileJSON)[1];\n    const columnsMap = headerMap.reduce((fullArr, item) => {\n      const cols = item.columns.reduce((arr, col) => {\n        if (col.importColumnId !== undefined) arr.push(col.importColumnId);\n        return arr;\n      }, []);\n      return [...fullArr, ...cols];\n    }, []);\n    const isSame = JSON.stringify(excelHeadersArray) === JSON.stringify(columnsMap);\n    this.setState({\n      isExcelHeadersValid: isSame,\n      showButton3: isSame,\n      showButton2: !isSame\n    });\n\n    if (!isSame) {\n      this.setState({\n        file: null,\n        showButton2: false\n      });\n    }\n  }\n\n  downloadLogFile() {\n    const importActionResponse = this.state.importActionResponse;\n\n    if (importActionResponse) {\n      const today = new Date();\n      const todayDate = '_' + today.getDate() + today.toLocaleString('default', {\n        month: 'long'\n      }) + today.getFullYear();\n\n      const _JSON$parse = JSON.parse(importActionResponse),\n            importResult = _JSON$parse.importResult;\n\n      const log = importResult[0].log;\n      const blob = new Blob([log], {\n        type: \"text/plain;charset=utf-8\"\n      });\n      saveAs(blob, `importDetailedLog${todayDate}.txt`);\n    }\n  }\n\n  toggle() {\n    this.setState({\n      file: null,\n      isExcelHeadersValid: null,\n      importActionResponse: null,\n      showButton2: false,\n      showButton3: false,\n      progress: -1\n    });\n    this.props.setModalImport();\n  }\n\n  customFormRenderer(onSubmit) {\n    const language = this.props.language;\n    return React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: 'success',\n      size: \"lg\",\n      block: true,\n      hidden: !this.state.showButton3,\n      onClick: e => {\n        this.alert.getConfirmation(\"warning\", language.importSection.warningTitleForLastStep, language.importSection.warningMessageForLastStep).then(response => {\n          if (response === true) {\n            this.setState({\n              showButton3: false\n            });\n            onSubmit(e);\n          }\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, language.upload, React.createElement(\"i\", {\n      className: `icon icon-upload ml-2`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }))));\n  }\n\n  formGetter() {\n    return JSON.stringify({\n      token: this.props.token,\n      importedExcelAsJSON: this.fileJSON\n    });\n  }\n\n  customProgressRenderer(progressFile, hasError, cancelHandler) {\n    const language = this.props.language;\n\n    function countOfRowsText(count) {\n      return +count > 1 ? `${count} ${language.importSection.rows}` : `${count} ${language.importSection.rows.slice(0, -1)}`;\n    }\n\n    const progress = this.state.progress;\n\n    if (hasError || progress > -1) {\n      let progressBar = Object.assign({}, this.styleBar);\n      progressBar.width = `${progress}%`;\n      let result = null;\n      const importActionResponse = this.state.importActionResponse;\n\n      if (importActionResponse && progress === 100) {\n        const jsonResponse = JSON.parse(importActionResponse);\n        const importResult = jsonResponse.importResult,\n              exec_status = jsonResponse.exec_status,\n              error_code = jsonResponse.error_code,\n              error_message = jsonResponse.error_message;\n\n        if (exec_status === \"error\") {\n          this.setState({\n            progress: 0\n          });\n          const message = error_message ? error_message : \"Null exception\";\n\n          if (+error_code === 10) {\n            this.alert.showMessage('error', 'Error', message, true);\n          } else {\n            this.alert.showMessage('error', 'Error', message, false);\n          }\n        }\n\n        if (importResult) {\n          result = importResult[0]; // Import finish successfully, then reload the data.\n\n          if (result && +progress === 100) {\n            this.props.loadAfterImport();\n          }\n        }\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"progressWrapper text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, \"Import progress: \", `${progress}%`), React.createElement(\"div\", {\n        className: \"progressBar\",\n        style: progressBar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      })))), hasError && React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(Alert, {\n        color: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon icon-triangle-warning mr-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }), language.importSection.progressError))), progress === 100 && result && !hasError && React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(Card, {\n        body: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, language.importSection.summaryLabel), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, React.createElement(Card, {\n        color: \"primary\",\n        inverse: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        tag: \"h5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, language.importSection.totalRowCount), React.createElement(CardText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, language.importSection.totalRowText), React.createElement(Alert, {\n        tag: \"h4\",\n        color: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, countOfRowsText(result.totalcount))))), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, React.createElement(Card, {\n        color: \"success\",\n        inverse: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        tag: \"h5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, language.importSection.successRowCount), React.createElement(CardText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, language.importSection.successRowText), React.createElement(Alert, {\n        tag: \"h4\",\n        color: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, countOfRowsText(result.successCount))))), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, React.createElement(Card, {\n        color: \"danger\",\n        inverse: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        tag: \"h5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, language.importSection.failedRowCount), React.createElement(CardText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, language.importSection.failedRowText), React.createElement(Alert, {\n        tag: \"h4\",\n        color: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, countOfRowsText(result.errorcount)))))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"primary\",\n        className: \"mt-3\",\n        block: true,\n        size: \"lg\",\n        onClick: this.downloadLogFile.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, language.importSection.downloadLogFile, React.createElement(\"i\", {\n        className: `icon icon-download-save ml-2`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      })))))))));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n  render() {\n    const language = this.props.language;\n\n    if (language) {\n      return React.createElement(Modal, {\n        isOpen: this.props.open,\n        size: 'lg',\n        centered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggle.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347\n        },\n        __self: this\n      }, language.importDataMatrixFile), React.createElement(ModalBody, {\n        className: 'import-file',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: fileInput => this.fileInput = fileInput,\n        type: \"file\",\n        accept: process.env.REACT_APP_ACCEPTED_IMPORT_FILE_TYPE,\n        onChange: this.handleSelectFile.bind(this),\n        hidden: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: '12',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, !this.state.file && React.createElement(\"div\", {\n        className: 'choose-file-wrapper',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"chose-file\",\n        onClick: () => this.fileInput.click(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }, language.chooseFile)), this.state.file && React.createElement(\"div\", {\n        className: 'choose-file-wrapper',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }, language.importSection.selectedFileLabel, this.state.file.name))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }, this.state.showButton2 && React.createElement(Button, {\n        color: 'primary',\n        className: 'mt-3 mb-3',\n        size: \"lg\",\n        block: true,\n        onClick: this.handleFile.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      }, language.validate, React.createElement(\"i\", {\n        className: `icon icon-file ml-2`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      })), this.state.isExcelHeadersValid === true && React.createElement(Alert, {\n        color: \"success\",\n        className: 'mt-2',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: `icon icon-check mr-2`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383\n        },\n        __self: this\n      }), language.importSection.selectedFileValid), this.state.isExcelHeadersValid === false && React.createElement(Alert, {\n        color: \"danger\",\n        className: 'mt-2',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: `icon icon-cross mr-2`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      }), language.importSection.selectedFileNotValid))), React.createElement(FileUploadProgress, {\n        url: this.uploadFileUrl,\n        method: \"POST\",\n        beforeSend: request => {\n          this.props.setSpinner();\n          this.setState({\n            progress: Math.floor(Math.random() * 16) + 10\n          });\n          request.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n          return request;\n        },\n        onProgress: (e, request, progress) => {\n          if (this.state.progress < 95) {\n            this.progressAction = setInterval(() => {\n              let increase = Math.floor(Math.random() * 5) + 5;\n              this.setState({\n                progress: increase + +this.state.progress\n              });\n            }, 2000);\n          }\n        },\n        onLoad: (e, request) => {\n          clearInterval(this.progressAction);\n          setTimeout(() => {\n            this.setState({\n              progress: 100,\n              importActionResponse: request.response\n            });\n          }, 200);\n          this.props.setSpinner();\n        },\n        onError: (e, request) => {\n          this.props.setSpinner();\n        },\n        onAbort: (e, request) => {\n          this.props.setSpinner();\n        },\n        formGetter: this.formGetter.bind(this),\n        formRenderer: this.customFormRenderer.bind(this),\n        progressRenderer: this.customProgressRenderer.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    open: state.modalImportToggle,\n    import: state.import,\n    language: state.language,\n    token: state.token\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setModalImport: () => dispatch(modalImportToggle()),\n    setSpinner: () => dispatch(spinnerToggle())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalImport);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/ModalImport.jsx"],"names":["React","connect","Modal","ModalHeader","ModalBody","modalImportToggle","spinnerToggle","FileUploadProgress","XLSX","groupingMap","RestApiModule","Row","Col","Card","CardBody","CardTitle","CardText","CardHeader","Alert","Button","saveAs","AlertModule","ModalImport","Component","constructor","props","state","file","isExcelHeadersValid","progress","showButton1","showButton2","showButton3","fileJSON","data","cols","process","env","REACT_APP_API_GATEWAY","REACT_APP_MATRIX_SERVICE","uploadFileUrl","restApi","alert","fileInput","createRef","styleBar","width","progressAction","handleSelectFile","e","checkFileType","allowedTypes","REACT_APP_ACCEPTED_IMPORT_FILE_EXT","split","extension","name","substring","lastIndexOf","includes","files","target","setState","language","showMessage","importSection","wrongFileExtTitle","wrongFileExt","handleFile","setSpinner","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","sheetRows","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","defval","JSON","stringify","handleJSONHeaders","readAsArrayBuffer","headerMap","parse","excelHeadersArray","columnsMap","reduce","fullArr","item","columns","arr","col","importColumnId","undefined","push","isSame","downloadLogFile","importActionResponse","today","Date","todayDate","getDate","toLocaleString","month","getFullYear","importResult","log","blob","Blob","toggle","setModalImport","customFormRenderer","onSubmit","getConfirmation","warningTitleForLastStep","warningMessageForLastStep","then","response","upload","formGetter","token","importedExcelAsJSON","customProgressRenderer","progressFile","hasError","cancelHandler","countOfRowsText","count","rows","slice","progressBar","Object","assign","jsonResponse","exec_status","error_code","error_message","message","loadAfterImport","progressError","summaryLabel","totalRowCount","totalRowText","totalcount","successRowCount","successRowText","successCount","failedRowCount","failedRowText","errorcount","bind","render","open","importDataMatrixFile","REACT_APP_ACCEPTED_IMPORT_FILE_TYPE","click","chooseFile","selectedFileLabel","validate","selectedFileValid","selectedFileNotValid","request","Math","floor","random","setRequestHeader","setInterval","increase","clearInterval","setTimeout","mapStateToProps","import","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Modal, ModalHeader, ModalBody} from 'reactstrap';\r\nimport {modalImportToggle, spinnerToggle} from \"../redux/actions\";\r\nimport FileUploadProgress from 'react-fileupload-progress';\r\nimport XLSX from \"xlsx\";\r\nimport {groupingMap} from '../matrixDataMap';\r\nimport RestApiModule from '../RestApiModule';\r\nimport {Row, Col, Card, CardBody, CardTitle, CardText, CardHeader, Alert, Button} from 'reactstrap';\r\nimport {saveAs} from 'file-saver';\r\n\r\n// Alert module import\r\nimport AlertModule from '../AlertModule'\r\n\r\nclass ModalImport extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file: null,\r\n            isExcelHeadersValid: null,\r\n            progress: -1,\r\n            showButton1: true,\r\n            showButton2: false,\r\n            showButton3: false,\r\n        }\r\n\r\n        this.fileJSON = {};\r\n        this.data = [];\r\n        this.cols = [];\r\n        const {REACT_APP_API_GATEWAY, REACT_APP_MATRIX_SERVICE} = process.env;\r\n\r\n        this.uploadFileUrl = `${REACT_APP_API_GATEWAY}${REACT_APP_MATRIX_SERVICE}/ImportDataMatrixFromExcel`;\r\n\r\n        this.restApi = new RestApiModule();\r\n        this.alert = new AlertModule();\r\n\r\n        this.fileInput = React.createRef();\r\n\r\n        this.styleBar = {\r\n            width: 0,\r\n        }\r\n\r\n        this.progressAction = null; // handle interval\r\n\r\n    }\r\n\r\n    handleSelectFile(e) {\r\n        function checkFileType(file) {\r\n            const allowedTypes = process.env.REACT_APP_ACCEPTED_IMPORT_FILE_EXT.split(\",\");\r\n            const extension = file.name.substring(file.name.lastIndexOf('.'));\r\n            return allowedTypes.includes(extension);\r\n        }\r\n\r\n        const files = e.target.files;\r\n\r\n        if (files && files[0])\r\n            if (checkFileType(files[0])) {\r\n                this.setState({\r\n                    file: files[0],\r\n                    showButton2: true,\r\n                    isExcelHeadersValid: null\r\n                });\r\n            } else {\r\n                const {language} = this.props;\r\n                this.alert.showMessage(\"error\",\r\n                    language.importSection.wrongFileExtTitle,\r\n                    language.importSection.wrongFileExt,\r\n                    false)\r\n            }\r\n    };\r\n\r\n    handleFile() {\r\n        /* Boilerplate to set up FileReader */\r\n        this.props.setSpinner();\r\n        try {\r\n\r\n            const reader = new FileReader();\r\n            const rABS = !!reader.readAsBinaryString;\r\n            reader.onload = (e) => {\r\n                /* Parse data */\r\n                const bstr = e.target.result;\r\n                const wb = XLSX.read(bstr, {type: rABS ? 'binary' : 'array', bookVBA: true, sheetRows: 0});\r\n                /* Get first worksheet */\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n\r\n                /* Convert array of arrays */\r\n                const data = XLSX.utils.sheet_to_json(ws, {\r\n                    header: 1,\r\n                    defval: \"\"\r\n                });\r\n\r\n                /* Store the json data */\r\n                this.fileJSON = JSON.stringify(data, null, 2);\r\n\r\n                this.handleJSONHeaders();\r\n\r\n                this.props.setSpinner();\r\n            };\r\n\r\n            if (rABS) {\r\n                reader.readAsBinaryString(this.state.file);\r\n            } else {\r\n                reader.readAsArrayBuffer(this.state.file);\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n            this.setState({showButton3: false})\r\n            this.props.setSpinner();\r\n        }\r\n\r\n    }\r\n\r\n    handleJSONHeaders () {\r\n\r\n        const headerMap = JSON.parse(JSON.stringify(groupingMap));\r\n        const excelHeadersArray = (JSON.parse(this.fileJSON))[1];\r\n\r\n        const columnsMap = headerMap.reduce((fullArr, item) => {\r\n            const cols = item.columns.reduce((arr, col) => {\r\n                if (col.importColumnId !== undefined) arr.push(col.importColumnId)\r\n                return arr;\r\n            }, []);\r\n            return [...fullArr, ...cols]\r\n        }, [])\r\n\r\n        const isSame = JSON.stringify(excelHeadersArray) === JSON.stringify(columnsMap);\r\n        this.setState({isExcelHeadersValid: isSame, showButton3: isSame, showButton2: !isSame});\r\n\r\n        if (!isSame) {\r\n            this.setState({file: null, showButton2: false})\r\n        }\r\n    }\r\n\r\n    downloadLogFile() {\r\n        const {importActionResponse} = this.state;\r\n        if (importActionResponse) {\r\n            const today = new Date();\r\n            const todayDate =  '_' + today.getDate() +  (today.toLocaleString('default', { month: 'long' })) + today.getFullYear();\r\n\r\n            const {importResult} = JSON.parse(importActionResponse);\r\n            const {log} = importResult[0];\r\n\r\n            const blob = new Blob([log], {type: \"text/plain;charset=utf-8\"});\r\n            saveAs(blob, `importDetailedLog${todayDate}.txt`);\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            file: null,\r\n            isExcelHeadersValid: null,\r\n            importActionResponse: null,\r\n            showButton2: false,\r\n            showButton3: false,\r\n            progress: -1\r\n        })\r\n        this.props.setModalImport();\r\n    }\r\n\r\n    customFormRenderer(onSubmit) {\r\n        const {language} = this.props;\r\n\r\n        return (\r\n            <Row>\r\n                <Col>\r\n                    <Button color={'success'} size={\"lg\"} block\r\n                            hidden={!this.state.showButton3}\r\n                            onClick={(e) => {\r\n                                this.alert.getConfirmation(\r\n                                    \"warning\",\r\n                                    language.importSection.warningTitleForLastStep,\r\n                                    language.importSection.warningMessageForLastStep\r\n                                ).then(response => {\r\n\r\n                                    if (response === true) {\r\n                                        this.setState({showButton3: false});\r\n                                        onSubmit(e)\r\n                                    }\r\n                                })\r\n                            }}>\r\n                        {language.upload}\r\n                        <i className={`icon icon-upload ml-2`}/>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    formGetter() {\r\n        return JSON.stringify({\r\n            token: this.props.token,\r\n            importedExcelAsJSON: this.fileJSON\r\n        });\r\n    }\r\n\r\n    customProgressRenderer(progressFile, hasError, cancelHandler) {\r\n        const {language} = this.props;\r\n\r\n        function countOfRowsText(count) {\r\n            return +count > 1\r\n                ? `${count} ${language.importSection.rows}`\r\n                : `${count} ${language.importSection.rows.slice(0, -1)}`\r\n        }\r\n\r\n        const {progress} = this.state;\r\n\r\n        if (hasError || progress > -1) {\r\n\r\n            let progressBar = Object.assign({}, this.styleBar);\r\n            progressBar.width = `${progress}%`;\r\n\r\n            let result = null;\r\n            const {importActionResponse} = this.state;\r\n            if (importActionResponse && progress === 100) {\r\n\r\n                const jsonResponse = JSON.parse(importActionResponse);\r\n                const {importResult, exec_status, error_code, error_message} = jsonResponse;\r\n\r\n                if (exec_status === \"error\") {\r\n\r\n                    this.setState({progress: 0})\r\n\r\n                    const message = error_message ? error_message : \"Null exception\";\r\n\r\n                    if (+error_code === 10) {\r\n                        this.alert.showMessage('error', 'Error', message, true);\r\n                    } else {\r\n                        this.alert.showMessage('error', 'Error', message, false);\r\n                    }\r\n                }\r\n\r\n                if (importResult) {\r\n                    result = importResult[0];\r\n\r\n                    // Import finish successfully, then reload the data.\r\n                    if (result && +progress === 100) {\r\n                        this.props.loadAfterImport();\r\n                    }\r\n                }\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <div className={\"progressWrapper text-center\"}>\r\n                                <span>Import progress: {`${progress}%`}</span>\r\n                                <div className={\"progressBar\"} style={progressBar} />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {hasError &&\r\n                    <Row>\r\n                        <Col>\r\n                            <Alert color={\"danger\"}>\r\n                                <i className=\"icon icon-triangle-warning mr-2\"/>\r\n                                {language.importSection.progressError}\r\n                            </Alert>\r\n                        </Col>\r\n                    </Row>\r\n                    }\r\n\r\n                    {(progress === 100 && result && !hasError) &&\r\n                    <Row>\r\n                        <Col>\r\n                            <Card body={false}>\r\n                                <CardHeader>\r\n                                    {language.importSection.summaryLabel}\r\n                                </CardHeader>\r\n                                <CardBody>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Card color={\"primary\"} inverse>\r\n                                                <CardBody>\r\n                                                    <CardTitle tag={\"h5\"}>\r\n                                                        {language.importSection.totalRowCount}\r\n                                                    </CardTitle>\r\n                                                    <CardText>{language.importSection.totalRowText}</CardText>\r\n                                                    <Alert tag={\"h4\"} color={\"info\"}>\r\n                                                        {countOfRowsText(result.totalcount)}\r\n                                                    </Alert>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Card color={\"success\"} inverse>\r\n                                                <CardBody>\r\n                                                    <CardTitle tag={\"h5\"}>\r\n                                                        {language.importSection.successRowCount}\r\n                                                    </CardTitle>\r\n                                                    <CardText>{language.importSection.successRowText}</CardText>\r\n                                                    <Alert tag={\"h4\"} color={\"info\"}>\r\n                                                        {countOfRowsText(result.successCount)}\r\n                                                    </Alert>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Card color={\"danger\"} inverse>\r\n                                                <CardBody>\r\n                                                    <CardTitle tag={\"h5\"}>\r\n                                                        {language.importSection.failedRowCount}\r\n                                                    </CardTitle>\r\n                                                    <CardText>{language.importSection.failedRowText}</CardText>\r\n                                                    <Alert tag={\"h4\"} color={\"info\"}>\r\n                                                        {countOfRowsText(result.errorcount)}\r\n                                                    </Alert>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <hr/>\r\n                                            <Button color={\"primary\"} className={\"mt-3\"} block size={\"lg\"}\r\n                                                    onClick={this.downloadLogFile.bind(this)}>\r\n                                                {language.importSection.downloadLogFile}\r\n                                                <i className={`icon icon-download-save ml-2`}/>\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                    }\r\n                </>\r\n            );\r\n\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {language} = this.props;\r\n\r\n        if (language) {\r\n            return (\r\n                <Modal isOpen={this.props.open} size={'lg'} centered={true}>\r\n                    <ModalHeader toggle={this.toggle.bind(this)}>{language.importDataMatrixFile}</ModalHeader>\r\n                    <ModalBody className={'import-file'}>\r\n\r\n                        <input ref={fileInput => this.fileInput = fileInput} type=\"file\"\r\n                               accept={process.env.REACT_APP_ACCEPTED_IMPORT_FILE_TYPE}\r\n                               onChange={this.handleSelectFile.bind(this)} hidden={true}  />\r\n\r\n                        <Row>\r\n                            <Col md={'12'}>\r\n                                {!this.state.file &&\r\n                                <div className={'choose-file-wrapper'}>\r\n                                    <Button className={\"chose-file\"} onClick={() => this.fileInput.click()}>\r\n                                        {language.chooseFile}\r\n                                    </Button>\r\n                                </div>\r\n                                }\r\n                                {this.state.file &&\r\n                                <div className={'choose-file-wrapper'}>\r\n                                    <h4>\r\n                                        {language.importSection.selectedFileLabel}\r\n                                        {this.state.file.name}\r\n                                    </h4>\r\n                                </div>\r\n                                }\r\n                            </Col>\r\n                            <hr/>\r\n                            <Col>\r\n                                {this.state.showButton2 &&\r\n                                <Button color={'primary'} className={'mt-3 mb-3'} size={\"lg\"} block\r\n                                        onClick={this.handleFile.bind(this)}>\r\n                                    {language.validate}\r\n                                    <i className={`icon icon-file ml-2`}/>\r\n                                </Button>\r\n                                }\r\n                                {this.state.isExcelHeadersValid === true &&\r\n                                <Alert color=\"success\" className={'mt-2'}>\r\n                                    <i className={`icon icon-check mr-2`}/>\r\n                                    {language.importSection.selectedFileValid}\r\n                                </Alert>\r\n                                }\r\n                                {this.state.isExcelHeadersValid === false &&\r\n                                <Alert color=\"danger\" className={'mt-2'}>\r\n                                    <i className={`icon icon-cross mr-2`}/>\r\n                                    {language.importSection.selectedFileNotValid}\r\n                                </Alert>\r\n                                }\r\n                            </Col>\r\n\r\n                        </Row>\r\n\r\n                        <FileUploadProgress\r\n                            url={this.uploadFileUrl}\r\n                            method={\"POST\"}\r\n                            beforeSend={(request) => {\r\n                                this.props.setSpinner();\r\n                                this.setState({progress: Math.floor(Math.random() * 16) + 10 });\r\n                                request.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\r\n                                return request\r\n                            }}\r\n                            onProgress={(e, request, progress) => {\r\n                                if (this.state.progress < 95) {\r\n                                    this.progressAction = setInterval(() => {\r\n\r\n                                        let increase = Math.floor(Math.random() * 5) + 5;\r\n                                        this.setState({\r\n                                            progress: increase + +this.state.progress\r\n                                        });\r\n                                    }, 2000)\r\n                                }\r\n                            }}\r\n                            onLoad={(e, request) => {\r\n                                clearInterval(this.progressAction);\r\n                                setTimeout(() => {\r\n\r\n                                    this.setState({progress: 100, importActionResponse: request.response});\r\n\r\n                                }, 200)\r\n                                this.props.setSpinner();\r\n                            }}\r\n                            onError={(e, request) => {\r\n                                this.props.setSpinner();\r\n                            }}\r\n                            onAbort={(e, request) => {\r\n                                this.props.setSpinner();\r\n                            }}\r\n                            formGetter={this.formGetter.bind(this)}\r\n                            formRenderer={this.customFormRenderer.bind(this)}\r\n                            progressRenderer={this.customProgressRenderer.bind(this)}\r\n\r\n                        />\r\n                    </ModalBody>\r\n\r\n                </Modal>\r\n            )\r\n        } else {\r\n            return (<></>)\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        open: state.modalImportToggle,\r\n        import: state.import,\r\n        language: state.language,\r\n        token: state.token\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModalImport: () => dispatch(modalImportToggle()),\r\n        setSpinner: () => dispatch(spinnerToggle()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalImport);"]},"metadata":{},"sourceType":"module"}