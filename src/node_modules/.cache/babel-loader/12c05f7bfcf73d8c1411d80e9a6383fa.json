{"ast":null,"code":"/*\r\n* Authentication Manage Module\r\n*\r\n*/\nimport RestApiModule from './RestApiModule';\nimport CryptoModule from './CryptoModule';\nimport store from './redux/store';\nimport { setToken, setAuthUser, setRegions, setSelectedRegion, setRadioSites } from './redux/actions';\n\nclass AuthModule {\n  constructor() {\n    this.store = store;\n    this.restApi = new RestApiModule();\n    this.crypto = new CryptoModule();\n    this.roleDefinitions = [];\n  }\n\n  login(u, p) {\n    return new Promise((res, rej) => {\n      this.restApi.callApi('login', {\n        username: this.crypto.encrypt(u),\n        password: this.crypto.encrypt(p)\n      }).then(async response => {}).catch(err => {\n        rej({\n          loginError: true,\n          err: err\n        });\n      });\n    });\n  }\n\n  constructRoleDefinitions(token) {\n    return new Promise((res, rej) => {\n      this.restApi.callApi('getConfig', {\n        token\n      }).then(response => {\n        this.roleDefinitions = JSON.parse(response.configurations.roleDefinitions);\n        res(true);\n      });\n    });\n  }\n\n  registerUser(token, u) {\n    return new Promise(async (res, rej) => {\n      await this.constructRoleDefinitions(token);\n      await this.userRegions(token).then(async regions => {\n        this.store.dispatch(setRegions(regions));\n        this.store.dispatch(setSelectedRegion(regions[0])); // Set radio site list for default region\n\n        await this.defaultRadioSiteList(token, regions[0]);\n      }).catch(empty => {\n        this.store.dispatch(setRegions(empty));\n        this.store.dispatch(setSelectedRegion(null));\n      });\n      this.roleDef(token).then(role => {\n        const user = {\n          name: u,\n          role\n        };\n        this.store.dispatch(setToken(token));\n        this.store.dispatch(setAuthUser(user));\n        res(true);\n      }).catch(() => {\n        rej(true);\n      });\n    });\n  }\n\n  userRegions(token) {\n    // this method changed to get all picklist in db\n    // In prev version we got only user's regions\n    return new Promise((res, rej) => {\n      this.restApi.callApi('getPickList', {\n        pickListName: \"regionPicklist\",\n        token\n      }).then(response => {\n        const regions = response.pickList.map(item => {\n          return item.regionPicklist_value;\n        });\n        res(regions.sort());\n      }).catch(err => {\n        rej([]);\n      });\n    });\n  }\n\n  defaultRadioSiteList(token, region) {\n    // It'll set radio site list for default region for user.\n    // Radio site list will change once region changed\n    return new Promise((res, rej) => {\n      this.restApi.callApi('getRadioListByRegion', {\n        region,\n        token\n      }).then(async response => {\n        const list = await response.List.map(item => {\n          return item.value;\n        });\n        this.store.dispatch(setRadioSites(list.sort()));\n        res(true);\n      }).catch(err => {\n        //this.store.dispatch(setRadioSites([]));\n        rej(false);\n      });\n    });\n  }\n\n  getRole(role) {\n    if (this.roleDefinitions) {\n      return this.roleDefinitions.find(item => {\n        return item.roleName === role;\n      });\n    }\n  }\n\n  roleDef(token) {\n    return new Promise((res, rej) => {\n      this.restApi.callApi('getRoles', {\n        token\n      }).then(response => {\n        let roleDefinition = {\n          mainPage: '',\n          permittedColumns: [],\n          permittedPages: []\n        };\n\n        if (response) {\n          //console.log(response)\n          response.roles.map(item => {\n            const {\n              mainPage,\n              permittedColumns,\n              permittedPages\n            } = this.getRole(item.role);\n\n            if (permittedColumns !== null && typeof permittedColumns === 'object') {\n              permittedColumns.map(col => {\n                if (!roleDefinition.permittedColumns.includes(col)) roleDefinition.permittedColumns.push(col);\n              });\n            }\n\n            if (permittedPages !== null && typeof permittedPages === 'object') {\n              permittedPages.map(col => {\n                if (!roleDefinition.permittedPages.includes(col)) roleDefinition.permittedPages.push(col);\n              });\n            }\n\n            if (roleDefinition.mainPage === '') {\n              roleDefinition.mainPage = mainPage;\n            }\n          });\n        }\n\n        res(roleDefinition);\n      }).catch(e => rej(e));\n    });\n  }\n\n}\n\nexport default AuthModule;","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/SSCM/ss/src/src/AuthModule.js"],"names":["RestApiModule","CryptoModule","store","setToken","setAuthUser","setRegions","setSelectedRegion","setRadioSites","AuthModule","constructor","restApi","crypto","roleDefinitions","login","u","p","Promise","res","rej","callApi","username","encrypt","password","then","response","catch","err","loginError","constructRoleDefinitions","token","JSON","parse","configurations","registerUser","userRegions","regions","dispatch","defaultRadioSiteList","empty","roleDef","role","user","name","pickListName","pickList","map","item","regionPicklist_value","sort","region","list","List","value","getRole","find","roleName","roleDefinition","mainPage","permittedColumns","permittedPages","roles","col","includes","push","e"],"mappings":"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","sourcesContent":["/*\r\n* Authentication Manage Module\r\n*\r\n*/\r\n\r\nimport RestApiModule from './RestApiModule'\r\nimport CryptoModule from './CryptoModule'\r\n\r\nimport store from './redux/store'\r\nimport {setToken, setAuthUser, setRegions, setSelectedRegion, setRadioSites} from './redux/actions'\r\n\r\nclass AuthModule {\r\n\r\n    constructor() {\r\n        this.store = store;\r\n        this.restApi = new RestApiModule();\r\n        this.crypto = new CryptoModule();\r\n\r\n        this.roleDefinitions = [];\r\n    }\r\n\r\n    login(u, p) {\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.restApi.callApi('login', {\r\n\r\n                username: this.crypto.encrypt(u),\r\n                password: this.crypto.encrypt(p)\r\n\r\n            }).then(async (response) => {\r\n\r\n                \r\n            }).catch((err) => {\r\n                rej({\r\n                    loginError: true,\r\n                    err: err\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    constructRoleDefinitions(token) {\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.restApi.callApi('getConfig', {\r\n                token\r\n            }).then(response => {\r\n                this.roleDefinitions = JSON.parse(response.configurations.roleDefinitions);\r\n                res(true)\r\n            })\r\n        })\r\n    }\r\n\r\n    registerUser(token, u) {\r\n\r\n        return new Promise (async (res, rej) => {\r\n\r\n            await this.constructRoleDefinitions(token);\r\n\r\n            await this.userRegions(token).then(async (regions) => {\r\n\r\n                this.store.dispatch(setRegions(regions));\r\n                this.store.dispatch(setSelectedRegion(regions[0]));\r\n\r\n                // Set radio site list for default region\r\n                await this.defaultRadioSiteList(token, regions[0]);\r\n\r\n            }).catch((empty) => {\r\n                this.store.dispatch(setRegions(empty));\r\n                this.store.dispatch(setSelectedRegion(null));\r\n\r\n            });\r\n\r\n            this.roleDef(token).then(role => {\r\n\r\n                const user = {\r\n                    name: u,\r\n                    role\r\n                };\r\n\r\n                this.store.dispatch(setToken(token));\r\n                this.store.dispatch(setAuthUser(user));\r\n                res(true);\r\n            }).catch(() =>{\r\n                rej(true)\r\n            })\r\n        })\r\n    }\r\n\r\n    userRegions(token) {\r\n        // this method changed to get all picklist in db\r\n        // In prev version we got only user's regions\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.restApi.callApi('getPickList', {\r\n                pickListName: \"regionPicklist\",\r\n                token\r\n            }).then((response) => {\r\n\r\n                const regions = response.pickList.map((item) => {\r\n                    return item.regionPicklist_value;\r\n                });\r\n\r\n                res(regions.sort());\r\n            }).catch(err => {\r\n                rej([])\r\n            })\r\n        });\r\n    }\r\n\r\n    defaultRadioSiteList(token, region) {\r\n        // It'll set radio site list for default region for user.\r\n        // Radio site list will change once region changed\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.restApi.callApi('getRadioListByRegion', {\r\n                region,\r\n                token\r\n            }).then(async (response) => {\r\n\r\n                const list = await response.List.map((item) => {\r\n                    return item.value;\r\n                });\r\n\r\n\r\n                this.store.dispatch(setRadioSites(list.sort()));\r\n\r\n                res(true);\r\n            }).catch(err => {\r\n                //this.store.dispatch(setRadioSites([]));\r\n\r\n                rej(false)\r\n            })\r\n        });\r\n    }\r\n\r\n    getRole(role) {\r\n        if (this.roleDefinitions) {\r\n            return this.roleDefinitions.find((item) => {\r\n                return (item.roleName === role)\r\n            })\r\n        }\r\n    }\r\n\r\n    roleDef(token) {\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.restApi.callApi('getRoles', {\r\n                token\r\n            }).then((response) => {\r\n\r\n                let roleDefinition = {\r\n                    mainPage: '',\r\n                    permittedColumns: [],\r\n                    permittedPages: []\r\n                }\r\n\r\n                if (response) {\r\n                    //console.log(response)\r\n                    response.roles.map(item => {\r\n\r\n                        const {mainPage, permittedColumns, permittedPages} = this.getRole(item.role);\r\n\r\n                        if (permittedColumns !== null && typeof permittedColumns === 'object') {\r\n                            permittedColumns.map(col => {\r\n                                if (!roleDefinition.permittedColumns.includes(col))\r\n                                    roleDefinition.permittedColumns.push(col);\r\n                            })\r\n                        }\r\n\r\n                        if (permittedPages !== null && typeof permittedPages === 'object') {\r\n                            permittedPages.map(col => {\r\n                                if (!roleDefinition.permittedPages.includes(col))\r\n                                    roleDefinition.permittedPages.push(col);\r\n                            })\r\n                        }\r\n\r\n                        if (roleDefinition.mainPage === '') {\r\n                            roleDefinition.mainPage = mainPage;\r\n                        }\r\n                    })\r\n                }\r\n                res(roleDefinition);\r\n\r\n            }).catch(e => rej(e));\r\n        })\r\n    }\r\n}\r\n\r\nexport default AuthModule;"]},"metadata":{},"sourceType":"module"}