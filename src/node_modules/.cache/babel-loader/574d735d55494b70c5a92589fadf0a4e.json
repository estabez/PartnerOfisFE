{"ast":null,"code":"/*\r\n* Authentication Manage Module\r\n*\r\n*/\nimport RestApiModule from './RestApiModule';\nimport RoleModule from './RoleModule';\nimport CryptoModule from './CryptoModule';\nimport store from './redux/store';\nimport { setToken, setAuthUser, setRegions } from './redux/actions';\n\nclass AuthModule {\n  constructor() {\n    this.store = store;\n    this.restApi = new RestApiModule();\n    this.crypto = new CryptoModule();\n  }\n\n  login(u, p) {\n    return new Promise((res, rej) => {\n      this.restApi.callApi('login', {\n        username: this.crypto.encrypt(u),\n        password: this.crypto.encrypt(p)\n      }).then(async response => {\n        const token = response.token;\n        await this.registerUser(token, u).then(r => res(r));\n      }).catch(err => {\n        rej({\n          loginError: true,\n          err: err\n        });\n      });\n    });\n  }\n\n  registerUser(token, u) {\n    return new Promise(async (res, rej) => {\n      await this.userRegions(token).then(async regions => {\n        this.store.dispatch(setRegions(regions));\n      }).catch(empty => {\n        this.store.dispatch(setRegions(empty));\n      });\n      this.roleDef(token).then(role => {\n        const user = {\n          name: u,\n          role\n        };\n        this.store.dispatch(setToken(token));\n        this.store.dispatch(setAuthUser(user));\n        res(true);\n      });\n    });\n  }\n\n  userRegions(token) {\n    return new Promise((res, rej) => {\n      this.restApi.callApi('getRegions', {\n        token\n      }).then(response => {\n        const regions = response.regions.map(item => {\n          return item.Region;\n        });\n        res(regions);\n      }).catch(err => {\n        rej([]);\n      });\n    });\n  }\n\n  roleDef(token) {\n    return new Promise((res, rej) => {\n      this.roleModule = new RoleModule(token);\n      this.restApi.callApi('getRoles', {\n        token\n      }).then(response => {\n        let roleDefinition = {\n          mainPage: '',\n          permittedColumns: [],\n          permittedPages: []\n        };\n        response.roles.map(item => {\n          const _this$roleModule$getR = this.roleModule.getRole(item.role),\n                mainPage = _this$roleModule$getR.mainPage,\n                permittedColumns = _this$roleModule$getR.permittedColumns,\n                permittedPages = _this$roleModule$getR.permittedPages;\n\n          if (permittedColumns !== null && typeof permittedColumns === 'object') {\n            permittedColumns.map(col => {\n              if (!roleDefinition.permittedColumns.includes(col)) roleDefinition.permittedColumns.push(col);\n            });\n          }\n\n          if (permittedPages !== null && typeof permittedPages === 'object') {\n            permittedPages.map(col => {\n              if (!roleDefinition.permittedPages.includes(col)) roleDefinition.permittedPages.push(col);\n            });\n          }\n\n          if (roleDefinition.mainPage === '') {\n            roleDefinition.mainPage = mainPage;\n          }\n        });\n        res(roleDefinition);\n      }).catch(e => rej(e));\n    });\n  }\n\n}\n\nexport default AuthModule;","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/AuthModule.js"],"names":["RestApiModule","RoleModule","CryptoModule","store","setToken","setAuthUser","setRegions","AuthModule","constructor","restApi","crypto","login","u","p","Promise","res","rej","callApi","username","encrypt","password","then","response","token","registerUser","r","catch","err","loginError","userRegions","regions","dispatch","empty","roleDef","role","user","name","map","item","Region","roleModule","roleDefinition","mainPage","permittedColumns","permittedPages","roles","getRole","col","includes","push","e"],"mappings":"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","sourcesContent":["/*\r\n* Authentication Manage Module\r\n*\r\n*/\r\n\r\nimport RestApiModule from './RestApiModule'\r\nimport RoleModule from './RoleModule'\r\nimport CryptoModule from './CryptoModule'\r\n\r\nimport store from './redux/store'\r\nimport {setToken, setAuthUser, setRegions} from './redux/actions'\r\n\r\nclass AuthModule {\r\n\r\n    constructor() {\r\n        this.store = store;\r\n        this.restApi = new RestApiModule();\r\n        this.crypto = new CryptoModule();\r\n    }\r\n\r\n    login(u, p) {\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.restApi.callApi('login', {\r\n\r\n                username: this.crypto.encrypt(u),\r\n                password: this.crypto.encrypt(p)\r\n\r\n            }).then(async (response) => {\r\n\r\n                const {token} = response;\r\n\r\n                await this.registerUser(token, u).then(r => res(r));\r\n\r\n            }).catch((err) => {\r\n                rej({\r\n                    loginError: true,\r\n                    err: err\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    registerUser(token, u) {\r\n\r\n        return new Promise (async (res, rej) => {\r\n\r\n            await this.userRegions(token).then(async (regions) => {\r\n\r\n                this.store.dispatch(setRegions(regions));\r\n\r\n            }).catch((empty) => {\r\n                this.store.dispatch(setRegions(empty));\r\n            });\r\n\r\n            this.roleDef(token).then(role => {\r\n\r\n                const user = {\r\n                    name: u,\r\n                    role\r\n                };\r\n\r\n                this.store.dispatch(setToken(token));\r\n                this.store.dispatch(setAuthUser(user));\r\n                res(true);\r\n            })\r\n        })\r\n    }\r\n\r\n    userRegions(token) {\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.restApi.callApi('getRegions', {\r\n                token\r\n            }).then((response) => {\r\n\r\n                const regions = response.regions.map((item) => {\r\n                    return item.Region;\r\n                });\r\n\r\n                res(regions);\r\n            }).catch(err => {\r\n                rej([])\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    roleDef(token) {\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            this.roleModule = new RoleModule(token);\r\n\r\n            this.restApi.callApi('getRoles', {\r\n                token\r\n            }).then((response) => {\r\n\r\n                let roleDefinition = {\r\n                    mainPage: '',\r\n                    permittedColumns: [],\r\n                    permittedPages: []\r\n                }\r\n\r\n                response.roles.map(item => {\r\n\r\n                    const {mainPage, permittedColumns, permittedPages} = this.roleModule.getRole(item.role);\r\n\r\n                    if (permittedColumns !== null && typeof permittedColumns === 'object') {\r\n                        permittedColumns.map(col => {\r\n                            if (!roleDefinition.permittedColumns.includes(col))\r\n                                roleDefinition.permittedColumns.push(col);\r\n                        })\r\n                    }\r\n\r\n                    if (permittedPages !== null && typeof permittedPages === 'object') {\r\n                        permittedPages.map(col => {\r\n                            if (!roleDefinition.permittedPages.includes(col))\r\n                                roleDefinition.permittedPages.push(col);\r\n                        })\r\n                    }\r\n\r\n                    if (roleDefinition.mainPage === '') {\r\n                        roleDefinition.mainPage = mainPage;\r\n                    }\r\n                })\r\n\r\n                res(roleDefinition);\r\n\r\n            }).catch(e => rej(e));\r\n        })\r\n    }\r\n}\r\n\r\nexport default AuthModule;"]},"metadata":{},"sourceType":"module"}