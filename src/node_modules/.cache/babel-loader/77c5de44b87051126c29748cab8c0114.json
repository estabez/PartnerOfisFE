{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\SSCM\\\\ss\\\\src\\\\src\\\\views\\\\Main.jsx\";\nimport React, { createRef } from 'react';\nimport { connect } from \"react-redux\";\nimport Axios from 'axios';\nimport { HotTable } from '@handsontable/react';\nimport 'handsontable/dist/handsontable.full.css';\nimport { Row, Col, Card, CardBody, CardFooter } from 'reactstrap';\nimport Header from '../components/Header';\nimport Sidebar from \"../components/Sidebar\";\nimport RestApiModule from '../RestApiModule';\nimport { editOnToggle, spinnerToggle } from \"../redux/actions\";\nimport Toolbar from '../components/ToolbarMatrix';\n\nclass WDM extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.hotTableComponent = createRef();\n    this.hot = null;\n    this.columns = [];\n    this.restApi = new RestApiModule();\n    this.state = {\n      columns: [],\n      data: [],\n      newArrColumns: [],\n      ColumnsInOrder: [\"SKU\", \"Tedarikçi SKU\", \"Ürün İsmi\", \"Liste Fiyatı\", \"Satış Fiyatı\", \"İnd.Oran(%)\", \"Stok Adet\", \"T.Adet\", \"T.Sıra\", \"Ürt.Tar.\", \"Hz.Sr.\"],\n      newArrData: [],\n      newArrDataForPair: [],\n      columnOptions: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.setSpinner();\n    this.restApi.callApi('exceldata', {\n      company: 'dogana'\n    }).then(response => {\n      const json = response.data[0];\n      const jsonBig = response.data;\n\n      for (let key in json) {\n        if (json.hasOwnProperty(key)) {\n          this.state.newArrColumns.push(key);\n        }\n      }\n\n      console.log(this.state.ColumnsInOrder);\n      /*\r\n                  for(let a=0; a<jsonBig.length; a++){\r\n                      const jsonPair = response.data[a];\r\n                      console.log(jsonPair)\r\n                      for(let key in jsonPair){\r\n                          console.log(key)\r\n                          if (jsonPair.hasOwnProperty(key)) {\r\n                              this.state.newArrData.push(jsonPair[key]);\r\n                          }\r\n                      }\r\n                      this.state.data.push(this.state.newArrData);\r\n                      this.state.newArrData = [];\r\n                  }\r\n                  */\n\n      console.log(this.state.ColumnsInOrder[0]);\n\n      for (let a = 0; a < jsonBig.length; a++) {\n        const jsonPair = response.data[a];\n\n        for (let c = 0; c < 11; c++) {\n          let key = this.state.ColumnsInOrder[c];\n          this.state.newArrData.push(jsonPair[key]);\n        }\n\n        this.state.data.push(this.state.newArrData);\n        this.state.newArrData = [];\n      }\n\n      console.log(this.state.data);\n      this.state.columns.push(this.state.newArrColumns);\n      this.forceUpdate();\n      this.hot = this.hotTableComponent.current.hotInstance; //this.hot.setCellMeta(1, 4, \"className\", 'bg-primary text-white');\n      //this.hot.render();\n\n      /* var rows=this.hot.countRows();  // get the count of the rows in the table\r\n       var cols=this.hot.countCols();  // get the count of the columns in the table.\r\n       for(var row=0; row<rows; row++){  // go through each row of the table\r\n                 var cell = this.hot.getCell(row,1);\r\n               cell.style.background = \"#00FF90\";\r\n         }\r\n         console.log(this.hot.getSettings())*/\n      //  this.hot.render();\n    }).catch(err => {\n      console.log(err);\n    });\n    this.props.setSpinner();\n    /*\r\n            //console.log(this.state.columns);\r\n            Axios({\r\n    \r\n                method: 'POST',\r\n                url: `http://localhost:8777/test-jersey-rest-maven-tomcat/rest/testservice/test12/`,\r\n                data: null,\r\n                headers: {\r\n                    'Content-Type' : 'application/json'\r\n                }\r\n            }).then(async (response) => {\r\n                console.log(\"aaaa\");\r\n    \r\n                const json = response.data[0].variants[0];\r\n                const jsonBig = response.data[0].variants;\r\n                for (let key in json) {\r\n                    if (json.hasOwnProperty(key)) {\r\n                        this.state.newArrColumns.push(key);\r\n                    }\r\n                }\r\n    \r\n                for(let a=0; a<jsonBig.length; a++){\r\n                    const jsonPair = response.data[0].variants[a];\r\n                    for(let key in jsonPair){\r\n                        if (jsonPair.hasOwnProperty(key)) {\r\n                            this.state.newArrData.push(jsonPair[key]);\r\n                        }\r\n                    }\r\n                    this.state.data.push(this.state.newArrData);\r\n                    this.state.newArrData = [];\r\n                }\r\n                this.state.columns.push(this.state.newArrColumns);\r\n                this.forceUpdate();\r\n    \r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })*/\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      className: \"h-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Sidebar, {\n      maximize: this.props.maximize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Col, {\n      className: this.props.contentCSS,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      wrapper: 'toolbar mt-2',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Card, {\n      className: 'mt-1 fixedCard',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(HotTable, {\n      ref: this.hotTableComponent,\n      id: 'hot',\n      data: this.state.data,\n      stretchH: 'all',\n      autoRowSize: true,\n      autoWrapRow: true,\n      dropdownMenu: true,\n      filters: true,\n      manualColumnResize: true,\n      columnSorting: true,\n      colHeaders: this.state.ColumnsInOrder,\n      rowHeaders: true,\n      width: '100%',\n      height: '100%',\n      licenseKey: \"non-commercial-and-evaluation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 33\n      }\n    }))))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.token,\n    language: state.language,\n    maximize: state.maximize,\n    contentCSS: state.contentCSS,\n    fontSize: state.topologySelectedNodeFontSize,\n    spinnerToggle: state.spinnerToggle\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setSpinner: () => dispatch(spinnerToggle())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WDM);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/SSCM/ss/src/src/views/Main.jsx"],"names":["React","createRef","connect","Axios","HotTable","Row","Col","Card","CardBody","CardFooter","Header","Sidebar","RestApiModule","editOnToggle","spinnerToggle","Toolbar","WDM","Component","constructor","props","_isMounted","hotTableComponent","hot","columns","restApi","state","data","newArrColumns","ColumnsInOrder","newArrData","newArrDataForPair","columnOptions","componentDidMount","setSpinner","callApi","company","then","response","json","jsonBig","key","hasOwnProperty","push","console","log","a","length","jsonPair","c","forceUpdate","current","hotInstance","catch","err","render","maximize","contentCSS","mapStateToProps","token","language","fontSize","topologySelectedNodeFontSize","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,yCAAP;AACA,SAAQC,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,EAAwBC,QAAxB,EAAkCC,UAAlC,QAAmD,YAAnD;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AAEA,SAAQC,YAAR,EAAsBC,aAAtB,QAA0C,kBAA1C;AAEA,OAAOC,OAAP,MAAoB,6BAApB;;AAGA,MAAMC,GAAN,SAAkBhB,KAAK,CAACiB,SAAxB,CAAkC;AAG9BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAEf,UAAMA,KAAN;AAFe,SAFnBC,UAEmB,GAFN,KAEM;AAGf,SAAKC,iBAAL,GAAyBpB,SAAS,EAAlC;AACA,SAAKqB,GAAL,GAAW,IAAX;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,OAAL,GAAe,IAAIZ,aAAJ,EAAf;AACA,SAAKa,KAAL,GAAa;AACTF,MAAAA,OAAO,EAAE,EADA;AAGTG,MAAAA,IAAI,EAAE,EAHG;AAKTC,MAAAA,aAAa,EAAE,EALN;AAMTC,MAAAA,cAAc,EAAE,CAAC,KAAD,EAAO,eAAP,EAAuB,WAAvB,EAAoC,cAApC,EAAoD,cAApD,EAAoE,aAApE,EAAmF,WAAnF,EAAgG,QAAhG,EAAyG,QAAzG,EAAmH,UAAnH,EAA+H,QAA/H,CANP;AAOTC,MAAAA,UAAU,EAAE,EAPH;AAQTC,MAAAA,iBAAiB,EAAE,EARV;AASTC,MAAAA,aAAa,EAAE;AATN,KAAb;AAWH;;AAEDC,EAAAA,iBAAiB,GAAG;AAEhB,SAAKb,KAAL,CAAWc,UAAX;AACA,SAAKT,OAAL,CAAaU,OAAb,CAAqB,WAArB,EAAkC;AAC9BC,MAAAA,OAAO,EAAE;AADqB,KAAlC,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAGhB,YAAMC,IAAI,GAAGD,QAAQ,CAACX,IAAT,CAAc,CAAd,CAAb;AACA,YAAMa,OAAO,GAAGF,QAAQ,CAACX,IAAzB;;AACA,WAAK,IAAIc,GAAT,IAAgBF,IAAhB,EAAsB;AAClB,YAAIA,IAAI,CAACG,cAAL,CAAoBD,GAApB,CAAJ,EAA8B;AAC1B,eAAKf,KAAL,CAAWE,aAAX,CAAyBe,IAAzB,CAA8BF,GAA9B;AAEH;AACJ;;AACDG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKnB,KAAL,CAAWG,cAAvB;AACZ;;;;;;;;;;;;;;;AAeYe,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKnB,KAAL,CAAWG,cAAX,CAA0B,CAA1B,CAAZ;;AACD,WAAI,IAAIiB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACN,OAAO,CAACO,MAAvB,EAA+BD,CAAC,EAAhC,EAAmC;AAC/B,cAAME,QAAQ,GAAGV,QAAQ,CAACX,IAAT,CAAcmB,CAAd,CAAjB;;AACA,aAAI,IAAIG,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,EAAf,EAAmBA,CAAC,EAApB,EAAuB;AACnB,cAAIR,GAAG,GAAG,KAAKf,KAAL,CAAWG,cAAX,CAA0BoB,CAA1B,CAAV;AACA,eAAKvB,KAAL,CAAWI,UAAX,CAAsBa,IAAtB,CAA2BK,QAAQ,CAACP,GAAD,CAAnC;AACH;;AACD,aAAKf,KAAL,CAAWC,IAAX,CAAgBgB,IAAhB,CAAqB,KAAKjB,KAAL,CAAWI,UAAhC;AACA,aAAKJ,KAAL,CAAWI,UAAX,GAAwB,EAAxB;AACF;;AACDc,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKnB,KAAL,CAAWC,IAAvB;AAEA,WAAKD,KAAL,CAAWF,OAAX,CAAmBmB,IAAnB,CAAwB,KAAKjB,KAAL,CAAWE,aAAnC;AACA,WAAKsB,WAAL;AAEA,WAAK3B,GAAL,GAAW,KAAKD,iBAAL,CAAuB6B,OAAvB,CAA+BC,WAA1C,CA1CgB,CA6ChB;AACA;;AACD;;;;;;;AAWD;AAQD,KApED,EAoEGC,KApEH,CAoEUC,GAAD,IAAS;AACtBV,MAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACH,KAtEO;AAwEA,SAAKlC,KAAL,CAAWc,UAAX;AAER;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCK;;AAKDqB,EAAAA,MAAM,GAAG;AACL,wBACI,uDACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,OAAD;AAAS,MAAA,QAAQ,EAAE,KAAKnC,KAAL,CAAWoC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,KAAKpC,KAAL,CAAWqC,UAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,OAAD;AACI,MAAA,OAAO,EAAE,cADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAKI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAE,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AAAW,MAAA,GAAG,EAAE,KAAKnC,iBAArB;AAAwC,MAAA,EAAE,EAAE,KAA5C;AACW,MAAA,IAAI,EAAE,KAAKI,KAAL,CAAWC,IAD5B;AAEW,MAAA,QAAQ,EAAE,KAFrB;AAGW,MAAA,WAAW,EAAE,IAHxB;AAIW,MAAA,WAAW,EAAE,IAJxB;AAKW,MAAA,YAAY,EAAE,IALzB;AAMW,MAAA,OAAO,EAAE,IANpB;AAOW,MAAA,kBAAkB,EAAE,IAP/B;AAQW,MAAA,aAAa,EAAE,IAR1B;AASW,MAAA,UAAU,EAAE,KAAKD,KAAL,CAAWG,cATlC;AAUW,MAAA,UAAU,EAAE,IAVvB;AAWW,MAAA,KAAK,EAAE,MAXlB;AAYW,MAAA,MAAM,EAAE,MAZnB;AAaW,MAAA,UAAU,EAAC,+BAbtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CALJ,CAFJ,CAFJ,CADJ;AAsCH;;AArL6B;;AAwLlC,SAAS6B,eAAT,CAAyBhC,KAAzB,EAAgC;AAC5B,SAAO;AACHiC,IAAAA,KAAK,EAAEjC,KAAK,CAACiC,KADV;AAEHC,IAAAA,QAAQ,EAAElC,KAAK,CAACkC,QAFb;AAGHJ,IAAAA,QAAQ,EAAE9B,KAAK,CAAC8B,QAHb;AAIHC,IAAAA,UAAU,EAAE/B,KAAK,CAAC+B,UAJf;AAKHI,IAAAA,QAAQ,EAAEnC,KAAK,CAACoC,4BALb;AAMH/C,IAAAA,aAAa,EAAEW,KAAK,CAACX;AANlB,GAAP;AAQH;;AACD,SAASgD,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AAEH9B,IAAAA,UAAU,EAAE,MAAM8B,QAAQ,CAACjD,aAAa,EAAd;AAFvB,GAAP;AAKH;;AAED,eAAeZ,OAAO,CAACuD,eAAD,EAAiBK,kBAAjB,CAAP,CAA4C9C,GAA5C,CAAf","sourcesContent":["import React, {createRef} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Axios from 'axios';\r\nimport { HotTable } from '@handsontable/react';\r\nimport 'handsontable/dist/handsontable.full.css';\r\nimport {Row, Col, Card, CardBody, CardFooter} from 'reactstrap';\r\nimport Header from '../components/Header';\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport RestApiModule from '../RestApiModule';\r\n\r\nimport {editOnToggle, spinnerToggle} from \"../redux/actions\";\r\n\r\nimport Toolbar from '../components/ToolbarMatrix';\r\n\r\n\r\nclass WDM extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.hotTableComponent = createRef();\r\n        this.hot = null;\r\n        this.columns = [];\r\n        this.restApi = new RestApiModule();\r\n        this.state = {\r\n            columns: [\r\n            ],\r\n            data: [\r\n            ],\r\n            newArrColumns: [],\r\n            ColumnsInOrder: [\"SKU\",\"Tedarikçi SKU\",\"Ürün İsmi\", \"Liste Fiyatı\", \"Satış Fiyatı\", \"İnd.Oran(%)\", \"Stok Adet\", \"T.Adet\",\"T.Sıra\", \"Ürt.Tar.\", \"Hz.Sr.\"],\r\n            newArrData: [],\r\n            newArrDataForPair: [],\r\n            columnOptions: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.props.setSpinner();\r\n        this.restApi.callApi('exceldata', {\r\n            company: 'dogana',\r\n        }).then(response => {\r\n\r\n\r\n            const json = response.data[0];\r\n            const jsonBig = response.data;\r\n            for (let key in json) {\r\n                if (json.hasOwnProperty(key)) {\r\n                    this.state.newArrColumns.push(key);\r\n\r\n                }\r\n            }\r\n            console.log(this.state.ColumnsInOrder)\r\n/*\r\n            for(let a=0; a<jsonBig.length; a++){\r\n                const jsonPair = response.data[a];\r\n                console.log(jsonPair)\r\n                for(let key in jsonPair){\r\n                    console.log(key)\r\n                    if (jsonPair.hasOwnProperty(key)) {\r\n                        this.state.newArrData.push(jsonPair[key]);\r\n                    }\r\n                }\r\n                this.state.data.push(this.state.newArrData);\r\n                this.state.newArrData = [];\r\n            }\r\n            */\r\n\r\n            console.log(this.state.ColumnsInOrder[0])\r\n           for(let a=0; a<jsonBig.length; a++){\r\n               const jsonPair = response.data[a];\r\n               for(let c=0; c<11; c++){\r\n                   let key = this.state.ColumnsInOrder[c]\r\n                   this.state.newArrData.push(jsonPair[key]);\r\n               }\r\n               this.state.data.push(this.state.newArrData);\r\n               this.state.newArrData = [];\r\n            }\r\n            console.log(this.state.data)\r\n\r\n            this.state.columns.push(this.state.newArrColumns);\r\n            this.forceUpdate();\r\n\r\n            this.hot = this.hotTableComponent.current.hotInstance;\r\n\r\n\r\n            //this.hot.setCellMeta(1, 4, \"className\", 'bg-primary text-white');\r\n            //this.hot.render();\r\n           /* var rows=this.hot.countRows();  // get the count of the rows in the table\r\n            var cols=this.hot.countCols();  // get the count of the columns in the table.\r\n            for(var row=0; row<rows; row++){  // go through each row of the table\r\n\r\n                    var cell = this.hot.getCell(row,1);\r\n                    cell.style.background = \"#00FF90\";\r\n\r\n            }\r\n\r\n            console.log(this.hot.getSettings())*/\r\n\r\n          //  this.hot.render();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }).catch((err) => {\r\n    console.log(err);\r\n})\r\n\r\n        this.props.setSpinner();\r\n\r\n/*\r\n        //console.log(this.state.columns);\r\n        Axios({\r\n\r\n            method: 'POST',\r\n            url: `http://localhost:8777/test-jersey-rest-maven-tomcat/rest/testservice/test12/`,\r\n            data: null,\r\n            headers: {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }).then(async (response) => {\r\n            console.log(\"aaaa\");\r\n\r\n            const json = response.data[0].variants[0];\r\n            const jsonBig = response.data[0].variants;\r\n            for (let key in json) {\r\n                if (json.hasOwnProperty(key)) {\r\n                    this.state.newArrColumns.push(key);\r\n                }\r\n            }\r\n\r\n            for(let a=0; a<jsonBig.length; a++){\r\n                const jsonPair = response.data[0].variants[a];\r\n                for(let key in jsonPair){\r\n                    if (jsonPair.hasOwnProperty(key)) {\r\n                        this.state.newArrData.push(jsonPair[key]);\r\n                    }\r\n                }\r\n                this.state.data.push(this.state.newArrData);\r\n                this.state.newArrData = [];\r\n            }\r\n            this.state.columns.push(this.state.newArrColumns);\r\n            this.forceUpdate();\r\n\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        })*/\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <Header/>\r\n                <Row className=\"h-100\">\r\n                    <Sidebar maximize={this.props.maximize}/>\r\n                    <Col className={this.props.contentCSS}>\r\n                        <Toolbar\r\n                            wrapper={'toolbar mt-2'}\r\n\r\n                        />\r\n                        <Card className={'mt-1 fixedCard'}>\r\n                            <CardBody>\r\n                                <HotTable  ref={this.hotTableComponent} id={'hot'}\r\n                                           data={this.state.data}\r\n                                           stretchH={'all'}\r\n                                           autoRowSize={true}\r\n                                           autoWrapRow={true}\r\n                                           dropdownMenu={true}\r\n                                           filters={true}\r\n                                           manualColumnResize={true}\r\n                                           columnSorting={true}\r\n                                           colHeaders={this.state.ColumnsInOrder}\r\n                                           rowHeaders={true}\r\n                                           width={'100%'}\r\n                                           height={'100%'}\r\n                                           licenseKey=\"non-commercial-and-evaluation\"\r\n\r\n                                />\r\n\r\n                            </CardBody>\r\n\r\n\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        language: state.language,\r\n        maximize: state.maximize,\r\n        contentCSS: state.contentCSS,\r\n        fontSize: state.topologySelectedNodeFontSize,\r\n        spinnerToggle: state.spinnerToggle,\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n\r\n        setSpinner: () => dispatch(spinnerToggle()),\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(WDM);"]},"metadata":{},"sourceType":"module"}