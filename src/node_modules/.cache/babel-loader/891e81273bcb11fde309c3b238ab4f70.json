{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\src\\\\components\\\\SelectRadioSite.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Input } from 'reactstrap';\nimport { setSelectedRadioSite } from \"../redux/actions\";\n\nclass SelectRadioSite extends React.Component {\n  async handleSelectedRadio(ev) {\n    let val = ev.target.value;\n    val = +val === 0 ? null : val; // if nothing selected value should be null to get all list\n\n    await this.props.setSelectedRadioSite(val); // this should return true to parent for reset activePage value;\n\n    this.props.handleRadioSiteChange(val === null ? true : \"radioSite\");\n  }\n\n  render() {\n    const {\n      language,\n      radioSites,\n      radioSite,\n      editOn\n    } = this.props;\n\n    if (language && radioSites) {\n      return /*#__PURE__*/React.createElement(Input, {\n        type: 'select',\n        className: 'custom-select',\n        disabled: editOn,\n        onChange: this.handleSelectedRadio.bind(this),\n        value: radioSite,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }\n      }, language.loadByRadioSite), radioSites.map(value => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          key: value,\n          value: value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 33\n          }\n        }, value);\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    language: state.language,\n    token: state.token,\n    radioSites: state.radioSites,\n    radioSite: state.radioSite,\n    editOn: state.editOn\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setSelectedRadioSite: radioSite => {\n      dispatch(setSelectedRadioSite(radioSite));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectRadioSite);","map":{"version":3,"sources":["C:/Users/soperasyon27/Desktop/FE/src18mart/src/src/components/SelectRadioSite.jsx"],"names":["React","connect","Input","setSelectedRadioSite","SelectRadioSite","Component","handleSelectedRadio","ev","val","target","value","props","handleRadioSiteChange","render","language","radioSites","radioSite","editOn","bind","loadByRadioSite","map","mapStateToProps","state","token","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,KAAR,QAAoB,YAApB;AACA,SAAQC,oBAAR,QAAmC,kBAAnC;;AAEA,MAAMC,eAAN,SAA8BJ,KAAK,CAACK,SAApC,CAA8C;AAE1C,QAAMC,mBAAN,CAA0BC,EAA1B,EAA8B;AAC1B,QAAIC,GAAG,GAAGD,EAAE,CAACE,MAAH,CAAUC,KAApB;AAEAF,IAAAA,GAAG,GAAG,CAACA,GAAD,KAAS,CAAT,GAAa,IAAb,GAAoBA,GAA1B,CAH0B,CAGK;;AAE/B,UAAM,KAAKG,KAAL,CAAWR,oBAAX,CAAgCK,GAAhC,CAAN,CAL0B,CAO1B;;AACA,SAAKG,KAAL,CAAWC,qBAAX,CAAkCJ,GAAG,KAAK,IAAT,GAAiB,IAAjB,GAAwB,WAAzD;AACH;;AAEDK,EAAAA,MAAM,GAAG;AACL,UAAM;AAACC,MAAAA,QAAD;AAAWC,MAAAA,UAAX;AAAuBC,MAAAA,SAAvB;AAAkCC,MAAAA;AAAlC,QAA4C,KAAKN,KAAvD;;AACA,QAAIG,QAAQ,IAAIC,UAAhB,EAA4B;AACxB,0BACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,QAAb;AACO,QAAA,SAAS,EAAE,eADlB;AAEO,QAAA,QAAQ,EAAEE,MAFjB;AAGO,QAAA,QAAQ,EAAE,KAAKX,mBAAL,CAAyBY,IAAzB,CAA8B,IAA9B,CAHjB;AAIO,QAAA,KAAK,EAAEF,SAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAMI;AAAQ,QAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmBF,QAAQ,CAACK,eAA5B,CANJ,EAOKJ,UAAU,CAACK,GAAX,CAAgBV,KAAD,IAAW;AACvB,4BAAQ;AAAQ,UAAA,GAAG,EAAEA,KAAb;AAAoB,UAAA,KAAK,EAAEA,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAmCA,KAAnC,CAAR;AACH,OAFA,CAPL,CADJ;AAcH,KAfD,MAeO;AACH,0BACI,yCADJ;AAGH;AACJ;;AAnCyC;;AAsC9C,SAASW,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,SAAO;AACHR,IAAAA,QAAQ,EAAEQ,KAAK,CAACR,QADb;AAEHS,IAAAA,KAAK,EAAED,KAAK,CAACC,KAFV;AAGHR,IAAAA,UAAU,EAAEO,KAAK,CAACP,UAHf;AAIHC,IAAAA,SAAS,EAAEM,KAAK,CAACN,SAJd;AAKHC,IAAAA,MAAM,EAAEK,KAAK,CAACL;AALX,GAAP;AAOH;;AACD,SAASO,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACHtB,IAAAA,oBAAoB,EAAGa,SAAD,IAAe;AAACS,MAAAA,QAAQ,CAACtB,oBAAoB,CAACa,SAAD,CAArB,CAAR;AAA0C;AAD7E,GAAP;AAGH;;AAED,eAAef,OAAO,CAACoB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CpB,eAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Input} from 'reactstrap';\r\nimport {setSelectedRadioSite} from \"../redux/actions\";\r\n\r\nclass SelectRadioSite extends React.Component {\r\n\r\n    async handleSelectedRadio(ev) {\r\n        let val = ev.target.value;\r\n\r\n        val = +val === 0 ? null : val; // if nothing selected value should be null to get all list\r\n\r\n        await this.props.setSelectedRadioSite(val);\r\n\r\n        // this should return true to parent for reset activePage value;\r\n        this.props.handleRadioSiteChange((val === null) ? true : \"radioSite\");\r\n    }\r\n\r\n    render() {\r\n        const {language, radioSites, radioSite, editOn} = this.props;\r\n        if (language && radioSites) {\r\n            return (\r\n                <Input type={'select'}\r\n                       className={'custom-select'}\r\n                       disabled={editOn}\r\n                       onChange={this.handleSelectedRadio.bind(this)}\r\n                       value={radioSite}\r\n                >\r\n                    <option value=\"0\">{language.loadByRadioSite}</option>\r\n                    {radioSites.map((value) => {\r\n                        return (<option key={value} value={value}>{value}</option>)\r\n                    })\r\n                    }\r\n                </Input>\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        language: state.language,\r\n        token: state.token,\r\n        radioSites: state.radioSites,\r\n        radioSite: state.radioSite,\r\n        editOn: state.editOn\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setSelectedRadioSite: (radioSite) => {dispatch(setSelectedRadioSite(radioSite))}\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectRadioSite);"]},"metadata":{},"sourceType":"module"}