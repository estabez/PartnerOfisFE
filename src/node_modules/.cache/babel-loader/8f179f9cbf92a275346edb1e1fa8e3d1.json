{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\views\\\\Matrix.jsx\";\nimport React, { createRef } from 'react';\nimport { connect } from \"react-redux\";\nimport { Row, Col, Card, CardBody, CardFooter, Jumbotron, Button } from 'reactstrap';\nimport { HotTable } from '@handsontable/react';\nimport Handsontable from 'handsontable';\nimport { groupingMap } from '../matrixDataMap';\nimport { columnLogic } from '../matrixColumnLogicMap';\nimport Pagination from \"react-js-pagination\";\nimport Header from '../components/Header';\nimport Sidebar from '../components/Sidebar';\nimport Toolbar from '../components/ToolbarMatrix';\nimport ModalTemplate from '../components/ModalImport';\nimport Spinner from '../components/Spinner';\nimport data from '../sampleData/data';\nimport { editOnToggle, spinnerToggle } from \"../redux/actions\";\nimport { confirmAlert } from 'react-confirm-alert'; // Import\n\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport ModalExport from \"../components/ModalExport\"; // Import css\n\nimport RestApiModule from '../RestApiModule';\n\nclass Matrix extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.restApi = new RestApiModule();\n    this.hotTableComponent = createRef();\n    this.hot = null;\n    this.handsontableData = data.SAFI;\n    this.handsontableDataBackup = null;\n    this.errorMessages = null;\n    this.errorBoxTitle = null;\n    this.columnHeaders = [];\n    this.titles = [];\n    this.columns = [];\n    this.handleColumnHeaders();\n    this.editable = ['region', 'etat', 'oldAggrSite', 'newAggrSite', 'radioSite' //,'rncName', 'bscName'\n    ]; // test - will remove\n\n    this.selectedRowCoords = {\n      r: null,\n      c: null\n    };\n    this.editedRowCoords = {\n      r: null,\n      c: null\n    };\n    this.validatedCell = {\n      r: null,\n      c: null\n    };\n    this.rowValidation = true;\n    this.showHistory = false;\n    this.filter = null;\n    this.radioSite = {\n      isExists: false,\n      value: ''\n    }; // check it, if doesnt need, remove\n\n    this.itemPerPage = +process.env.REACT_APP_MATRIX_ITEM_PER_PAGE;\n    this.state = {\n      isDataExistsInDB: false,\n      newRowAdded: false,\n      showHistory: false,\n      activePage: 1,\n      totalCountOfData: 0,\n      fileJSON: []\n    };\n    Handsontable.hooks.add('afterSelectionEnd', (r, c) => {\n      this.selectedRowCoords.r = r;\n      this.selectedRowCoords.c = c;\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    if (this.props.user) this.setStateAsync({\n      permittedColumns: this.props.user.role.permittedColumns\n    });\n    this.dataLoad();\n    this.dataCountOfSelectedRegion();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  calculatePagination(total) {\n    const pageCount = +total / this.itemPerPage;\n    this.setStateAsync({\n      totalCountOfData: total,\n      pageCount\n    });\n  }\n\n  dataCountOfSelectedRegion() {\n    const _this$props = this.props,\n          token = _this$props.token,\n          region = _this$props.region;\n\n    if (region) {\n      this.restApi.callApi('getMatrixDataCount', {\n        token,\n        region\n      }).then(response => {\n        this.calculatePagination(response.ConnectivityCount[0].Count);\n      });\n    }\n  }\n\n  getExportDataJSON() {\n    if (this.props.region) {\n      this.restApi.callApi('exportData', {\n        token: this.props.token,\n        region: this.props.region\n      }).then(response => {\n        this.setStateAsync({\n          fileJSON: response.ExportedExcelAsJSON\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }\n\n  async dataLoad() {\n    if (this._isMounted) {\n      const _this$props2 = this.props,\n            token = _this$props2.token,\n            region = _this$props2.region; //const region = (selectedRegion && +selectedRegion !== 0) ? selectedRegion : regions ? regions[0] : false;\n\n      /*if (selectedRegion !== undefined) {\r\n          this.setStateAsync({activePage: 1});\r\n          this.setStateAsync({showHistory: false});\r\n      }\r\n      */\n\n      if (region) {\n        this.props.setSpinner();\n        await this.restApi.callApi('getMatrixDataCount', {\n          token,\n          region\n        }).then(response => {\n          this.calculatePagination(response.ConnectivityCount[0].Count);\n        });\n        this.restApi.callApi('getMatrixData', {\n          token,\n          region,\n          count: this.itemPerPage.toString(),\n          page_index: this.state.activePage.toString()\n        }).then(async response => {\n          //console.log(response)\n          this.setStateAsync({\n            isDataExistsInDB: true\n          });\n          this.handsontableData = response.ConnectivityMatrix; // store the copy of data\n\n          this.hot = this.hotTableComponent.current.hotInstance;\n          this.hot.loadData(this.handsontableData);\n          /* Filter for show active rows only*/\n\n          this.filter = this.hot.getPlugin('filters');\n          await this.revisionRowFilter();\n          this.props.setSpinner();\n        }).catch(err => {\n          // err\n          this.props.setSpinner();\n        });\n      }\n    }\n\n    this.getExportDataJSON();\n  }\n\n  setStateAsync(state) {\n    return new Promise(resolve => {\n      this.setState(state, resolve);\n    });\n  }\n\n  async handlePageChange(pageNumber) {\n    //console.log(pageNumber);\n    // TODO: call api to retrieve data for matrix page\n    // data will provided by page number\n    await this.setStateAsync({\n      activePage: pageNumber\n    });\n    this.dataLoad();\n  }\n\n  handleEditClick() {\n    const _this$selectedRowCoor = this.selectedRowCoords,\n          r = _this$selectedRowCoor.r,\n          c = _this$selectedRowCoor.c;\n    if (r === null && c === null) return; //console.log(this.hot.getCellMeta(r, 4));\n    //console.log(this.hot.getRangedData([r, 0, r, this.hot.countCols()]));\n    // create backup data before editing;\n\n    this.handsontableDataBackup = JSON.parse(JSON.stringify(this.handsontableData)); // Change edit mode on redux\n\n    this.props.setEdit();\n    this.setCellProperties(r, c);\n    this.editedRowCoords.r = r;\n    this.editedRowCoords.c = c;\n  }\n\n  async handleCancelClick() {\n    await this.setStateAsync({\n      newRowAdded: false\n    });\n    this.cancelEdit();\n  }\n\n  handleSaveClick() {\n    if (this.rowValidation) {\n      const _this$editedRowCoords = this.editedRowCoords,\n            r = _this$editedRowCoords.r,\n            c = _this$editedRowCoords.c; // data would send to API\n\n      const data = this.hot.getDataAtRow(r);\n      console.log(data);\n      this.resetRow(r); // should remove, refresh data from DB\n\n      this.selectedRowCoords.r = r;\n      this.selectedRowCoords.c = c;\n      this.editedRowCoords.r = null;\n      this.editedRowCoords.c = null; // Change edit mode on redux\n\n      this.props.setEdit();\n    } else {\n      alert('Validation errors');\n    }\n  }\n\n  handleSaveHistoryClick() {\n    alert('History handle');\n  }\n\n  async handleNewRowClick() {\n    await this.setStateAsync({\n      newRowAdded: true\n    }); // create backup data before editing;\n\n    this.handsontableDataBackup = JSON.parse(JSON.stringify(this.handsontableData));\n    this.props.setEdit();\n    this.hot.alter('insert_row', 0, 1);\n    this.setCellProperties(0, null);\n  } // history toggle finished\n\n\n  async handleHistoryToggle() {\n    await this.setStateAsync({\n      showHistory: !this.state.showHistory\n    });\n    await this.revisionRowFilter();\n  }\n\n  async revisionRowFilter() {\n    if (this._isMounted) {\n      const colIndex = this.findIndexOfColumn(0, 'ARCHIVED');\n      const arg = this.state.showHistory ? '' : 'NO'; // this param is for filtering on handsontable\n\n      if (this.state.showHistory) {\n        this.filter.removeConditions(colIndex);\n      } else {\n        this.filter.addCondition(colIndex, 'contains', arg);\n      }\n\n      await this.filter.filter(); // Makeup for revisioned rows.\n\n      await this.iterateRevisionRows(); //this.props.setSpinner();\n    }\n  }\n\n  setCellProperties(r, c) {\n    const colCount = this.hot.countCols();\n    let col = c !== null ? c : 0;\n\n    for (let x = 0; x <= colCount; x++) {\n      const _this$hot$getCellMeta = this.hot.getCellMeta(r, x),\n            prop = _this$hot$getCellMeta.prop; //if (this.editable.indexOf(prop) >= 0) {\n\n\n      if (this.state.permittedColumns.indexOf(prop) >= 0) {\n        const type = this.hot.getDataType(r, x); // get cell type from loaded map\n        // this 2 row for initiate the rules on editing row.\n        //const value = this.hot.getDataAtCell(r, x);\n        //this.columnEvents(r, prop, value);\n\n        col = col === 0 ? x : col; // when add new row find first editable col.\n\n        this.hot.setCellMeta(r, x, \"editor\", type);\n        this.hot.setCellMeta(r, x, \"className\", 'bg-warning text-dark');\n      }\n    } // set initial value for newly adding rows\n\n\n    if (this.state.newRowAdded) {\n      this.setInitialValueOfColumn();\n    }\n\n    this.hot.render();\n    this.hot.selectCell(r, col);\n  }\n\n  findIndexOfColumn(r, propName) {\n    const colCount = this.hot.countCols();\n\n    for (let c = 0; c <= colCount; c++) {\n      const _this$hot$getCellMeta2 = this.hot.getCellMeta(r, c),\n            prop = _this$hot$getCellMeta2.prop;\n\n      if (prop === propName) {\n        return c;\n      }\n    }\n  } // Finished initial value setter\n\n\n  setInitialValueOfColumn() {\n    this.columns.map(item => {\n      if (item.hasOwnProperty('initialValue')) {\n        this.hot.setDataAtRowProp(0, item.data, item.initialValue);\n      }\n\n      return true;\n    });\n  } // Finished, cancel edit return back to last backup data\n\n\n  cancelEdit() {\n    this.handsontableData = JSON.parse(JSON.stringify(this.handsontableDataBackup));\n    this.hot.loadData(this.handsontableData);\n    this.hot.render(); // Change edit mode on redux\n\n    this.props.setEdit();\n  } // reset row finished\n\n\n  resetRow(r) {\n    const colCount = this.hot.countCols();\n\n    for (let x = 0; x <= colCount; x++) {\n      this.hot.setCellMeta(r, x, \"editor\", false);\n      this.hot.setCellMeta(r, x, \"className\", 'bg-primary text-white');\n    }\n\n    this.hot.render();\n    this.setState({\n      newRowAdded: false\n    });\n  } // disable moves finished\n\n\n  disableMoves() {\n    return false;\n  } // Finished ip validation rule\n\n\n  ipValidate(value, callback) {\n    const pat = /^(?:\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b|null)$/;\n    this.rowValidation = pat.test(value);\n    callback(this.rowValidation);\n    if (!this.rowValidation) this.showMessage(this.errorBoxTitle, this.errorMessages.invalidIP, true);\n  } // Finished numeric value validation\n\n\n  numericValidate(value, callback) {\n    const pat = /^\\d+$/;\n    this.rowValidation = pat.test(value);\n    callback(this.rowValidation);\n    if (!this.rowValidation) this.showMessage(this.errorBoxTitle, this.errorMessages.invalidNumber, true);\n  } // Finished validation message box\n\n\n  showMessage(title, message, validatorClose) {\n    confirmAlert({\n      title: 'Validation Warning',\n      message: message,\n      closeOnEscape: false,\n      closeOnClickOutside: false,\n      customUI: ({\n        onClose\n      }) => {\n        const closeAction = () => {\n          if (validatorClose) {\n            this.hot.selectCell(this.validatedCell.r, this.validatedCell.c);\n            if (this.hot.getActiveEditor() !== undefined) this.hot.getActiveEditor().beginEditing();\n            onClose();\n          } else {\n            this.cancelEdit();\n            onClose();\n          }\n        };\n\n        return React.createElement(\"div\", {\n          className: \"card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 401\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 402\n          },\n          __self: this\n        }, title, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          onClick: closeAction,\n          \"aria-label\": \"Close\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 405\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          \"aria-hidden\": \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 408\n          },\n          __self: this\n        }, \"\\xD7\"))), React.createElement(\"div\", {\n          className: \"card-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 412\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: 'card-text text-danger',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 413\n          },\n          __self: this\n        }, message)), React.createElement(\"div\", {\n          className: \"card-footer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 415\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: 'btn btn-warning',\n          onClick: closeAction,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 416\n          },\n          __self: this\n        }, \"Ok\")));\n      }\n    });\n  } // Finished column header groups\n\n\n  handleColumnHeaders() {\n    // Create a copy of map file\n    const headerMap = JSON.parse(JSON.stringify(groupingMap)); // Set the header groups for table\n\n    const headerGrouping = headerMap.filter(item => {\n      item.colspan = item.columns.length;\n      return typeof item.columns !== \"array\";\n    }); // set each and every column defaults\n\n    const cols = headerMap.map(item => {\n      return item.columns.map(c => {\n        this.titles.push(c.label);\n        c.editor = false; // default readonly\n\n        if (typeof c.validator !== \"undefined\") {\n          if (c.validator === 'ipValidator') {\n            c.validator = (value, callback) => {\n              this.ipValidate(value, callback);\n            };\n          }\n\n          if (c.validator === 'isNumeric') {\n            c.validator = (value, callback) => {\n              this.numericValidate(value, callback);\n            };\n          }\n        }\n\n        if (typeof c.type !== \"undefined\") {\n          if (c.type === 'dropdown') {\n            this.setPickList(c.data).then(list => {\n              c.source = list;\n            });\n          }\n        }\n\n        return c;\n      });\n    }); // spread the columns into single object\n\n    cols.map(c => {\n      this.columns = [...this.columns, ...c];\n    }); // Pushing header group const to related vars\n\n    this.columnHeaders.push(headerGrouping);\n    this.columnHeaders.push(this.titles);\n  } // Finished colouring header\n\n\n  headerColoring(col, TH) {\n    const TR = TH.parentNode;\n    const THEAD = TR.parentNode;\n    const b = THEAD.childNodes.length;\n    const n = Array.prototype.indexOf.call(THEAD.childNodes, TR);\n    const headerLevel = -1 * b + n;\n\n    function applyClass(elem, className) {\n      if (!Handsontable.dom.hasClass(elem, className)) Handsontable.dom.addClass(elem, className);\n    }\n\n    if (headerLevel === -1 || headerLevel === -2) {\n      if (col >= 0 && col <= 11) applyClass(TH, 'color1');\n      if (col === 12) applyClass(TH, 'color2');\n      if (col >= 13 && col <= 20) applyClass(TH, 'color3');\n      if (col >= 21 && col <= 27) applyClass(TH, 'color4');\n      if (col >= 28 && col <= 30) applyClass(TH, 'color5');\n      if (col >= 31 && col <= 34) applyClass(TH, 'color6');\n      if (col >= 35 && col <= 43) applyClass(TH, 'color7');\n      if (col >= 44 && col <= 46) applyClass(TH, 'color8');\n      if (col >= 47 && col <= 50) applyClass(TH, 'color9');\n    }\n  } // Finished pick list setter function\n\n\n  setPickList(name) {\n    return new Promise((res, rej) => {\n      const value = `${name}Picklist_value`;\n      const key = `${name}Picklist`;\n      this.restApi.callApi('getPickList', {\n        token: this.props.token,\n        pickListName: key\n      }).then(response => {\n        if (response.pickList.length > 0) {\n          const list = response.pickList.map(item => {\n            return item[value];\n          });\n          res(list);\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    });\n  } // Finished revision row makeup\n\n\n  iterateRevisionRows() {\n    function applyClass(instance, td) {\n      if (!td.classList.contains('revision-row')) td.classList.add('revision-row');\n    }\n\n    const rc = this.hot.countRows();\n    const cc = this.hot.countCols();\n\n    for (let r = 0; r <= rc; r++) {\n      const value = this.hot.getDataAtRowProp(r, 'ARCHIVED');\n\n      if (value === 'YES') {\n        for (let c = 0; c <= cc; c++) {\n          this.hot.setCellMeta(r, c, 'renderer', applyClass);\n        }\n      }\n    }\n\n    this.hot.render();\n  } // Read the rule from imported rule file\n\n\n  ruleExtractor(columnId) {\n    return columnLogic.find(item => {\n      return item.id === columnId;\n    });\n  } // Generic attributes validations and rule runner\n\n\n  async columnEvents(r, c, newV) {\n    this.validatedCell.r = r;\n    this.validatedCell.c = c;\n    const properties = this.ruleExtractor(c);\n\n    if (properties) {\n      const methodCaller = properties.methodCaller,\n            rules = properties.rules,\n            executeRules = properties.executeRules,\n            paramName = properties.paramName,\n            additionalParams = properties.additionalParams;\n\n      if (methodCaller) {\n        // we understand that this logic needs to call api\n        // default dto\n        let dto = {\n          token: this.props.token,\n          [paramName]: this.hot.getDataAtRowProp(r, c)\n        };\n\n        if (typeof additionalParams !== 'undefined' && typeof additionalParams === 'object') {\n          // create addition parameter to bind exact one\n          const additionalDTO = additionalParams.map(prop => {\n            return {\n              [prop]: this.hot.getDataAtRowProp(r, prop)\n            };\n          }); // dto with additional parameters\n\n          dto = Object.assign({}, dto, ...additionalDTO);\n        } // method caller and logic execution\n        //await this.genericCL(methodCaller, dto);\n\n\n        this.restApi.callApi(methodCaller, dto).then(response => {\n          if (typeof response.isExist !== 'undefined') {\n            if (!response.isExist) {\n              // value is not exist in DB, show message\n              this.showMessage(this.errorBoxTitle, this.errorMessages[c], true);\n              return false;\n            } else {\n              // value is exist in DB, check other rules associated with that one\n              if (executeRules.length > 0) {\n                executeRules.map(props => {\n                  const propId = props.propId;\n                  const data = this.hot.getDataAtRowProp(r, propId);\n                  this.columnEvents(r, propId, data);\n                });\n              }\n            }\n          } else {\n            rules[0].changedValue = response.List.map(i => {\n              return i.value;\n            });\n            this.staticRules(r, null, rules);\n          }\n        });\n      } else {\n        this.staticRules(r, newV, rules);\n      }\n    }\n  }\n\n  staticRules(r, value, rules) {\n    if (rules) {\n      rules.map(item => {\n        if (value !== null && item.columnValue === value) {\n          // status changes\n          this.hot.setDataAtRowProp(r, item.changedId, item.changedValue);\n        } else {\n          this.hot.setCellMeta(r, this.hot.propToCol(item.changedId), 'source', item.changedValue);\n        }\n      });\n    }\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          maximize = _this$props3.maximize,\n          language = _this$props3.language,\n          contentCSS = _this$props3.contentCSS;\n\n    if (language) {\n      this.errorBoxTitle = language.validationMessageBoxTitle;\n      this.errorMessages = language.validationErrorMessages;\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }), React.createElement(Row, {\n      className: \"h-100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      maximize: maximize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }), React.createElement(Col, {\n      className: contentCSS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      wrapper: 'toolbar mt-2',\n      isDataExist: this.state.isDataExistsInDB,\n      newRowAdded: this.state.newRowAdded,\n      newClick: this.handleNewRowClick.bind(this),\n      editClick: this.handleEditClick.bind(this),\n      cancelClick: this.handleCancelClick.bind(this),\n      saveClick: this.handleSaveClick.bind(this),\n      saveHistoryClick: this.handleSaveHistoryClick.bind(this),\n      historyToggle: this.handleHistoryToggle.bind(this),\n      handleRegionChange: this.dataLoad.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }), React.createElement(Card, {\n      className: 'mt-1 fixedCard',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672\n      },\n      __self: this\n    }, React.createElement(CardBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }, React.createElement(HotTable, {\n      ref: this.hotTableComponent,\n      id: 'hot',\n      rowHeaders: true,\n      licenseKey: 'non-commercial-and-evaluation',\n      nestedHeaders: this.columnHeaders,\n      columns: this.columns,\n      stretchH: 'all',\n      dropdownMenu: true,\n      filters: true,\n      manualColumnResize: true,\n      width: '100%',\n      height: '100%',\n      fixedColumnsLeft: 0,\n      columnSorting: true,\n      currentRowClassName: ['bg-primary', 'text-white'],\n      enterBeginsEditing: false,\n      outsideClickDeselects: false,\n      enterMoves: this.disableMoves(),\n      fillHandle: this.disableMoves(),\n      afterValidate: (isValid, value, row, prop) => {\n        // this is check dropdown values are proper or not.\n        this.validatedCell.r = row;\n        this.validatedCell.c = prop;\n      },\n      afterGetColHeader: (col, TH) => {\n        this.headerColoring(col, TH);\n      },\n      afterCreateRow: (index, amount, source) => {\n        console.log(index, amount, source);\n      },\n      afterChange: changes => {\n        // TODO: check esc button when its clicked\n        if (changes) {\n          const _changes$ = _slicedToArray(changes[0], 4),\n                r = _changes$[0],\n                c = _changes$[1],\n                oldV = _changes$[2],\n                newV = _changes$[3];\n\n          if (oldV !== newV) this.columnEvents(r, c, newV);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    }), !this.state.isDataExistsInDB && React.createElement(\"div\", {\n      className: 'empty-data',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      className: \"empty-data-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"display-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }, \"Connectivity Matrix Data\"), React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 718\n      },\n      __self: this\n    }, \"This page is using for manipulate the imported data to EAI DB.\"), React.createElement(\"hr\", {\n      className: \"my-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720\n      },\n      __self: this\n    }, \"It seems you have to do import for the first initialize. Please use the import button which is exist on toolbar.\")))), React.createElement(CardFooter, {\n      className: 'text-center',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }, React.createElement(Pagination, {\n      activePage: this.state.activePage,\n      itemsCountPerPage: this.itemPerPage,\n      totalItemsCount: this.state.totalCountOfData,\n      pageRangeDisplayed: 10,\n      onChange: this.handlePageChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727\n      },\n      __self: this\n    }))))), React.createElement(ModalTemplate, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739\n      },\n      __self: this\n    }), React.createElement(ModalExport, {\n      data: this.state.fileJSON,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740\n      },\n      __self: this\n    }), React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.token,\n    user: state.user,\n    language: state.language,\n    maximize: state.maximize,\n    contentCSS: state.contentCSS,\n    //regions: state.regions,\n    region: state.region,\n    spinnerToggle: state.spinnerToggle\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setEdit: () => dispatch(editOnToggle()),\n    setSpinner: () => dispatch(spinnerToggle())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Matrix);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/views/Matrix.jsx"],"names":["React","createRef","connect","Row","Col","Card","CardBody","CardFooter","Jumbotron","Button","HotTable","Handsontable","groupingMap","columnLogic","Pagination","Header","Sidebar","Toolbar","ModalTemplate","Spinner","data","editOnToggle","spinnerToggle","confirmAlert","ModalExport","RestApiModule","Matrix","Component","constructor","props","_isMounted","restApi","hotTableComponent","hot","handsontableData","SAFI","handsontableDataBackup","errorMessages","errorBoxTitle","columnHeaders","titles","columns","handleColumnHeaders","editable","selectedRowCoords","r","c","editedRowCoords","validatedCell","rowValidation","showHistory","filter","radioSite","isExists","value","itemPerPage","process","env","REACT_APP_MATRIX_ITEM_PER_PAGE","state","isDataExistsInDB","newRowAdded","activePage","totalCountOfData","fileJSON","hooks","add","componentDidMount","user","setStateAsync","permittedColumns","role","dataLoad","dataCountOfSelectedRegion","componentWillUnmount","calculatePagination","total","pageCount","token","region","callApi","then","response","ConnectivityCount","Count","getExportDataJSON","ExportedExcelAsJSON","catch","error","console","log","setSpinner","count","toString","page_index","ConnectivityMatrix","current","hotInstance","loadData","getPlugin","revisionRowFilter","err","Promise","resolve","setState","handlePageChange","pageNumber","handleEditClick","JSON","parse","stringify","setEdit","setCellProperties","handleCancelClick","cancelEdit","handleSaveClick","getDataAtRow","resetRow","alert","handleSaveHistoryClick","handleNewRowClick","alter","handleHistoryToggle","colIndex","findIndexOfColumn","arg","removeConditions","addCondition","iterateRevisionRows","colCount","countCols","col","x","getCellMeta","prop","indexOf","type","getDataType","setCellMeta","setInitialValueOfColumn","render","selectCell","propName","map","item","hasOwnProperty","setDataAtRowProp","initialValue","disableMoves","ipValidate","callback","pat","test","showMessage","invalidIP","numericValidate","invalidNumber","title","message","validatorClose","closeOnEscape","closeOnClickOutside","customUI","onClose","closeAction","getActiveEditor","undefined","beginEditing","headerMap","headerGrouping","colspan","length","cols","push","label","editor","validator","setPickList","list","source","headerColoring","TH","TR","parentNode","THEAD","b","childNodes","n","Array","prototype","call","headerLevel","applyClass","elem","className","dom","hasClass","addClass","name","res","rej","key","pickListName","pickList","instance","td","classList","contains","rc","countRows","cc","getDataAtRowProp","ruleExtractor","columnId","find","id","columnEvents","newV","properties","methodCaller","rules","executeRules","paramName","additionalParams","dto","additionalDTO","Object","assign","isExist","propId","changedValue","List","i","staticRules","columnValue","changedId","propToCol","maximize","language","contentCSS","validationMessageBoxTitle","validationErrorMessages","bind","isValid","row","index","amount","changes","oldV","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {createRef} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Row, Col, Card, CardBody, CardFooter, Jumbotron, Button} from 'reactstrap';\r\n\r\nimport {HotTable} from '@handsontable/react';\r\nimport Handsontable from 'handsontable';\r\nimport {groupingMap} from '../matrixDataMap';\r\nimport {columnLogic} from '../matrixColumnLogicMap';\r\nimport Pagination from \"react-js-pagination\";\r\n\r\nimport Header from '../components/Header'\r\nimport Sidebar from '../components/Sidebar'\r\nimport Toolbar from '../components/ToolbarMatrix'\r\nimport ModalTemplate from '../components/ModalImport'\r\nimport Spinner from '../components/Spinner'\r\nimport data from '../sampleData/data';\r\nimport {editOnToggle, spinnerToggle} from \"../redux/actions\";\r\n\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport ModalExport from \"../components/ModalExport\"; // Import css\r\n\r\nimport RestApiModule from '../RestApiModule'\r\n\r\nclass Matrix extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.restApi = new RestApiModule();\r\n\r\n        this.hotTableComponent = createRef();\r\n        this.hot = null;\r\n        this.handsontableData = data.SAFI;\r\n        this.handsontableDataBackup = null;\r\n\r\n        this.errorMessages = null;\r\n        this.errorBoxTitle = null;\r\n        this.columnHeaders = [];\r\n        this.titles = [];\r\n        this.columns = [];\r\n        this.handleColumnHeaders();\r\n        this.editable = ['region','etat','oldAggrSite', 'newAggrSite', 'radioSite'\r\n        //,'rncName', 'bscName'\r\n        ]; // test - will remove\r\n\r\n        this.selectedRowCoords = {r: null, c: null};\r\n        this.editedRowCoords = {r: null, c: null};\r\n        this.validatedCell = {r: null, c: null};\r\n        this.rowValidation = true;\r\n        this.showHistory = false;\r\n        this.filter = null;\r\n\r\n        this.radioSite = {\r\n                isExists: false,\r\n                value: ''\r\n        }; // check it, if doesnt need, remove\r\n\r\n        this.itemPerPage = +process.env.REACT_APP_MATRIX_ITEM_PER_PAGE;\r\n        this.state = {\r\n            isDataExistsInDB: false,\r\n            newRowAdded: false,\r\n            showHistory: false,\r\n            activePage: 1,\r\n            totalCountOfData: 0,\r\n            fileJSON: []\r\n        };\r\n\r\n        Handsontable.hooks.add('afterSelectionEnd', (r, c) => {\r\n            this.selectedRowCoords.r = r;\r\n            this.selectedRowCoords.c = c;\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n\r\n        if (this.props.user)\r\n            this.setStateAsync({permittedColumns: this.props.user.role.permittedColumns});\r\n\r\n        this.dataLoad();\r\n        this.dataCountOfSelectedRegion();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    calculatePagination(total) {\r\n\r\n        const pageCount = +total / this.itemPerPage;\r\n        this.setStateAsync({totalCountOfData: total, pageCount})\r\n    }\r\n\r\n    dataCountOfSelectedRegion() {\r\n\r\n        const {token, region} = this.props;\r\n\r\n        if (region) {\r\n            this.restApi.callApi('getMatrixDataCount', {\r\n                token,\r\n                region\r\n            }).then(response => {\r\n                this.calculatePagination(response.ConnectivityCount[0].Count)\r\n            })\r\n        }\r\n    }\r\n\r\n    getExportDataJSON () {\r\n        if(this.props.region) {\r\n            this.restApi.callApi('exportData', {\r\n                token: this.props.token,\r\n                region: this.props.region\r\n            }).then(response => {\r\n                this.setStateAsync({fileJSON: response.ExportedExcelAsJSON});\r\n            }).catch((error) => {\r\n                console.log(error)\r\n            });\r\n        }\r\n    }\r\n\r\n    async dataLoad() {\r\n\r\n        if (this._isMounted) {\r\n\r\n            const {token, region} = this.props;\r\n\r\n            //const region = (selectedRegion && +selectedRegion !== 0) ? selectedRegion : regions ? regions[0] : false;\r\n\r\n            /*if (selectedRegion !== undefined) {\r\n                this.setStateAsync({activePage: 1});\r\n                this.setStateAsync({showHistory: false});\r\n            }\r\n            */\r\n            if (region) {\r\n                this.props.setSpinner();\r\n                await this.restApi.callApi('getMatrixDataCount', {\r\n                    token,\r\n                    region\r\n                }).then(response => {\r\n                    this.calculatePagination(response.ConnectivityCount[0].Count)\r\n                })\r\n                this.restApi.callApi('getMatrixData', {\r\n                    token,\r\n                    region,\r\n                    count: this.itemPerPage.toString(),\r\n                    page_index: this.state.activePage.toString()\r\n                }).then(async (response) => {\r\n                    //console.log(response)\r\n                    this.setStateAsync({isDataExistsInDB: true});\r\n\r\n                    this.handsontableData = response.ConnectivityMatrix; // store the copy of data\r\n\r\n                    this.hot = this.hotTableComponent.current.hotInstance;\r\n                    this.hot.loadData(this.handsontableData);\r\n\r\n                    /* Filter for show active rows only*/\r\n                    this.filter = this.hot.getPlugin('filters');\r\n\r\n                    await this.revisionRowFilter();\r\n                    this.props.setSpinner();\r\n                }).catch(err => {\r\n                    // err\r\n                    this.props.setSpinner();\r\n                })\r\n            }\r\n        }\r\n        this.getExportDataJSON();\r\n    }\r\n\r\n    setStateAsync(state) {\r\n        return new Promise((resolve) => {\r\n            this.setState(state, resolve)\r\n        });\r\n    }\r\n\r\n    async handlePageChange(pageNumber) {\r\n        //console.log(pageNumber);\r\n        // TODO: call api to retrieve data for matrix page\r\n        // data will provided by page number\r\n        await this.setStateAsync({activePage: pageNumber});\r\n        this.dataLoad();\r\n    }\r\n\r\n    handleEditClick() {\r\n\r\n        const {r, c} = this.selectedRowCoords;\r\n        if (r === null && c === null) return;\r\n\r\n        //console.log(this.hot.getCellMeta(r, 4));\r\n        //console.log(this.hot.getRangedData([r, 0, r, this.hot.countCols()]));\r\n\r\n        // create backup data before editing;\r\n        this.handsontableDataBackup = JSON.parse(JSON.stringify(this.handsontableData));\r\n\r\n        // Change edit mode on redux\r\n        this.props.setEdit();\r\n\r\n        this.setCellProperties(r, c);\r\n        this.editedRowCoords.r = r;\r\n        this.editedRowCoords.c = c;\r\n    }\r\n\r\n    async handleCancelClick() {\r\n        await this.setStateAsync({newRowAdded : false});\r\n        this.cancelEdit();\r\n    }\r\n\r\n    handleSaveClick() {\r\n        if (this.rowValidation) {\r\n\r\n            const {r, c} = this.editedRowCoords;\r\n\r\n            // data would send to API\r\n            const data = this.hot.getDataAtRow(r);\r\n            console.log(data);\r\n\r\n            this.resetRow(r); // should remove, refresh data from DB\r\n\r\n            this.selectedRowCoords.r = r;\r\n            this.selectedRowCoords.c = c;\r\n            this.editedRowCoords.r = null;\r\n            this.editedRowCoords.c = null;\r\n\r\n\r\n            // Change edit mode on redux\r\n            this.props.setEdit();\r\n        } else {\r\n            alert('Validation errors');\r\n        }\r\n    }\r\n\r\n    handleSaveHistoryClick() {\r\n        alert('History handle');\r\n    }\r\n\r\n    async handleNewRowClick() {\r\n\r\n        await this.setStateAsync({newRowAdded : true});\r\n\r\n        // create backup data before editing;\r\n        this.handsontableDataBackup = JSON.parse(JSON.stringify(this.handsontableData));\r\n\r\n        this.props.setEdit();\r\n        this.hot.alter('insert_row', 0, 1);\r\n        this.setCellProperties(0, null);\r\n    }\r\n\r\n    // history toggle finished\r\n    async handleHistoryToggle() {\r\n\r\n        await this.setStateAsync({showHistory: !this.state.showHistory})\r\n        await this.revisionRowFilter();\r\n    }\r\n\r\n    async revisionRowFilter() {\r\n        if (this._isMounted) {\r\n            const colIndex = this.findIndexOfColumn(0,'ARCHIVED');\r\n\r\n            const arg = this.state.showHistory ? '' : 'NO'; // this param is for filtering on handsontable\r\n\r\n            if (this.state.showHistory) {\r\n                this.filter.removeConditions(colIndex);\r\n            } else {\r\n                this.filter.addCondition(colIndex, 'contains', arg);\r\n            }\r\n            await this.filter.filter();\r\n\r\n            // Makeup for revisioned rows.\r\n            await this.iterateRevisionRows();\r\n\r\n            //this.props.setSpinner();\r\n        }\r\n    }\r\n\r\n    setCellProperties(r, c) {\r\n\r\n        const colCount = this.hot.countCols();\r\n        let col = c !== null ? c : 0;\r\n\r\n        for (let x = 0; x <= colCount; x++) {\r\n            const {prop} = this.hot.getCellMeta(r,x);\r\n\r\n            //if (this.editable.indexOf(prop) >= 0) {\r\n            if (this.state.permittedColumns.indexOf(prop) >= 0) {\r\n\r\n                const type = this.hot.getDataType(r,x); // get cell type from loaded map\r\n\r\n                // this 2 row for initiate the rules on editing row.\r\n                //const value = this.hot.getDataAtCell(r, x);\r\n                //this.columnEvents(r, prop, value);\r\n\r\n                col = col === 0 ? x : col; // when add new row find first editable col.\r\n\r\n                this.hot.setCellMeta(r, x, \"editor\", type);\r\n                this.hot.setCellMeta(r, x, \"className\", 'bg-warning text-dark');\r\n            }\r\n        }\r\n        // set initial value for newly adding rows\r\n        if (this.state.newRowAdded) {\r\n            this.setInitialValueOfColumn();\r\n        }\r\n\r\n\r\n        this.hot.render();\r\n        this.hot.selectCell(r, col);\r\n    }\r\n\r\n    findIndexOfColumn(r, propName) {\r\n        const colCount = this.hot.countCols();\r\n        for (let c = 0; c <= colCount; c++) {\r\n            const {prop} = this.hot.getCellMeta(r,c);\r\n            if (prop === propName) {\r\n                return c;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Finished initial value setter\r\n    setInitialValueOfColumn() {\r\n        this.columns.map((item) => {\r\n            if (item.hasOwnProperty('initialValue')) {\r\n                this.hot.setDataAtRowProp(0, item.data, item.initialValue)\r\n            }\r\n            return true;\r\n        })\r\n    }\r\n\r\n    // Finished, cancel edit return back to last backup data\r\n    cancelEdit() {\r\n        this.handsontableData = JSON.parse(JSON.stringify(this.handsontableDataBackup));\r\n        this.hot.loadData(this.handsontableData);\r\n        this.hot.render();\r\n\r\n        // Change edit mode on redux\r\n        this.props.setEdit();\r\n    }\r\n\r\n    // reset row finished\r\n    resetRow(r) {\r\n        const colCount = this.hot.countCols();\r\n        for (let x = 0; x <= colCount; x++) {\r\n\r\n            this.hot.setCellMeta(r, x, \"editor\", false);\r\n            this.hot.setCellMeta(r, x, \"className\", 'bg-primary text-white');\r\n        }\r\n        this.hot.render();\r\n        this.setState({ newRowAdded : false});\r\n    }\r\n\r\n    // disable moves finished\r\n    disableMoves() {\r\n        return false;\r\n    }\r\n\r\n    // Finished ip validation rule\r\n    ipValidate(value, callback) {\r\n\r\n        const pat = /^(?:\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b|null)$/;\r\n\r\n        this.rowValidation = pat.test(value);\r\n        callback(this.rowValidation);\r\n        if (!this.rowValidation)\r\n            this.showMessage(this.errorBoxTitle, this.errorMessages.invalidIP, true);\r\n    }\r\n\r\n    // Finished numeric value validation\r\n    numericValidate(value, callback) {\r\n\r\n        const pat = /^\\d+$/;\r\n\r\n        this.rowValidation = pat.test(value);\r\n        callback(this.rowValidation);\r\n        if (!this.rowValidation)\r\n            this.showMessage(this.errorBoxTitle, this.errorMessages.invalidNumber, true);\r\n    }\r\n\r\n    // Finished validation message box\r\n    showMessage(title, message, validatorClose) {\r\n        confirmAlert({\r\n            title: 'Validation Warning',\r\n            message: message,\r\n            closeOnEscape: false,\r\n            closeOnClickOutside: false,\r\n            customUI: ({ onClose }) => {\r\n\r\n                const closeAction = () => {\r\n                    if (validatorClose) {\r\n                        this.hot.selectCell(this.validatedCell.r, this.validatedCell.c);\r\n                        if (this.hot.getActiveEditor() !== undefined)\r\n                            this.hot.getActiveEditor().beginEditing();\r\n                        onClose();\r\n\r\n                    } else {\r\n                        this.cancelEdit();\r\n                        onClose();\r\n                    }\r\n                }\r\n                return (\r\n                    <div className=\"card\">\r\n                        <div className=\"card-header\">\r\n                            {title}\r\n\r\n                            <button type=\"button\" className=\"close\"\r\n                                    onClick={closeAction}\r\n                                    aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                            <div className={'card-text text-danger'}>{message}</div>\r\n                        </div>\r\n                        <div className=\"card-footer\">\r\n                            <button className={'btn btn-warning'} onClick={closeAction}>\r\n                                Ok\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    // Finished column header groups\r\n    handleColumnHeaders() {\r\n\r\n        // Create a copy of map file\r\n        const headerMap = JSON.parse(JSON.stringify(groupingMap));\r\n\r\n        // Set the header groups for table\r\n        const headerGrouping = headerMap.filter((item) => {\r\n            item.colspan = item.columns.length;\r\n            return typeof item.columns !== \"array\"\r\n        })\r\n\r\n        // set each and every column defaults\r\n        const cols = headerMap.map((item) => {\r\n\r\n            return item.columns.map(c => {\r\n\r\n                this.titles.push(c.label);\r\n\r\n                c.editor = false; // default readonly\r\n\r\n                if (typeof c.validator !== \"undefined\") {\r\n\r\n                    if (c.validator === 'ipValidator') {\r\n                        c.validator = (value, callback) => {\r\n                            this.ipValidate(value, callback)\r\n                        }\r\n                    }\r\n\r\n                    if (c.validator === 'isNumeric') {\r\n                        c.validator = (value, callback) => {\r\n                            this.numericValidate(value, callback)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (typeof c.type !== \"undefined\") {\r\n                    if (c.type === 'dropdown') {\r\n                        this.setPickList(c.data).then((list) => {\r\n                            c.source = list;\r\n                        });\r\n                    }\r\n                }\r\n                return c;\r\n            });\r\n        })\r\n\r\n        // spread the columns into single object\r\n        cols.map((c) => {\r\n            this.columns = [...this.columns, ...c];\r\n        })\r\n\r\n        // Pushing header group const to related vars\r\n        this.columnHeaders.push(headerGrouping);\r\n        this.columnHeaders.push(this.titles);\r\n    }\r\n\r\n    // Finished colouring header\r\n    headerColoring(col, TH) {\r\n\r\n        const TR = TH.parentNode;\r\n        const THEAD = TR.parentNode;\r\n\r\n        const b = THEAD.childNodes.length;\r\n        const n = Array.prototype.indexOf.call(THEAD.childNodes, TR);\r\n        const headerLevel = (-1) * b + n;\r\n\r\n        function applyClass(elem, className) {\r\n            if (!Handsontable.dom.hasClass(elem, className))\r\n                Handsontable.dom.addClass(elem, className);\r\n        }\r\n\r\n        if (headerLevel === -1 || headerLevel === -2) {\r\n\r\n            if (col >=0 && col <= 11) applyClass(TH, 'color1');\r\n            if (col === 12) applyClass(TH, 'color2');\r\n            if (col >=13 && col <= 20) applyClass(TH, 'color3');\r\n            if (col >=21 && col <= 27) applyClass(TH, 'color4');\r\n            if (col >=28 && col <= 30) applyClass(TH, 'color5');\r\n            if (col >=31 && col <= 34) applyClass(TH, 'color6');\r\n            if (col >=35 && col <= 43) applyClass(TH, 'color7');\r\n            if (col >=44 && col <= 46) applyClass(TH, 'color8');\r\n            if (col >=47 && col <= 50) applyClass(TH, 'color9');\r\n        }\r\n    }\r\n\r\n    // Finished pick list setter function\r\n    setPickList(name) {\r\n        return new Promise ((res, rej) => {\r\n\r\n            const value = `${name}Picklist_value`;\r\n            const key = `${name}Picklist`;\r\n\r\n            this.restApi.callApi('getPickList', {\r\n                token: this.props.token,\r\n                pickListName: key\r\n\r\n            }).then((response) => {\r\n\r\n                if (response.pickList.length > 0) {\r\n                     const list = response.pickList.map((item) => {\r\n                        return item[value];\r\n                    })\r\n                    res(list)\r\n                }\r\n            }).catch((error) => {\r\n                console.log(error)\r\n            });\r\n        })\r\n    }\r\n\r\n    // Finished revision row makeup\r\n    iterateRevisionRows() {\r\n\r\n        function applyClass(instance, td) {\r\n            if (!td.classList.contains('revision-row'))\r\n                td.classList.add('revision-row');\r\n        }\r\n\r\n        const rc = this.hot.countRows();\r\n        const cc = this.hot.countCols();\r\n\r\n        for (let r = 0; r <= rc; r++) {\r\n            const value = this.hot.getDataAtRowProp(r, 'ARCHIVED');\r\n            if (value === 'YES') {\r\n                for (let c = 0; c <= cc; c++) {\r\n                    this.hot.setCellMeta(r, c, 'renderer', applyClass)\r\n                }\r\n            }\r\n        }\r\n        this.hot.render();\r\n    }\r\n\r\n    // Read the rule from imported rule file\r\n    ruleExtractor(columnId) {\r\n        return columnLogic.find((item) => {\r\n            return item.id === columnId;\r\n        })\r\n    }\r\n\r\n    // Generic attributes validations and rule runner\r\n    async columnEvents(r, c, newV) {\r\n\r\n        this.validatedCell.r = r;\r\n        this.validatedCell.c = c;\r\n\r\n        const properties = this.ruleExtractor(c);\r\n        if (properties) {\r\n            const {methodCaller, rules, executeRules, paramName, additionalParams} = properties;\r\n\r\n            if (methodCaller) {\r\n                // we understand that this logic needs to call api\r\n\r\n                // default dto\r\n                let dto = {\r\n                    token: this.props.token,\r\n                    [paramName]: this.hot.getDataAtRowProp(r, c)\r\n                };\r\n\r\n                if (typeof additionalParams !== 'undefined' &&\r\n                    typeof additionalParams === 'object') {\r\n\r\n                    // create addition parameter to bind exact one\r\n                    const additionalDTO = additionalParams.map((prop) => {\r\n                        return {[prop]: this.hot.getDataAtRowProp(r, prop)}\r\n                    });\r\n\r\n                    // dto with additional parameters\r\n                    dto = Object.assign({}, dto, ...additionalDTO);\r\n                }\r\n\r\n                // method caller and logic execution\r\n                //await this.genericCL(methodCaller, dto);\r\n                this.restApi.callApi(methodCaller, dto).then((response) => {\r\n\r\n                    if (typeof response.isExist !== 'undefined') {\r\n\r\n                        if (!response.isExist) {\r\n                            // value is not exist in DB, show message\r\n                            this.showMessage(this.errorBoxTitle, this.errorMessages[c], true);\r\n                            return false;\r\n\r\n                        } else {\r\n                            // value is exist in DB, check other rules associated with that one\r\n                            if (executeRules.length > 0) {\r\n                                executeRules.map(props => {\r\n\r\n                                    const {propId} = props;\r\n                                    const data = this.hot.getDataAtRowProp(r, propId)\r\n\r\n                                    this.columnEvents(r, propId, data)\r\n                                })\r\n                            }\r\n                        }\r\n                    } else {\r\n                        rules[0].changedValue = response.List.map(i => {return i.value})\r\n                        this.staticRules(r, null, rules);\r\n                    }\r\n                })\r\n\r\n            } else {\r\n                this.staticRules(r, newV, rules)\r\n            }\r\n        }\r\n    }\r\n\r\n    staticRules(r, value, rules) {\r\n        if (rules) {\r\n            rules.map((item) => {\r\n                if (value !== null && item.columnValue === value) {\r\n                    // status changes\r\n                    this.hot.setDataAtRowProp(r, item.changedId, item.changedValue);\r\n                } else {\r\n                    this.hot.setCellMeta(r, this.hot.propToCol(item.changedId), 'source', item.changedValue);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {maximize, language, contentCSS} = this.props;\r\n\r\n        if (language) {\r\n            this.errorBoxTitle = language.validationMessageBoxTitle;\r\n            this.errorMessages = language.validationErrorMessages;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Header/>\r\n                <Row className=\"h-100\">\r\n                    <Sidebar maximize={maximize}/>\r\n                    <Col className={contentCSS}>\r\n                        <Toolbar\r\n                            wrapper={'toolbar mt-2'}\r\n                            isDataExist={this.state.isDataExistsInDB}\r\n                            newRowAdded={this.state.newRowAdded}\r\n                            newClick={this.handleNewRowClick.bind(this)}\r\n                            editClick={this.handleEditClick.bind(this)}\r\n                            cancelClick={this.handleCancelClick.bind(this)}\r\n                            saveClick={this.handleSaveClick.bind(this)}\r\n                            saveHistoryClick={this.handleSaveHistoryClick.bind(this)}\r\n                            historyToggle={this.handleHistoryToggle.bind(this)}\r\n                            handleRegionChange={this.dataLoad.bind(this)}\r\n                        />\r\n\r\n                        <Card className={'mt-1 fixedCard'}>\r\n                            <CardBody>\r\n\r\n                                <HotTable ref={this.hotTableComponent} id={'hot'}\r\n                                  rowHeaders={true}\r\n                                  licenseKey={'non-commercial-and-evaluation'}\r\n                                  nestedHeaders={this.columnHeaders}\r\n                                  columns={this.columns}\r\n                                  stretchH={'all'}\r\n                                  dropdownMenu={true}\r\n                                  filters={true}\r\n                                  manualColumnResize={true}\r\n                                  width={'100%'}\r\n                                  height={'100%'}\r\n                                  fixedColumnsLeft={0}\r\n                                  columnSorting={true}\r\n                                  currentRowClassName={['bg-primary', 'text-white']}\r\n                                  enterBeginsEditing={false}\r\n                                  outsideClickDeselects={false}\r\n                                  enterMoves={this.disableMoves()}\r\n                                  fillHandle={this.disableMoves()}\r\n                                  afterValidate={(isValid, value, row, prop) => {\r\n                                      // this is check dropdown values are proper or not.\r\n                                      this.validatedCell.r = row;\r\n                                      this.validatedCell.c = prop;\r\n                                  }}\r\n                                  afterGetColHeader={(col, TH) => {\r\n                                      this.headerColoring(col, TH)\r\n                                  }}\r\n                                  afterCreateRow={(index, amount, source) => {\r\n                                      console.log(index, amount, source)\r\n                                  }}\r\n                                  afterChange={(changes) => {\r\n                                      // TODO: check esc button when its clicked\r\n                                      if (changes) {\r\n                                          const [r, c, oldV, newV] = changes[0];\r\n                                          if (oldV !== newV)\r\n                                            this.columnEvents(r, c, newV);\r\n                                      }\r\n                                  }}\r\n                                />\r\n\r\n                                {!this.state.isDataExistsInDB &&\r\n                                <div className={'empty-data'}>\r\n                                    <Jumbotron className=\"empty-data-content\">\r\n                                        <h1 className=\"display-5\">Connectivity Matrix Data</h1>\r\n                                        <p className=\"lead\">This page is using for manipulate the imported data to EAI DB.</p>\r\n                                        <hr className=\"my-2\" />\r\n                                        <p>It seems you have to do import for the first initialize. Please use the import button which is exist on toolbar.</p>\r\n                                    </Jumbotron>\r\n                                </div>\r\n                                }\r\n                            </CardBody>\r\n\r\n                            <CardFooter className={'text-center'}>\r\n                                <Pagination\r\n                                    activePage={this.state.activePage}\r\n                                    itemsCountPerPage={this.itemPerPage}\r\n                                    totalItemsCount={this.state.totalCountOfData}\r\n                                    pageRangeDisplayed={10}\r\n                                    onChange={this.handlePageChange.bind(this)}\r\n                                />\r\n                            </CardFooter>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <ModalTemplate/>\r\n                <ModalExport data={this.state.fileJSON}/>\r\n                <Spinner/>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        user: state.user,\r\n        language: state.language,\r\n        maximize: state.maximize,\r\n        contentCSS: state.contentCSS,\r\n        //regions: state.regions,\r\n        region: state.region,\r\n        spinnerToggle: state.spinnerToggle\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setEdit: () => dispatch(editOnToggle()),\r\n        setSpinner: () => dispatch(spinnerToggle()),\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Matrix);"]},"metadata":{},"sourceType":"module"}