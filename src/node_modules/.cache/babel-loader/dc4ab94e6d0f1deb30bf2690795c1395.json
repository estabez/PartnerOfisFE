{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { SET_LANG, SET_AUTH_USER, SET_MAXIMIZE, SET_TOKEN, MODAL_TOGGLE, MODAL_TITLE, MODAL_IMPORT_TOGGLE, SET_TOPOLOGY_FIRST_LEVEL, SET_TOPOLOGY_SECOND_LEVEL, EDIT_ON_TOGGLE, SPINNER_TOGGLE, MODAL_EXPORT_TOGGLE, SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS } from '../actions';\nconst initialState = {\n  serverPath: process.env.REACT_APP_API_GATEWAY,\n  // API gateway path\n  language: null,\n  lang: 'en',\n  // default language\n  maximize: false,\n  contentCSS: 'col-11 content',\n  // default content area css\n  token: null,\n  modalToggle: false,\n  editOn: false,\n  spinnerToggle: false,\n  topologyFirstLevel: null,\n  topologySecondLevel: null,\n  topologySecondLevelDropdownLabels: null,\n  topologySelectedNodeFontSize: 18 // selectedNode font size default is 13\n\n};\n\nconst reducers = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_LANG:\n      {\n        const _action$payload = action.payload,\n              langFile = _action$payload.langFile,\n              lang = _action$payload.lang;\n        return _objectSpread({}, state, {}, {\n          language: langFile,\n          lang: lang\n        });\n      }\n\n    case SET_AUTH_USER:\n      {\n        if (action.user !== null) {\n          localStorage.setItem('user', action.user);\n        } else {\n          localStorage.removeItem('user');\n        }\n\n        return _objectSpread({}, state, {}, {\n          user: action.user\n        });\n      }\n\n    case SET_TOKEN:\n      {\n        if (action.token !== null) {\n          localStorage.setItem('e2eToken', action.token);\n        } else {\n          localStorage.removeItem('e2eToken');\n        }\n\n        return _objectSpread({}, state, {}, {\n          token: action.token\n        });\n      }\n\n    case SET_MAXIMIZE:\n      {\n        const newValue = !state.maximize;\n        const contentCSS = newValue ? 'col-12 maximized' : initialState.contentCSS;\n        return _objectSpread({}, state, {}, {\n          maximize: newValue,\n          contentCSS\n        });\n      }\n\n    case MODAL_TOGGLE:\n      {\n        return _objectSpread({}, state, {}, {\n          modalToggle: !state.modalToggle\n        });\n      }\n\n    case MODAL_TITLE:\n      {\n        return _objectSpread({}, state, {}, {\n          modalTitle: action.title\n        });\n      }\n\n    case MODAL_IMPORT_TOGGLE:\n      {\n        return _objectSpread({}, state, {}, {\n          modalImportToggle: !state.modalImportToggle\n        });\n      }\n\n    case MODAL_EXPORT_TOGGLE:\n      {\n        return _objectSpread({}, state, {}, {\n          modalExportToggle: !state.modalExportToggle\n        });\n      }\n\n    case SPINNER_TOGGLE:\n      {\n        return _objectSpread({}, state, {}, {\n          spinnerToggle: !state.spinnerToggle\n        });\n      }\n\n    case SET_TOPOLOGY_FIRST_LEVEL:\n      {\n        const data = action.payload.data;\n        return _objectSpread({}, state, {}, {\n          topologyFirstLevel: data\n        });\n      }\n\n    case SET_TOPOLOGY_SECOND_LEVEL:\n      {\n        const data = action.payload.data;\n        return _objectSpread({}, state, {}, {\n          topologySecondLevel: data\n        });\n      }\n\n    case SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS:\n      {\n        const data = action.payload.data;\n        return _objectSpread({}, state, {}, {\n          topologySecondLevelDropdownLabels: data\n        });\n      }\n\n    case EDIT_ON_TOGGLE:\n      {\n        return _objectSpread({}, state, {}, {\n          editOn: !state.editOn\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducers;","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/redux/reducer/index.js"],"names":["SET_LANG","SET_AUTH_USER","SET_MAXIMIZE","SET_TOKEN","MODAL_TOGGLE","MODAL_TITLE","MODAL_IMPORT_TOGGLE","SET_TOPOLOGY_FIRST_LEVEL","SET_TOPOLOGY_SECOND_LEVEL","EDIT_ON_TOGGLE","SPINNER_TOGGLE","MODAL_EXPORT_TOGGLE","SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS","initialState","serverPath","process","env","REACT_APP_API_GATEWAY","language","lang","maximize","contentCSS","token","modalToggle","editOn","spinnerToggle","topologyFirstLevel","topologySecondLevel","topologySecondLevelDropdownLabels","topologySelectedNodeFontSize","reducers","state","action","type","payload","langFile","user","localStorage","setItem","removeItem","newValue","modalTitle","title","modalImportToggle","modalExportToggle","data"],"mappings":"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","sourcesContent":["import {\r\n    SET_LANG,\r\n    SET_AUTH_USER,\r\n    SET_MAXIMIZE,\r\n    SET_TOKEN, MODAL_TOGGLE, MODAL_TITLE, MODAL_IMPORT_TOGGLE,\r\n    SET_TOPOLOGY_FIRST_LEVEL, SET_TOPOLOGY_SECOND_LEVEL,\r\n    EDIT_ON_TOGGLE, SPINNER_TOGGLE, MODAL_EXPORT_TOGGLE,\r\n    SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS\r\n}\r\n    from '../actions'\r\n\r\nconst initialState = {\r\n    serverPath: process.env.REACT_APP_API_GATEWAY, // API gateway path\r\n    language: null,\r\n    lang: 'en', // default language\r\n    maximize: false,\r\n    contentCSS: 'col-11 content', // default content area css\r\n    token: null,\r\n    modalToggle: false,\r\n    editOn: false,\r\n    spinnerToggle: false,\r\n    topologyFirstLevel: null,\r\n    topologySecondLevel: null,\r\n    topologySecondLevelDropdownLabels: null,\r\n    topologySelectedNodeFontSize: 18 // selectedNode font size default is 13\r\n};\r\n\r\nconst reducers = (state = initialState, action) =>  {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_LANG: {\r\n            const {langFile, lang} = action.payload;\r\n            return {...state, ...{language: langFile, lang: lang}}\r\n        }\r\n        case SET_AUTH_USER: {\r\n            if (action.user !== null) {\r\n                localStorage.setItem('user', action.user);\r\n            } else {\r\n                localStorage.removeItem('user');\r\n            }\r\n            return {...state, ...{user: action.user}}\r\n        }\r\n        case SET_TOKEN: {\r\n            if (action.token !== null) {\r\n                localStorage.setItem('e2eToken', action.token);\r\n            } else {\r\n                localStorage.removeItem('e2eToken');\r\n            }\r\n            return {...state, ...{token: action.token}}\r\n        }\r\n        case SET_MAXIMIZE: {\r\n            const newValue = !state.maximize;\r\n            const contentCSS = newValue ? 'col-12 maximized' : initialState.contentCSS;\r\n            return {...state, ...{maximize: newValue, contentCSS}}\r\n        }\r\n        case MODAL_TOGGLE: {\r\n            return {...state, ...{modalToggle: !state.modalToggle}}\r\n        }\r\n        case MODAL_TITLE: {\r\n            return {...state, ...{modalTitle: action.title}}\r\n        }\r\n        case MODAL_IMPORT_TOGGLE: {\r\n            return {...state, ...{modalImportToggle: !state.modalImportToggle}}\r\n        }\r\n        case MODAL_EXPORT_TOGGLE: {\r\n            return {...state, ...{modalExportToggle: !state.modalExportToggle}}\r\n        }\r\n        case SPINNER_TOGGLE: {\r\n            return {...state, ...{spinnerToggle: !state.spinnerToggle}}\r\n        }\r\n        case SET_TOPOLOGY_FIRST_LEVEL: {\r\n            const {data} = action.payload;\r\n            return {...state, ...{topologyFirstLevel: data}}\r\n        }\r\n        case SET_TOPOLOGY_SECOND_LEVEL: {\r\n            const {data} = action.payload;\r\n            return {...state, ...{topologySecondLevel: data}}\r\n        }\r\n        case SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS: {\r\n            const {data} = action.payload;\r\n            return {...state, ...{topologySecondLevelDropdownLabels: data}}\r\n        }\r\n        case EDIT_ON_TOGGLE: {\r\n            return {...state, ...{editOn: !state.editOn}}\r\n        }\r\n        default: return state;\r\n    }\r\n} \r\n\r\nexport default reducers"]},"metadata":{},"sourceType":"module"}