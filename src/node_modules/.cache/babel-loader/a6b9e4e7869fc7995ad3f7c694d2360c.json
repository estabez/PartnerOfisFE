{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\components\\\\SelectRegion.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Input } from 'reactstrap';\nimport { setSelectedRegion } from \"../redux/actions\";\n\nclass SelectRegion extends React.Component {\n  async handleSelectedRegion(ev) {\n    let val = ev.target.value;\n    val = +val === 0 ? this.props.regions[0] : val;\n    await this.props.setSelectedRegion(val);\n    this.props.handleRegionChange(true); // this should return true to parent for reset activePage value;\n  }\n\n  render() {\n    const {\n      language,\n      regions,\n      editOn\n    } = this.props;\n\n    if (language && regions) {\n      return /*#__PURE__*/React.createElement(Input, {\n        type: 'select',\n        className: 'custom-select',\n        disabled: editOn,\n        onChange: this.handleSelectedRegion.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }\n      }, language.loadByRegion), regions.map(value => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          key: value,\n          value: value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 33\n          }\n        }, value);\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    language: state.language,\n    token: state.token,\n    regions: state.regions,\n    editOn: state.editOn\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setSelectedRegion: region => {\n      dispatch(setSelectedRegion(region));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectRegion);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/SelectRegion.jsx"],"names":["React","connect","Input","setSelectedRegion","SelectRegion","Component","handleSelectedRegion","ev","val","target","value","props","regions","handleRegionChange","render","language","editOn","bind","loadByRegion","map","mapStateToProps","state","token","mapDispatchToProps","dispatch","region"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,KAAR,QAAoB,YAApB;AACA,SAAQC,iBAAR,QAAgC,kBAAhC;;AAEA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA2C;AAEvC,QAAMC,oBAAN,CAA2BC,EAA3B,EAA+B;AAC3B,QAAIC,GAAG,GAAGD,EAAE,CAACE,MAAH,CAAUC,KAApB;AAEAF,IAAAA,GAAG,GAAG,CAACA,GAAD,KAAS,CAAT,GAAa,KAAKG,KAAL,CAAWC,OAAX,CAAmB,CAAnB,CAAb,GAAqCJ,GAA3C;AAEA,UAAM,KAAKG,KAAL,CAAWR,iBAAX,CAA6BK,GAA7B,CAAN;AACA,SAAKG,KAAL,CAAWE,kBAAX,CAA8B,IAA9B,EAN2B,CAMS;AACvC;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAACC,MAAAA,QAAD;AAAWH,MAAAA,OAAX;AAAoBI,MAAAA;AAApB,QAA8B,KAAKL,KAAzC;;AAEA,QAAII,QAAQ,IAAIH,OAAhB,EAAyB;AACrB,0BACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,QAAb;AAAuB,QAAA,SAAS,EAAE,eAAlC;AACO,QAAA,QAAQ,EAAEI,MADjB;AAEI,QAAA,QAAQ,EAAE,KAAKV,oBAAL,CAA0BW,IAA1B,CAA+B,IAA/B,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAII;AAAQ,QAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmBF,QAAQ,CAACG,YAA5B,CAJJ,EAKKN,OAAO,CAACO,GAAR,CAAaT,KAAD,IAAW;AACpB,4BAAQ;AAAQ,UAAA,GAAG,EAAEA,KAAb;AAAoB,UAAA,KAAK,EAAEA,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAmCA,KAAnC,CAAR;AACH,OAFA,CALL,CADJ;AAYH,KAbD,MAaO;AACH,0BACI,yCADJ;AAGH;AACJ;;AAhCsC;;AAmC3C,SAASU,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,SAAO;AACHN,IAAAA,QAAQ,EAAEM,KAAK,CAACN,QADb;AAEHO,IAAAA,KAAK,EAAED,KAAK,CAACC,KAFV;AAGHV,IAAAA,OAAO,EAAES,KAAK,CAACT,OAHZ;AAIHI,IAAAA,MAAM,EAAEK,KAAK,CAACL;AAJX,GAAP;AAMH;;AACD,SAASO,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACHrB,IAAAA,iBAAiB,EAAGsB,MAAD,IAAY;AAACD,MAAAA,QAAQ,CAACrB,iBAAiB,CAACsB,MAAD,CAAlB,CAAR;AAAoC;AADjE,GAAP;AAGH;;AAED,eAAexB,OAAO,CAACmB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CnB,YAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Input} from 'reactstrap';\r\nimport {setSelectedRegion} from \"../redux/actions\";\r\n\r\nclass SelectRegion extends React.Component {\r\n\r\n    async handleSelectedRegion(ev) {\r\n        let val = ev.target.value;\r\n\r\n        val = +val === 0 ? this.props.regions[0] : val;\r\n\r\n        await this.props.setSelectedRegion(val);\r\n        this.props.handleRegionChange(true) // this should return true to parent for reset activePage value;\r\n    }\r\n\r\n    render() {\r\n        const {language, regions, editOn} = this.props;\r\n\r\n        if (language && regions) {\r\n            return (\r\n                <Input type={'select'} className={'custom-select'}\r\n                       disabled={editOn}\r\n                    onChange={this.handleSelectedRegion.bind(this)}\r\n                >\r\n                    <option value=\"0\">{language.loadByRegion}</option>\r\n                    {regions.map((value) => {\r\n                        return (<option key={value} value={value}>{value}</option>)\r\n                    })\r\n                    }\r\n                </Input>\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        language: state.language,\r\n        token: state.token,\r\n        regions: state.regions,\r\n        editOn: state.editOn\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setSelectedRegion: (region) => {dispatch(setSelectedRegion(region))}\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectRegion);"]},"metadata":{},"sourceType":"module"}