{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\components\\\\ModalImport.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { modalImportToggle, spinnerToggle } from \"../redux/actions\";\nimport FileUploadProgress from 'react-fileupload-progress';\nimport XLSX from \"xlsx\";\nimport { make_cols } from \"./MakeColumns\";\nimport { SheetJSFT } from './types';\nimport { groupingMap } from '../matrixDataMap';\nconst styles = {\n  progressWrapper: {\n    height: '25px',\n    marginTop: '10px',\n    marginBottom: '10px',\n    width: '100%',\n    float: 'left',\n    overflow: 'hidden',\n    backgroundColor: '#f5f5f5',\n    borderRadius: '4px',\n    WebkitBoxShadow: 'inset 0 1px 2px rgba(0,0,0,.1)',\n    boxShadow: 'inset 0 1px 2px rgba(0,0,0,.1)'\n  },\n  progressBar: {\n    float: 'left',\n    width: '0',\n    height: '100%',\n    fontSize: '12px',\n    lineHeight: '20px',\n    color: '#fff',\n    textAlign: 'center',\n    backgroundColor: '#5cb85c',\n    WebkitBoxShadow: 'inset 0 -1px 0 rgba(0,0,0,.15)',\n    boxShadow: 'inset 0 -1px 0 rgba(0,0,0,.15)',\n    WebkitTransition: 'width .6s ease',\n    Otransition: 'width .6s ease',\n    transition: 'width .6s ease'\n  },\n  cancelButton: {\n    marginTop: '5px',\n    WebkitAppearance: 'none',\n    padding: 0,\n    cursor: 'pointer',\n    background: '0 0',\n    border: 0,\n    float: 'left',\n    fontSize: '21px',\n    fontWeight: 700,\n    lineHeight: 1,\n    color: '#000',\n    textShadow: '0 1px 0 #fff',\n    filter: 'alpha(opacity=20)',\n    opacity: '.2'\n  },\n  bslabel: {\n    display: 'inline-block',\n    maxWidth: '100%',\n    marginBottom: '5px',\n    fontWeight: 700\n  },\n  bsHelp: {\n    display: 'block',\n    marginTop: '5px',\n    marginBottom: '10px',\n    color: '#737373'\n  },\n  bsButton: {\n    padding: '1px 5px',\n    fontSize: '12px',\n    lineHeight: '1.5',\n    borderRadius: '3px',\n    color: '#fff',\n    backgroundColor: '#337ab7',\n    borderColor: '#2e6da4',\n    display: 'inline-block',\n    marginBottom: 0,\n    fontWeight: 400,\n    textAlign: 'center',\n    whiteSpace: 'nowrap',\n    verticalAlign: 'middle',\n    touchAction: 'manipulation',\n    cursor: 'pointer',\n    WebkitUserSelect: 'none',\n    MozUserSelect: 'none',\n    msUserSelect: 'none',\n    userSelect: 'none',\n    backgroundImage: 'none',\n    border: '1px solid transparent'\n  }\n};\n\nclass ModalImportTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.triggerInputFile = () => this.fileInput.click();\n\n    this.state = {\n      file: {},\n      data: [],\n      cols: [],\n      fileJSON: {},\n      loading: true,\n      isUploadDisabled: true,\n      isValidateDisabled: true,\n      uploadHasError: true,\n      uploadProgress: 0,\n      showProgress: false\n    };\n    this.showProgress = false;\n    this.handleFile = this.handleFile.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.chosenFile.innerText = e.target.files[0].name;\n    const files = e.target.files;\n    this.setState({\n      isUploadDisabled: false\n    });\n    if (files && files[0]) this.setState({\n      file: files[0]\n    });\n  }\n\n  handleFile() {\n    /* Boilerplate to set up FileReader */\n    this.setState({\n      showProgress: true\n    });\n    this.props.setSpinner();\n\n    try {\n      const reader = new FileReader();\n      const rABS = !!reader.readAsBinaryString;\n\n      reader.onload = e => {\n        /* Parse data */\n        const bstr = e.target.result;\n        const wb = XLSX.read(bstr, {\n          type: rABS ? 'binary' : 'array',\n          bookVBA: true,\n          sheetRows: 0\n        });\n        /* Get first worksheet */\n\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n\n        const data = XLSX.utils.sheet_to_json(ws, {\n          header: 1,\n          defval: \"\"\n        });\n        /* Update state */\n\n        this.setState({\n          data: data,\n          cols: make_cols(ws['!ref'])\n        }, () => {\n          this.state.fileJSON = JSON.stringify(this.state.data, null, 2);\n          console.log(this.state.fileJSON);\n          let newJSON = JSON.parse(JSON.stringify(this.state.fileJSON));\n          newJSON.forEach(function (item, index, array) {\n            console.log(item, index);\n          });\n          /*this.state.fileJSON.map((node) => {\r\n              if (node.label === selectedNodeId) {\r\n                  node.font = {color: 'red', size: this.props.fontSize}\r\n              }\r\n          });\r\n          */\n        });\n        this.setState({\n          isValidateDisabled: false,\n          uploadHasError: false,\n          uploadProgress: 100\n        });\n        this.props.setSpinner();\n      };\n\n      if (rABS) {\n        reader.readAsBinaryString(this.state.file);\n      } else {\n        reader.readAsArrayBuffer(this.state.file);\n      }\n\n      ;\n    } catch (e) {\n      this.setState({\n        isValidateDisabled: true,\n        uploadHasError: true,\n        uploadProgress: 100\n      });\n      this.props.setSpinner();\n    }\n  }\n\n  toggle() {\n    this.props.setModalImport();\n  }\n\n  //json to txt\n  customFormRenderer(onSubmit) {\n    const language = this.props.language;\n    return React.createElement(\"form\", {\n      id: \"customForm\",\n      style: {\n        marginBottom: '15px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'row',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'col-2',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: 'btn btn-primary btn-block',\n      onClick: this.triggerInputFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, language.import), React.createElement(\"input\", {\n      ref: fileInput => this.fileInput = fileInput,\n      style: {\n        display: 'block'\n      },\n      type: \"file\",\n      id: \"file\",\n      accept: SheetJSFT,\n      onChange: this.handleChange,\n      hidden: true,\n      name: \"file\",\n      id: \"exampleInputFile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: 'col-10',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      ref: chosenFile => this.chosenFile = chosenFile,\n      style: styles.bsHelp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, language.noFileChosen))), React.createElement(\"div\", {\n      className: 'row',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'col-2 mt-4',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: 'btn btn-secondary btn-block',\n      onClick: this.handleFile,\n      disabled: this.state.isUploadDisabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, language.upload)), React.createElement(\"div\", {\n      className: 'col-10',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: uploadProgressBar => this.uploadProgressBar = uploadProgressBar,\n      className: 'mt-3',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, this.state.showProgress && this.customProgressRenderer(this.state.uploadProgress, this.state.uploadHasError)))), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: 'row',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'col-4',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \" \"), React.createElement(\"div\", {\n      className: 'col-4 mt-4',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      ref: sendBackend => this.sendBackend = sendBackend,\n      hidden: this.state.isValidateDisabled,\n      className: 'btn btn-success btn-block',\n      onClick: onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, language.validate)), React.createElement(\"div\", {\n      className: 'col-4',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, this.c))));\n  }\n\n  formGetter() {\n    return this.state.fileJSON;\n  }\n\n  customProgressRenderer(progress, hasError, cancelHandler) {\n    if (hasError || progress > -1) {\n      let barStyle = Object.assign({}, styles.progressBar);\n      barStyle.width = progress + '%';\n      let message = React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, barStyle.width);\n\n      if (hasError) {\n        barStyle.backgroundColor = '#d9534f';\n        message = React.createElement(\"span\", {\n          style: {\n            'color': '#a94442'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259\n          },\n          __self: this\n        }, \"Failed to upload ...\");\n      }\n\n      if (!hasError && progress === 100) {\n        message = React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262\n          },\n          __self: this\n        }, \"Done\");\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: styles.progressWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: barStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: 'alert alert-info mt-2',\n        style: {\n          'clear': 'left'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, message));\n    } else {\n      return;\n    }\n  }\n\n  render() {\n    const language = this.props.language;\n\n    if (language) {\n      return React.createElement(Modal, {\n        isOpen: this.props.open,\n        size: 'lg',\n        centered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggle.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, language.importDataMatrixFile), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, React.createElement(FileUploadProgress, {\n        key: \"ex2\",\n        url: \"http://localhost:3000/api/upload\",\n        method: \"post\",\n        onProgress: (e, request, progress) => {\n          console.log('progress', e, request, progress);\n          this.props.setSpinner();\n        },\n        onLoad: (e, request) => {\n          console.log('load', e, request);\n          this.props.setSpinner();\n        },\n        onError: (e, request) => {\n          console.log('error', e, request);\n          this.props.setSpinner();\n        },\n        onAbort: (e, request) => {\n          console.log('abort', e, request);\n          this.props.setSpinner();\n        },\n        formGetter: this.formGetter.bind(this),\n        formRenderer: this.customFormRenderer.bind(this),\n        progressRenderer: this.customProgressRenderer.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    open: state.modalImportToggle,\n    import: state.import,\n    language: state.language\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setModalImport: () => dispatch(modalImportToggle()),\n    setSpinner: () => dispatch(spinnerToggle())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalImportTemplate);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/ModalImport.jsx"],"names":["React","connect","Modal","ModalHeader","ModalBody","modalImportToggle","spinnerToggle","FileUploadProgress","XLSX","make_cols","SheetJSFT","groupingMap","styles","progressWrapper","height","marginTop","marginBottom","width","float","overflow","backgroundColor","borderRadius","WebkitBoxShadow","boxShadow","progressBar","fontSize","lineHeight","color","textAlign","WebkitTransition","Otransition","transition","cancelButton","WebkitAppearance","padding","cursor","background","border","fontWeight","textShadow","filter","opacity","bslabel","display","maxWidth","bsHelp","bsButton","borderColor","whiteSpace","verticalAlign","touchAction","WebkitUserSelect","MozUserSelect","msUserSelect","userSelect","backgroundImage","ModalImportTemplate","Component","constructor","props","triggerInputFile","fileInput","click","state","file","data","cols","fileJSON","loading","isUploadDisabled","isValidateDisabled","uploadHasError","uploadProgress","showProgress","handleFile","bind","handleChange","e","chosenFile","innerText","target","files","name","setState","setSpinner","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","sheetRows","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","defval","JSON","stringify","console","log","newJSON","parse","forEach","item","index","array","readAsArrayBuffer","toggle","setModalImport","customFormRenderer","onSubmit","language","import","noFileChosen","upload","uploadProgressBar","customProgressRenderer","sendBackend","validate","c","formGetter","progress","hasError","cancelHandler","barStyle","Object","assign","message","render","open","importDataMatrixFile","request","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Modal, ModalHeader, ModalBody} from 'reactstrap';\r\nimport {modalImportToggle, spinnerToggle} from \"../redux/actions\";\r\nimport FileUploadProgress from 'react-fileupload-progress';\r\nimport XLSX from \"xlsx\";\r\nimport {make_cols} from \"./MakeColumns\";\r\nimport {SheetJSFT} from './types';\r\nimport {groupingMap} from '../matrixDataMap';\r\n\r\nconst styles = {\r\n    progressWrapper: {\r\n        height: '25px',\r\n        marginTop: '10px',\r\n        marginBottom: '10px',\r\n        width: '100%',\r\n        float: 'left',\r\n        overflow: 'hidden',\r\n        backgroundColor: '#f5f5f5',\r\n        borderRadius: '4px',\r\n        WebkitBoxShadow: 'inset 0 1px 2px rgba(0,0,0,.1)',\r\n        boxShadow: 'inset 0 1px 2px rgba(0,0,0,.1)'\r\n    },\r\n    progressBar: {\r\n        float: 'left',\r\n        width: '0',\r\n        height: '100%',\r\n        fontSize: '12px',\r\n        lineHeight: '20px',\r\n        color: '#fff',\r\n        textAlign: 'center',\r\n        backgroundColor: '#5cb85c',\r\n        WebkitBoxShadow: 'inset 0 -1px 0 rgba(0,0,0,.15)',\r\n        boxShadow: 'inset 0 -1px 0 rgba(0,0,0,.15)',\r\n        WebkitTransition: 'width .6s ease',\r\n        Otransition: 'width .6s ease',\r\n        transition: 'width .6s ease'\r\n    },\r\n    cancelButton: {\r\n        marginTop: '5px',\r\n        WebkitAppearance: 'none',\r\n        padding: 0,\r\n        cursor: 'pointer',\r\n        background: '0 0',\r\n        border: 0,\r\n        float: 'left',\r\n        fontSize: '21px',\r\n        fontWeight: 700,\r\n        lineHeight: 1,\r\n        color: '#000',\r\n        textShadow: '0 1px 0 #fff',\r\n        filter: 'alpha(opacity=20)',\r\n        opacity: '.2'\r\n    },\r\n\r\n    bslabel: {\r\n        display: 'inline-block',\r\n        maxWidth: '100%',\r\n        marginBottom: '5px',\r\n        fontWeight: 700\r\n    },\r\n\r\n    bsHelp: {\r\n        display: 'block',\r\n        marginTop: '5px',\r\n        marginBottom: '10px',\r\n        color: '#737373'\r\n    },\r\n\r\n    bsButton: {\r\n        padding: '1px 5px',\r\n        fontSize: '12px',\r\n        lineHeight: '1.5',\r\n        borderRadius: '3px',\r\n        color: '#fff',\r\n        backgroundColor: '#337ab7',\r\n        borderColor: '#2e6da4',\r\n        display: 'inline-block',\r\n        marginBottom: 0,\r\n        fontWeight: 400,\r\n        textAlign: 'center',\r\n        whiteSpace: 'nowrap',\r\n        verticalAlign: 'middle',\r\n        touchAction: 'manipulation',\r\n        cursor: 'pointer',\r\n        WebkitUserSelect: 'none',\r\n        MozUserSelect: 'none',\r\n        msUserSelect: 'none',\r\n        userSelect: 'none',\r\n        backgroundImage: 'none',\r\n        border: '1px solid transparent'\r\n    }\r\n};\r\n\r\n\r\nclass ModalImportTemplate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file: {},\r\n            data: [],\r\n            cols: [],\r\n            fileJSON: {},\r\n            loading: true,\r\n            isUploadDisabled: true,\r\n            isValidateDisabled: true,\r\n            uploadHasError: true,\r\n            uploadProgress: 0,\r\n            showProgress: false\r\n        }\r\n        this.showProgress = false;\r\n\r\n        this.handleFile = this.handleFile.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n\r\n    handleChange(e) {\r\n        this.chosenFile.innerText = e.target.files[0].name;\r\n        const files = e.target.files;\r\n        this.setState({\r\n            isUploadDisabled: false\r\n        })\r\n        if (files && files[0]) this.setState({file: files[0]});\r\n    };\r\n\r\n    handleFile() {\r\n        /* Boilerplate to set up FileReader */\r\n        this.setState({\r\n            showProgress: true\r\n        })\r\n        this.props.setSpinner();\r\n        try {\r\n\r\n            const reader = new FileReader();\r\n            const rABS = !!reader.readAsBinaryString;\r\n            reader.onload = (e) => {\r\n                /* Parse data */\r\n                const bstr = e.target.result;\r\n                const wb = XLSX.read(bstr, {type: rABS ? 'binary' : 'array', bookVBA: true, sheetRows: 0});\r\n                /* Get first worksheet */\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n\r\n                /* Convert array of arrays */\r\n                const data = XLSX.utils.sheet_to_json(ws, {\r\n                    header: 1,\r\n                    defval: \"\"\r\n                });\r\n\r\n                /* Update state */\r\n                this.setState({data: data, cols: make_cols(ws['!ref'])}, () => {\r\n                    this.state.fileJSON = JSON.stringify(this.state.data, null, 2);\r\n                    console.log(this.state.fileJSON);\r\n                    let newJSON = JSON.parse(JSON.stringify(this.state.fileJSON));\r\n                    newJSON.forEach(function(item, index, array) {\r\n                        console.log(item, index)\r\n                    })\r\n\r\n                    /*this.state.fileJSON.map((node) => {\r\n                        if (node.label === selectedNodeId) {\r\n                            node.font = {color: 'red', size: this.props.fontSize}\r\n                        }\r\n                    });\r\n*/\r\n                });\r\n                this.setState({\r\n                    isValidateDisabled: false,\r\n                    uploadHasError: false,\r\n                    uploadProgress: 100\r\n                });\r\n                this.props.setSpinner();\r\n            };\r\n\r\n            if (rABS) {\r\n                reader.readAsBinaryString(this.state.file);\r\n            } else {\r\n                reader.readAsArrayBuffer(this.state.file);\r\n            }\r\n            ;\r\n\r\n        } catch (e) {\r\n            this.setState({\r\n                isValidateDisabled: true,\r\n                uploadHasError: true,\r\n                uploadProgress: 100\r\n            });\r\n            this.props.setSpinner();\r\n        }\r\n\r\n    }\r\n\r\n    toggle() {\r\n        this.props.setModalImport();\r\n    }\r\n\r\n    triggerInputFile = () => this.fileInput.click();\r\n//json to txt\r\n\r\n    customFormRenderer(onSubmit) {\r\n        const {language} = this.props;\r\n        return (\r\n            <form id='customForm' style={{marginBottom: '15px'}}>\r\n                <div className={'row'}>\r\n                    <div className={'col-2'}>\r\n                        <button type=\"button\" className={'btn btn-primary btn-block'}\r\n                                onClick={this.triggerInputFile}>{language.import}</button>\r\n                        <input ref={fileInput => this.fileInput = fileInput} style={{display: 'block'}} type=\"file\" id=\"file\"\r\n                               accept={SheetJSFT} onChange={this.handleChange} hidden={true} name='file' id=\"exampleInputFile\"/>\r\n                    </div>\r\n                    <div className={'col-10'}>\r\n                        <p ref={chosenFile => this.chosenFile = chosenFile} style={styles.bsHelp}>{language.noFileChosen}</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={'row'}>\r\n                    <div className={'col-2 mt-4'}>\r\n                        <button type=\"button\" className={'btn btn-secondary btn-block'} onClick={this.handleFile}\r\n                                disabled={this.state.isUploadDisabled}>{language.upload}</button>\r\n                    </div>\r\n                    <div className={'col-10'}>\r\n                        <div ref={uploadProgressBar => this.uploadProgressBar = uploadProgressBar} className={'mt-3'}>\r\n                            {this.state.showProgress &&\r\n                            this.customProgressRenderer(this.state.uploadProgress, this.state.uploadHasError)\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n                <div className={'row'}>\r\n                    <div className={'col-4'}> </div>\r\n                    <div className={'col-4 mt-4'}>\r\n                        <button type=\"button\" ref={sendBackend => this.sendBackend = sendBackend}\r\n                                hidden={this.state.isValidateDisabled} className={'btn btn-success btn-block'}\r\n                                onClick={onSubmit}>{language.validate}</button>\r\n                    </div>\r\n                    <div className={'col-4'}>\r\n                        <div>\r\n                            {this.c}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    formGetter() {\r\n        return this.state.fileJSON;\r\n    }\r\n\r\n    customProgressRenderer(progress, hasError, cancelHandler) {\r\n        if (hasError || progress > -1) {\r\n            let barStyle = Object.assign({}, styles.progressBar);\r\n            barStyle.width = progress + '%';\r\n\r\n            let message = (<span>{barStyle.width}</span>);\r\n            if (hasError) {\r\n                barStyle.backgroundColor = '#d9534f';\r\n                message = (<span style={{'color': '#a94442'}}>Failed to upload ...</span>);\r\n            }\r\n            if (!hasError && progress === 100) {\r\n                message = (<span>Done</span>);\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div style={styles.progressWrapper}>\r\n                        <div style={barStyle}></div>\r\n                    </div>\r\n                    <div className={'alert alert-info mt-2'} style={{'clear': 'left'}}>\r\n                        {message}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const {language} = this.props;\r\n        if (language) {\r\n            return (\r\n                <Modal isOpen={this.props.open} size={'lg'} centered={true}>\r\n                    <ModalHeader toggle={this.toggle.bind(this)}>{language.importDataMatrixFile}</ModalHeader>\r\n                    <ModalBody>\r\n                        <FileUploadProgress key='ex2' url='http://localhost:3000/api/upload' method='post'\r\n                                            onProgress={(e, request, progress) => {\r\n                                                console.log('progress', e, request, progress);\r\n                                                this.props.setSpinner();\r\n                                            }}\r\n                                            onLoad={(e, request) => {\r\n                                                console.log('load', e, request);\r\n                                                this.props.setSpinner();\r\n                                            }}\r\n                                            onError={(e, request) => {\r\n                                                console.log('error', e, request);\r\n                                                this.props.setSpinner();\r\n                                            }}\r\n                                            onAbort={(e, request) => {\r\n                                                console.log('abort', e, request);\r\n                                                this.props.setSpinner();\r\n                                            }}\r\n                                            formGetter={this.formGetter.bind(this)}\r\n                                            formRenderer={this.customFormRenderer.bind(this)}\r\n                                            progressRenderer={this.customProgressRenderer.bind(this)}\r\n\r\n                        />\r\n                    </ModalBody>\r\n\r\n                </Modal>\r\n            )\r\n        } else {\r\n            return (<></>)\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        open: state.modalImportToggle,\r\n        import: state.import,\r\n        language: state.language\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModalImport: () => dispatch(modalImportToggle()),\r\n        setSpinner: () => dispatch(spinnerToggle()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalImportTemplate);"]},"metadata":{},"sourceType":"module"}