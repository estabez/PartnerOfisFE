{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\components\\\\SelectRegion.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Input } from 'reactstrap';\nimport { setSelectedRegion } from \"../redux/actions\";\n\nclass SelectRegion extends React.Component {\n  async handleSelectedRegion(ev) {\n    const val = ev.target.value;\n    await this.props.setSelectedRegion(val);\n    this.props.handleRegionChange(val);\n  }\n\n  render() {\n    const _this$props = this.props,\n          language = _this$props.language,\n          regions = _this$props.regions;\n\n    if (language && regions) {\n      return React.createElement(Input, {\n        type: 'select',\n        className: 'custom-select',\n        onChange: this.handleSelectedRegion.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, language.loadByRegion), regions.map(value => {\n        return React.createElement(\"option\", {\n          key: value,\n          value: value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, value);\n      }));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    language: state.language,\n    token: state.token,\n    region: state.regions\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setSelectedRegion: region => {\n      dispatch(setSelectedRegion(region));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectRegion);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/SelectRegion.jsx"],"names":["React","connect","Input","setSelectedRegion","SelectRegion","Component","handleSelectedRegion","ev","val","target","value","props","handleRegionChange","render","language","regions","bind","loadByRegion","map","mapStateToProps","state","token","region","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,KAAR,QAAoB,YAApB;AACA,SAAQC,iBAAR,QAAgC,kBAAhC;;AAEA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA2C;AAEvC,QAAMC,oBAAN,CAA2BC,EAA3B,EAA+B;AAC3B,UAAMC,GAAG,GAAGD,EAAE,CAACE,MAAH,CAAUC,KAAtB;AACA,UAAM,KAAKC,KAAL,CAAWR,iBAAX,CAA6BK,GAA7B,CAAN;AACA,SAAKG,KAAL,CAAWC,kBAAX,CAA8BJ,GAA9B;AACH;;AAEDK,EAAAA,MAAM,GAAG;AAAA,wBACuB,KAAKF,KAD5B;AAAA,UACEG,QADF,eACEA,QADF;AAAA,UACYC,OADZ,eACYA,OADZ;;AAGL,QAAID,QAAQ,IAAIC,OAAhB,EAAyB;AACrB,aACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,QAAb;AAAuB,QAAA,SAAS,EAAE,eAAlC;AACI,QAAA,QAAQ,EAAE,KAAKT,oBAAL,CAA0BU,IAA1B,CAA+B,IAA/B,CADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGI;AAAQ,QAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmBF,QAAQ,CAACG,YAA5B,CAHJ,EAIKF,OAAO,CAACG,GAAR,CAAaR,KAAD,IAAW;AACpB,eAAQ;AAAQ,UAAA,GAAG,EAAEA,KAAb;AAAoB,UAAA,KAAK,EAAEA,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAmCA,KAAnC,CAAR;AACH,OAFA,CAJL,CADJ;AAWH,KAZD,MAYO;AACH,aACI,yCADJ;AAGH;AACJ;;AA5BsC;;AA+B3C,SAASS,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,SAAO;AACHN,IAAAA,QAAQ,EAAEM,KAAK,CAACN,QADb;AAEHO,IAAAA,KAAK,EAAED,KAAK,CAACC,KAFV;AAGHC,IAAAA,MAAM,EAAEF,KAAK,CAACL;AAHX,GAAP;AAKH;;AACD,SAASQ,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACHrB,IAAAA,iBAAiB,EAAGmB,MAAD,IAAY;AAACE,MAAAA,QAAQ,CAACrB,iBAAiB,CAACmB,MAAD,CAAlB,CAAR;AAAoC;AADjE,GAAP;AAGH;;AAED,eAAerB,OAAO,CAACkB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CnB,YAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Input} from 'reactstrap';\r\nimport {setSelectedRegion} from \"../redux/actions\";\r\n\r\nclass SelectRegion extends React.Component {\r\n\r\n    async handleSelectedRegion(ev) {\r\n        const val = ev.target.value;\r\n        await this.props.setSelectedRegion(val);\r\n        this.props.handleRegionChange(val)\r\n    }\r\n\r\n    render() {\r\n        const {language, regions} = this.props;\r\n\r\n        if (language && regions) {\r\n            return (\r\n                <Input type={'select'} className={'custom-select'}\r\n                    onChange={this.handleSelectedRegion.bind(this)}\r\n                >\r\n                    <option value=\"0\">{language.loadByRegion}</option>\r\n                    {regions.map((value) => {\r\n                        return (<option key={value} value={value}>{value}</option>)\r\n                    })\r\n                    }\r\n                </Input>\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        language: state.language,\r\n        token: state.token,\r\n        region: state.regions\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setSelectedRegion: (region) => {dispatch(setSelectedRegion(region))}\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectRegion);"]},"metadata":{},"sourceType":"module"}