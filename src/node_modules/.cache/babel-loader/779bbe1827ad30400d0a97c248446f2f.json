{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\views\\\\Matrix.jsx\";\nimport React, { createRef } from 'react';\nimport { connect } from \"react-redux\";\nimport axios from 'axios';\nimport { HotTable } from '@handsontable/react';\nimport Handsontable from 'handsontable';\nimport { groupingMap } from '../matrixDataMap';\nimport { columnLogic } from '../matrixColumnLogicMap';\nimport Header from '../components/Header';\nimport Sidebar from '../components/Sidebar';\nimport Toolbar from '../components/ToolbarMatrix';\nimport ModalTemplate from '../components/ModalImport';\nimport Spinner from '../components/Spinner';\nimport data from '../sampleData/data';\nimport { editOnToggle } from \"../redux/actions\";\nimport { confirmAlert } from 'react-confirm-alert'; // Import\n\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport ModalExportTemplate from \"../components/ModalExport\"; // Import css\n\nclass Matrix extends React.Component {\n  constructor(props) {\n    super(props);\n    this.serviceName = process.env.REACT_APP_MATRIX_SERVICE; //this.handsontableData = Handsontable.helper.createSpreadsheetData(25, 10);\n\n    this.hotTableComponent = createRef();\n    this.hot = null;\n    this.handsontableData = data.SAFI;\n    this.handsontableDataBackup = null;\n    this.errorMessages = null;\n    this.errorBoxTitle = null;\n    this.columnHeaders = [];\n    this.titles = [];\n    this.columns = [];\n    this.handleColumnHeaders();\n    this.editable = ['oldAggregSite', 'newAggregSite', 'preAggregSite', 'mwPreAggregEquip', 'mwPreAggregPort', 'aggregEquipIp', 'status', 'dueDate', 'radioSite', 'aggregIpPort', 'raccordmentOsnA', 'raccordmentOsnZ', 'mwEquip', 'mwVendor', 'mwPort', 'iubIp', 'iubVlan']; // test\n\n    this.selectedRowCoords = {\n      r: null,\n      c: null\n    };\n    this.editedRowCoords = {\n      r: null,\n      c: null\n    };\n    this.validatedCell = {\n      r: null,\n      c: null\n    };\n    this.rowValidation = true;\n    this.showHistory = false;\n    this.filter = null;\n    this.radioSite = {\n      isExists: false,\n      value: ''\n    };\n    this.preAggregSite = {\n      isExists: false,\n      value: \"\"\n    };\n    this.state = {\n      newRowAdded: false,\n      showHistory: false\n    };\n    Handsontable.hooks.add('afterSelectionEnd', (r, c) => {\n      this.selectedRowCoords.r = r;\n      this.selectedRowCoords.c = c;\n    });\n  }\n\n  componentDidMount() {\n    this.hot = this.hotTableComponent.current.hotInstance;\n    this.hot.loadData(this.handsontableData);\n    this.filter = this.hot.getPlugin('filters');\n    const colIndex = this.findIndexOfColumn(0, 'archived');\n    this.filter.addCondition(colIndex, 'contains', 'No');\n    this.filter.filter();\n  }\n\n  setStateAsync(state) {\n    return new Promise(resolve => {\n      this.setState(state, resolve);\n    });\n  }\n\n  handleEditClick() {\n    const _this$selectedRowCoor = this.selectedRowCoords,\n          r = _this$selectedRowCoor.r,\n          c = _this$selectedRowCoor.c;\n    if (r === null && c === null) return; //console.log(this.hot.getCellMeta(r, 4));\n    //console.log(this.hot.getRangedData([r, 0, r, this.hot.countCols()]));\n    // create backup data before editing;\n\n    this.handsontableDataBackup = JSON.parse(JSON.stringify(this.handsontableData)); // Change edit mode on redux\n\n    this.props.setEdit();\n    this.setCellProperties(r, c);\n    this.editedRowCoords.r = r;\n    this.editedRowCoords.c = c;\n  }\n\n  async handleCancelClick() {\n    await this.setStateAsync({\n      newRowAdded: false\n    });\n    this.cancelEdit();\n  }\n\n  handleSaveClick() {\n    if (this.rowValidation) {\n      const _this$editedRowCoords = this.editedRowCoords,\n            r = _this$editedRowCoords.r,\n            c = _this$editedRowCoords.c; // data would send to API\n\n      const data = this.hot.getDataAtRow(r);\n      console.log(data);\n      this.resetRow(r); // should remove, refresh data from DB\n\n      this.selectedRowCoords.r = r;\n      this.selectedRowCoords.c = c;\n      this.editedRowCoords.r = null;\n      this.editedRowCoords.c = null; // Change edit mode on redux\n\n      this.props.setEdit();\n    } else {\n      alert('Validation errors');\n    }\n  }\n\n  handleSaveHistoryClick() {\n    alert('History handle');\n  }\n\n  async handleNewRowClick() {\n    await this.setStateAsync({\n      newRowAdded: true\n    });\n    this.props.setEdit();\n    this.hot.alter('insert_row', 0, 1);\n    this.setCellProperties(0, null);\n    const statusColIndex = this.findIndexOfColumn(0, 'status');\n    this.hot.setDataAtRowProp(0, 'archived', 'No');\n    this.hot.setCellMeta(0, statusColIndex, 'source', ['Planned', 'Implemented']); // inital Data for new row\n\n    this.hot.setDataAtRowProp(0, 'iubIp', '10.250.0.0');\n    this.hot.setDataAtRowProp(0, 'iubGw', '10.250.0.0');\n    this.hot.setDataAtRowProp(0, 'iubMask', '255.255.255.0');\n    this.hot.setDataAtRowProp(0, 'omIp', '10.251.0.0');\n    this.hot.setDataAtRowProp(0, 'omGw', '10.251.0.0');\n    this.hot.setDataAtRowProp(0, 'omMask', '255.255.255.0');\n    this.hot.setDataAtRowProp(0, 's1cp_x2cpIp', '10.248.0.0');\n    this.hot.setDataAtRowProp(0, 's1cp_x2cpGw', '10.248.0.0');\n    this.hot.setDataAtRowProp(0, 's1cp_x2cpMask', '255.255.255.0');\n    this.hot.setDataAtRowProp(0, 's1up_x2upIp', '10.249.0.0');\n    this.hot.setDataAtRowProp(0, 's1up_x2upGw', '10.249.0.0');\n    this.hot.setDataAtRowProp(0, 's1up_x2upMask', '255.255.255.0');\n    this.hot.setDataAtRowProp(0, 'bscIp', '10.137.0.0');\n    this.hot.setDataAtRowProp(0, 'bscNextHopIp', '10.137.0.0');\n  }\n\n  handleHistoryToggle() {\n    const colIndex = this.findIndexOfColumn(0, 'archived');\n    const arg = this.showHistory ? '' : 'No';\n\n    if (!this.state.showHistory) {\n      this.filter.removeConditions(colIndex);\n    } else {\n      this.filter.addCondition(colIndex, 'contains', arg);\n    }\n\n    this.filter.filter();\n    this.setStateAsync({\n      showHistory: !this.state.showHistory\n    });\n  }\n\n  setCellProperties(r, c) {\n    const colCount = this.hot.countCols();\n    let col = c !== null ? c : 0;\n\n    for (let x = 0; x <= colCount; x++) {\n      const _this$hot$getCellMeta = this.hot.getCellMeta(r, x),\n            prop = _this$hot$getCellMeta.prop;\n\n      if (this.editable.indexOf(prop) >= 0) {\n        const type = this.hot.getDataType(r, x); // get cell type from loaded map\n        // this 2 row for initiate the rules on editing row.\n\n        const value = this.hot.getDataAtCell(r, x);\n        this.columnEvents(r, prop, value);\n        col = col === 0 ? x : col; // when add new row find first editable col.\n\n        this.hot.setCellMeta(r, x, \"editor\", type);\n        this.hot.setCellMeta(r, x, \"className\", 'bg-warning text-dark');\n      }\n    }\n\n    this.hot.render();\n    this.hot.selectCell(r, col);\n  }\n\n  findIndexOfColumn(r, propName) {\n    const colCount = this.hot.countCols();\n\n    for (let c = 0; c <= colCount; c++) {\n      const _this$hot$getCellMeta2 = this.hot.getCellMeta(r, c),\n            prop = _this$hot$getCellMeta2.prop;\n\n      if (prop === propName) {\n        return c;\n      }\n    }\n  }\n\n  cancelEdit() {\n    this.handsontableData = JSON.parse(JSON.stringify(this.handsontableDataBackup));\n    this.hot.loadData(this.handsontableData);\n    this.hot.render(); // Change edit mode on redux\n\n    this.props.setEdit();\n  }\n\n  resetRow(r) {\n    const colCount = this.hot.countCols();\n\n    for (let x = 0; x <= colCount; x++) {\n      this.hot.setCellMeta(r, x, \"editor\", false);\n      this.hot.setCellMeta(r, x, \"className\", 'bg-primary text-white');\n    }\n\n    this.hot.render();\n    this.setState({\n      newRowAdded: false\n    });\n  }\n\n  disableMoves() {\n    return false;\n  }\n\n  ipValidate(value, callback) {\n    const pat = /^(?:\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b|null)$/; //const pat = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\n\n    this.rowValidation = pat.test(value);\n    callback(this.rowValidation);\n    if (!this.rowValidation) this.showMessage(this.errorBoxTitle, this.errorMessages.invalidIP, true);\n  }\n\n  numericValidate(value, callback) {\n    const pat = /^\\d+$/;\n    this.rowValidation = pat.test(value);\n    callback(this.rowValidation);\n    if (!this.rowValidation) this.showMessage(this.errorBoxTitle, this.errorMessages.invalidNumber, true);\n  }\n\n  ruleExtractor(columnId) {\n    return columnLogic.find(item => {\n      return item.id === columnId;\n    });\n  }\n\n  statusCL(r, c, newV) {\n    if (!this.state.newRowAdded) {\n      //edit mode\n      const rule = this.ruleExtractor('status');\n      rule.rules.map(item => {\n        if (item.columnValue === newV) {\n          this.hot.setDataAtRowProp(r, item.changedId, item.changedValue);\n        }\n      });\n    }\n  }\n\n  newAggregSiteCL(r, c, value) {\n    // column logic\n    const properties = this.ruleExtractor('newAggregSite');\n    const methodName = properties.methodName,\n          rules = properties.rules;\n    const isExist = this.callRestApiMethod(methodName, {\n      value\n    });\n    console.log(isExist);\n\n    if (value === 'Error') {\n      this.showMessage(this.errorBoxTitle, this.errorMessages.aggregSiteNotExists, true);\n    } else {\n      rules.map(item => {\n        const ind = this.findIndexOfColumn(r, item.changedId); // retrieve data from DB view\n\n        const data = ['Test1', 'Test2', 'Test3', 'Test4'];\n        this.hot.setCellMeta(r, ind, 'source', data);\n      });\n    }\n  }\n\n  radioSiteCL(r, c, value) {\n    const dbResponse = \"Test\"; // at this point we need check the name exists in db\n\n    this.radioSite.value = value;\n    this.radioSite.isExists = dbResponse === value;\n  }\n\n  mwVendorCL(r, c, value) {\n    /* Sample data */\n    const ericsson = ['TAN-0049', 'TAN-0006', 'TAN-0036'];\n    const huawei = ['HUA-0049', 'HUA-0006', 'HUA-0036'];\n    let source;\n\n    switch (value) {\n      case \"ERICSSON\":\n        source = ericsson;\n        break;\n\n      case \"Huawei\":\n        source = huawei;\n        break;\n\n      default:\n        source = [];\n    }\n    /* Sample data end*/\n\n\n    const rule = this.ruleExtractor('mwVendor'); // get this column rules\n\n    rule.rules.map(item => {\n      const ind = this.findIndexOfColumn(r, item.changedId); // retrieve data from DB view\n\n      this.hot.setCellMeta(r, ind, 'source', source);\n    });\n  }\n\n  mwEquipCL(r, c, value) {\n    /* Sample Data */\n    const ericsson = ['Port3 FE', 'Port4 FE'];\n    const huawei = ['Port99 FE', 'Port88 FE'];\n    let source;\n\n    switch (value) {\n      case \"TAN-0049\":\n        source = ericsson;\n        break;\n\n      case \"HUA-0049\":\n        source = huawei;\n        break;\n\n      default:\n        source = [];\n    }\n    /* Sample Data end */\n\n\n    const rule = this.ruleExtractor('mwEquip');\n    rule.rules.map(item => {\n      const ind = this.findIndexOfColumn(r, item.changedId); // retrieve data from DB view\n\n      this.hot.setCellMeta(r, ind, 'source', source);\n    });\n  }\n\n  preAggregSiteCL(r, c, value) {\n    const dbResponse = 'ABC';\n    this.preAggregSite.value = value; // preAggregSite exist\n\n    this.preAggregSite.isExists = dbResponse === value;\n    const rule = this.ruleExtractor('preAggregSite');\n    rule.rules.map(item => {\n      const ind = this.findIndexOfColumn(r, item.changedId);\n      let source = []; // retrieve data from DB view\n\n      switch (item.changedId) {\n        // retrieve from db\n        case 'mwPreAggregEquip':\n          {\n            source = this.preAggregSite.isExists ? ['AAM20P Port Geth Dir YOU-0009', 'AAM10P Port', 'AAM550P', 'AAM10P'] : [];\n          }\n          break;\n\n        case 'raccordmentOsnA':\n          source = ['AB1', 'AB2', 'AB3', 'ABC4'];\n          break;\n      }\n\n      this.hot.setCellMeta(r, ind, 'source', source);\n    });\n  }\n\n  mwPreAggregEquipCL(r, c, value) {\n    /* Sample Data */\n    const s1 = ['Port3 FE', 'Port4 FE'];\n    const s2 = ['Port99 FE', 'Port88 FE'];\n    let source;\n\n    switch (value) {\n      case \"AAM10P\":\n        source = s1;\n        break;\n\n      case \"AAM550P\":\n        source = s2;\n        break;\n\n      default:\n        source = [];\n    }\n    /* Sample Data end */\n\n\n    const rule = this.ruleExtractor('mwPreAggregEquip');\n    rule.rules.map(item => {\n      const ind = this.findIndexOfColumn(r, item.changedId); // retrieve data from DB view\n\n      this.hot.setCellMeta(r, ind, 'source', source);\n    });\n  }\n\n  showMessage(title, message, validatorClose) {\n    confirmAlert({\n      title: 'Validation Warning',\n      message: message,\n      closeOnEscape: false,\n      closeOnClickOutside: false,\n      customUI: ({\n        onClose\n      }) => {\n        const closeAction = () => {\n          if (validatorClose) {\n            this.hot.selectCell(this.validatedCell.r, this.validatedCell.c);\n            this.hot.getActiveEditor().beginEditing();\n            onClose();\n          } else {\n            this.cancelEdit();\n            onClose();\n          }\n        };\n\n        return React.createElement(\"div\", {\n          className: \"card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 442\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 443\n          },\n          __self: this\n        }, title, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          onClick: closeAction,\n          \"aria-label\": \"Close\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 446\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          \"aria-hidden\": \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 449\n          },\n          __self: this\n        }, \"\\xD7\"))), React.createElement(\"div\", {\n          className: \"card-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 453\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: 'card-text text-danger',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 454\n          },\n          __self: this\n        }, message)), React.createElement(\"div\", {\n          className: \"card-footer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 456\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: 'btn btn-warning',\n          onClick: closeAction,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 457\n          },\n          __self: this\n        }, \"Ok\")));\n      }\n    });\n  }\n\n  handleColumnHeaders() {\n    const headerMap = JSON.parse(JSON.stringify(groupingMap));\n    headerMap.map(item => {\n      item.columns.map(c => {\n        this.titles.push(c.label);\n        c.editor = false; // default readonly\n\n        if (typeof c.validator !== \"undefined\") {\n          if (c.validator === 'ipValidator') {\n            c.validator = (value, callback) => {\n              this.ipValidate(value, callback);\n            };\n          }\n\n          if (c.validator === 'isNumeric') {\n            c.validator = (value, callback) => {\n              this.numericValidate(value, callback);\n            };\n          }\n        }\n      });\n      item.colspan = item.columns.length;\n      this.columns = [...this.columns, ...item.columns];\n      delete item.columns;\n    });\n    this.columnHeaders.push(headerMap);\n    this.columnHeaders.push(this.titles); //console.log(this.columnHeaders);\n  }\n\n  headerColoring(col, TH) {\n    const TR = TH.parentNode;\n    const THEAD = TR.parentNode;\n    const b = THEAD.childNodes.length;\n    const n = Array.prototype.indexOf.call(THEAD.childNodes, TR);\n    const headerLevel = -1 * b + n;\n\n    function applyClass(elem, className) {\n      if (!Handsontable.dom.hasClass(elem, className)) {\n        Handsontable.dom.addClass(elem, className);\n      }\n    }\n\n    if (headerLevel === -1 || headerLevel === -2) {\n      if (col >= 0 && col <= 1) {\n        applyClass(TH, 'abis');\n      }\n\n      if (col >= 2 && col <= 8) {\n        applyClass(TH, 'primary');\n      }\n\n      if (col === 9) {\n        applyClass(TH, 'info');\n      }\n\n      if (col >= 10 && col <= 18) {\n        applyClass(TH, 'dates');\n      }\n\n      if (col >= 19 && col <= 23) {\n        applyClass(TH, 'radio');\n      }\n\n      if (col >= 24 && col <= 27) {\n        applyClass(TH, 'local');\n      }\n\n      if (col >= 28 && col <= 35) {\n        applyClass(TH, 'nodal');\n      }\n\n      if (col >= 36 && col <= 43) {\n        applyClass(TH, 'site3g');\n      }\n\n      if (col >= 44 && col <= 51) {\n        applyClass(TH, 'site4g');\n      }\n\n      if (col >= 52 && col <= 55) {\n        applyClass(TH, 'bsc');\n      }\n\n      if (col >= 56 && col <= 57) {\n        applyClass(TH, 'rnc');\n      }\n\n      if (col >= 58 && col <= 63) {\n        applyClass(TH, 'site2g');\n      }\n    }\n  }\n\n  columnEvents(r, c, newV) {\n    switch (c) {\n      case 'newAggregSite':\n        {\n          this.validatedCell.r = r;\n          this.validatedCell.c = c;\n          this.newAggregSiteCL(r, c, newV);\n        }\n        break;\n\n      case 'status':\n        this.statusCL(r, c, newV);\n        break;\n\n      case 'radioSite':\n        this.radioSiteCL(r, c, newV);\n        break;\n\n      case 'mwVendor':\n        this.mwVendorCL(r, c, newV);\n        break;\n\n      case 'mwEquip':\n        this.mwEquipCL(r, c, newV);\n        break;\n\n      case 'preAggregSite':\n        this.preAggregSiteCL(r, c, newV);\n        break;\n\n      case 'mwPreAggregEquip':\n        this.mwPreAggregEquipCL(r, c, newV);\n        break;\n    }\n  }\n\n  callRestApiMethod(method, params) {\n    const endpoint = `${this.props.serverPath}/${this.serviceName}/${method}`;\n    return new Promise((res, rej) => {\n      axios({\n        method: \"POST\",\n        url: endpoint,\n        data: params\n      }).then(response => {\n        console.log(response);\n        res(response.data);\n      }).catch(err => {\n        console.log(err);\n        rej(err);\n      });\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          maximize = _this$props.maximize,\n          language = _this$props.language,\n          contentCSS = _this$props.contentCSS;\n\n    if (language) {\n      this.errorBoxTitle = language.validationMessageBoxTitle;\n      this.errorMessages = language.validationErrorMessages;\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row h-100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      maximize: maximize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: contentCSS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      newRowAdded: this.state.newRowAdded,\n      newClick: this.handleNewRowClick.bind(this),\n      editClick: this.handleEditClick.bind(this),\n      cancelClick: this.handleCancelClick.bind(this),\n      saveClick: this.handleSaveClick.bind(this),\n      saveHistoryClick: this.handleSaveHistoryClick.bind(this),\n      historyToggle: this.handleHistoryToggle.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: 'card mt-3 fixedCard',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }, React.createElement(HotTable, {\n      ref: this.hotTableComponent,\n      id: 'hot',\n      rowHeaders: true,\n      licenseKey: 'non-commercial-and-evaluation',\n      nestedHeaders: this.columnHeaders,\n      columns: this.columns,\n      stretchH: 'all',\n      dropdownMenu: true,\n      filters: true,\n      manualColumnResize: true,\n      width: '100%',\n      height: '100%',\n      fixedColumnsLeft: 2,\n      columnSorting: true,\n      currentRowClassName: ['bg-primary', 'text-white'],\n      enterBeginsEditing: false,\n      outsideClickDeselects: false,\n      enterMoves: this.disableMoves,\n      fillHandle: this.disableMoves(),\n      afterValidate: (isValid, value, row, prop) => {\n        //console.log(isValid, value, row, prop)\n        this.validatedCell.r = row;\n        this.validatedCell.c = prop;\n      },\n      afterGetColHeader: (col, TH) => {\n        this.headerColoring(col, TH);\n      },\n      afterCreateRow: (index, amount, source) => {\n        console.log(index, amount, source);\n      },\n      afterChange: changes => {\n        if (changes) {\n          const _changes$ = _slicedToArray(changes[0], 4),\n                r = _changes$[0],\n                c = _changes$[1],\n                oldV = _changes$[2],\n                newV = _changes$[3];\n\n          this.columnEvents(r, c, newV);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }))))), React.createElement(ModalTemplate, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }), React.createElement(ModalExportTemplate, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    }), React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    language: state.language,\n    serverPath: state.serverPath,\n    maximize: state.maximize,\n    contentCSS: state.contentCSS\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setEdit: () => dispatch(editOnToggle())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Matrix);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/views/Matrix.jsx"],"names":["React","createRef","connect","axios","HotTable","Handsontable","groupingMap","columnLogic","Header","Sidebar","Toolbar","ModalTemplate","Spinner","data","editOnToggle","confirmAlert","ModalExportTemplate","Matrix","Component","constructor","props","serviceName","process","env","REACT_APP_MATRIX_SERVICE","hotTableComponent","hot","handsontableData","SAFI","handsontableDataBackup","errorMessages","errorBoxTitle","columnHeaders","titles","columns","handleColumnHeaders","editable","selectedRowCoords","r","c","editedRowCoords","validatedCell","rowValidation","showHistory","filter","radioSite","isExists","value","preAggregSite","state","newRowAdded","hooks","add","componentDidMount","current","hotInstance","loadData","getPlugin","colIndex","findIndexOfColumn","addCondition","setStateAsync","Promise","resolve","setState","handleEditClick","JSON","parse","stringify","setEdit","setCellProperties","handleCancelClick","cancelEdit","handleSaveClick","getDataAtRow","console","log","resetRow","alert","handleSaveHistoryClick","handleNewRowClick","alter","statusColIndex","setDataAtRowProp","setCellMeta","handleHistoryToggle","arg","removeConditions","colCount","countCols","col","x","getCellMeta","prop","indexOf","type","getDataType","getDataAtCell","columnEvents","render","selectCell","propName","disableMoves","ipValidate","callback","pat","test","showMessage","invalidIP","numericValidate","invalidNumber","ruleExtractor","columnId","find","item","id","statusCL","newV","rule","rules","map","columnValue","changedId","changedValue","newAggregSiteCL","properties","methodName","isExist","callRestApiMethod","aggregSiteNotExists","ind","radioSiteCL","dbResponse","mwVendorCL","ericsson","huawei","source","mwEquipCL","preAggregSiteCL","mwPreAggregEquipCL","s1","s2","title","message","validatorClose","closeOnEscape","closeOnClickOutside","customUI","onClose","closeAction","getActiveEditor","beginEditing","headerMap","push","label","editor","validator","colspan","length","headerColoring","TH","TR","parentNode","THEAD","b","childNodes","n","Array","prototype","call","headerLevel","applyClass","elem","className","dom","hasClass","addClass","method","params","endpoint","serverPath","res","rej","url","then","response","catch","err","maximize","language","contentCSS","validationMessageBoxTitle","validationErrorMessages","bind","isValid","row","index","amount","changes","oldV","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {createRef} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport axios from 'axios';\r\nimport {HotTable} from '@handsontable/react';\r\nimport Handsontable from 'handsontable';\r\nimport {groupingMap} from '../matrixDataMap';\r\nimport {columnLogic} from '../matrixColumnLogicMap';\r\n\r\nimport Header from '../components/Header'\r\nimport Sidebar from '../components/Sidebar'\r\nimport Toolbar from '../components/ToolbarMatrix'\r\nimport ModalTemplate from '../components/ModalImport'\r\nimport Spinner from '../components/Spinner'\r\nimport data from '../sampleData/data';\r\nimport {editOnToggle} from \"../redux/actions\";\r\n\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport ModalExportTemplate from \"../components/ModalExport\"; // Import css\r\n\r\nclass Matrix extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.serviceName = process.env.REACT_APP_MATRIX_SERVICE;\r\n        //this.handsontableData = Handsontable.helper.createSpreadsheetData(25, 10);\r\n        this.hotTableComponent = createRef();\r\n        this.hot = null;\r\n        this.handsontableData = data.SAFI;\r\n        this.handsontableDataBackup = null;\r\n\r\n        this.errorMessages = null;\r\n        this.errorBoxTitle = null;\r\n        this.columnHeaders = [];\r\n        this.titles = [];\r\n        this.columns = [];\r\n        this.handleColumnHeaders();\r\n        this.editable = ['oldAggregSite', 'newAggregSite',\r\n            'preAggregSite', 'mwPreAggregEquip', 'mwPreAggregPort',\r\n            'aggregEquipIp',\r\n            'status', 'dueDate', 'radioSite',\r\n            'aggregIpPort', 'raccordmentOsnA', 'raccordmentOsnZ',\r\n            'mwEquip' ,'mwVendor', 'mwPort',\r\n            'iubIp', 'iubVlan']; // test\r\n        this.selectedRowCoords = {r: null, c: null};\r\n        this.editedRowCoords = {r: null, c: null};\r\n        this.validatedCell = {r: null, c: null};\r\n        this.rowValidation = true;\r\n        this.showHistory = false;\r\n        this.filter = null;\r\n\r\n        this.radioSite = {\r\n                isExists: false,\r\n                value: ''\r\n        };\r\n\r\n        this.preAggregSite = {\r\n            isExists: false,\r\n            value: \"\"\r\n        };\r\n\r\n        this.state = {\r\n            newRowAdded: false,\r\n            showHistory: false,\r\n        };\r\n\r\n        Handsontable.hooks.add('afterSelectionEnd', (r, c) => {\r\n            this.selectedRowCoords.r = r;\r\n            this.selectedRowCoords.c = c;\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.hot = this.hotTableComponent.current.hotInstance;\r\n        this.hot.loadData(this.handsontableData);\r\n\r\n        this.filter = this.hot.getPlugin('filters');\r\n\r\n        const colIndex = this.findIndexOfColumn(0,'archived');\r\n        this.filter.addCondition(colIndex, 'contains', 'No');\r\n        this.filter.filter();\r\n    }\r\n\r\n    setStateAsync(state) {\r\n        return new Promise((resolve) => {\r\n            this.setState(state, resolve)\r\n        });\r\n    }\r\n\r\n    handleEditClick() {\r\n\r\n        const {r, c} = this.selectedRowCoords;\r\n        if (r === null && c === null) return;\r\n\r\n        //console.log(this.hot.getCellMeta(r, 4));\r\n        //console.log(this.hot.getRangedData([r, 0, r, this.hot.countCols()]));\r\n\r\n        // create backup data before editing;\r\n        this.handsontableDataBackup = JSON.parse(JSON.stringify(this.handsontableData));\r\n\r\n        // Change edit mode on redux\r\n        this.props.setEdit();\r\n\r\n        this.setCellProperties(r, c);\r\n        this.editedRowCoords.r = r;\r\n        this.editedRowCoords.c = c;\r\n    }\r\n\r\n    async handleCancelClick() {\r\n        await this.setStateAsync({newRowAdded : false});\r\n        this.cancelEdit();\r\n    }\r\n\r\n    handleSaveClick() {\r\n        if (this.rowValidation) {\r\n\r\n            const {r, c} = this.editedRowCoords;\r\n\r\n            // data would send to API\r\n            const data = this.hot.getDataAtRow(r);\r\n            console.log(data);\r\n\r\n            this.resetRow(r); // should remove, refresh data from DB\r\n\r\n            this.selectedRowCoords.r = r;\r\n            this.selectedRowCoords.c = c;\r\n            this.editedRowCoords.r = null;\r\n            this.editedRowCoords.c = null;\r\n\r\n\r\n            // Change edit mode on redux\r\n            this.props.setEdit();\r\n        } else {\r\n            alert('Validation errors');\r\n        }\r\n    }\r\n\r\n    handleSaveHistoryClick() {\r\n        alert('History handle');\r\n    }\r\n\r\n    async handleNewRowClick() {\r\n\r\n        await this.setStateAsync({newRowAdded : true});\r\n\r\n        this.props.setEdit();\r\n        this.hot.alter('insert_row', 0, 1);\r\n        this.setCellProperties(0, null);\r\n\r\n\r\n        const statusColIndex = this.findIndexOfColumn(0, 'status');\r\n\r\n        this.hot.setDataAtRowProp(0, 'archived', 'No');\r\n        this.hot.setCellMeta(0, statusColIndex, 'source', ['Planned', 'Implemented'])\r\n\r\n        // inital Data for new row\r\n        this.hot.setDataAtRowProp(0, 'iubIp', '10.250.0.0')\r\n        this.hot.setDataAtRowProp(0, 'iubGw', '10.250.0.0')\r\n        this.hot.setDataAtRowProp(0, 'iubMask', '255.255.255.0')\r\n        this.hot.setDataAtRowProp(0, 'omIp', '10.251.0.0')\r\n        this.hot.setDataAtRowProp(0, 'omGw', '10.251.0.0')\r\n        this.hot.setDataAtRowProp(0, 'omMask', '255.255.255.0')\r\n        this.hot.setDataAtRowProp(0, 's1cp_x2cpIp', '10.248.0.0')\r\n        this.hot.setDataAtRowProp(0, 's1cp_x2cpGw', '10.248.0.0')\r\n        this.hot.setDataAtRowProp(0, 's1cp_x2cpMask', '255.255.255.0')\r\n        this.hot.setDataAtRowProp(0, 's1up_x2upIp', '10.249.0.0')\r\n        this.hot.setDataAtRowProp(0, 's1up_x2upGw', '10.249.0.0')\r\n        this.hot.setDataAtRowProp(0, 's1up_x2upMask', '255.255.255.0')\r\n        this.hot.setDataAtRowProp(0, 'bscIp', '10.137.0.0')\r\n        this.hot.setDataAtRowProp(0, 'bscNextHopIp', '10.137.0.0')\r\n\r\n    }\r\n\r\n    handleHistoryToggle() {\r\n\r\n        const colIndex = this.findIndexOfColumn(0,'archived');\r\n\r\n        const arg = this.showHistory ? '' : 'No';\r\n\r\n        if (!this.state.showHistory) {\r\n            this.filter.removeConditions(colIndex);\r\n        } else {\r\n            this.filter.addCondition(colIndex, 'contains', arg);\r\n        }\r\n        this.filter.filter();\r\n\r\n        this.setStateAsync({showHistory: !this.state.showHistory});\r\n    }\r\n\r\n    setCellProperties(r, c) {\r\n\r\n        const colCount = this.hot.countCols();\r\n        let col = c !== null ? c : 0;\r\n\r\n        for (let x = 0; x <= colCount; x++) {\r\n            const {prop} = this.hot.getCellMeta(r,x);\r\n\r\n            if (this.editable.indexOf(prop) >= 0) {\r\n\r\n                const type = this.hot.getDataType(r,x); // get cell type from loaded map\r\n\r\n                // this 2 row for initiate the rules on editing row.\r\n                const value = this.hot.getDataAtCell(r, x);\r\n                this.columnEvents(r, prop, value);\r\n\r\n                col = col === 0 ? x : col; // when add new row find first editable col.\r\n\r\n                this.hot.setCellMeta(r, x, \"editor\", type);\r\n                this.hot.setCellMeta(r, x, \"className\", 'bg-warning text-dark');\r\n            }\r\n        }\r\n        this.hot.render();\r\n        this.hot.selectCell(r, col);\r\n    }\r\n\r\n    findIndexOfColumn(r, propName) {\r\n        const colCount = this.hot.countCols();\r\n        for (let c = 0; c <= colCount; c++) {\r\n            const {prop} = this.hot.getCellMeta(r,c);\r\n            if (prop === propName) {\r\n                return c;\r\n            }\r\n        }\r\n    }\r\n\r\n    cancelEdit() {\r\n        this.handsontableData = JSON.parse(JSON.stringify(this.handsontableDataBackup));\r\n        this.hot.loadData(this.handsontableData);\r\n        this.hot.render();\r\n\r\n        // Change edit mode on redux\r\n        this.props.setEdit();\r\n    }\r\n\r\n    resetRow(r) {\r\n        const colCount = this.hot.countCols();\r\n        for (let x = 0; x <= colCount; x++) {\r\n\r\n            this.hot.setCellMeta(r, x, \"editor\", false);\r\n            this.hot.setCellMeta(r, x, \"className\", 'bg-primary text-white');\r\n        }\r\n        this.hot.render();\r\n        this.setState({ newRowAdded : false});\r\n    }\r\n\r\n    disableMoves() {\r\n        return false;\r\n    }\r\n\r\n    ipValidate(value, callback) {\r\n\r\n        const pat = /^(?:\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b|null)$/;\r\n        //const pat = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\r\n\r\n        this.rowValidation = pat.test(value);\r\n        callback(this.rowValidation);\r\n        if (!this.rowValidation)\r\n            this.showMessage(this.errorBoxTitle, this.errorMessages.invalidIP, true);\r\n    }\r\n\r\n    numericValidate(value, callback) {\r\n\r\n        const pat = /^\\d+$/;\r\n\r\n        this.rowValidation = pat.test(value);\r\n        callback(this.rowValidation);\r\n        if (!this.rowValidation)\r\n            this.showMessage(this.errorBoxTitle, this.errorMessages.invalidNumber, true);\r\n    }\r\n\r\n    ruleExtractor(columnId) {\r\n        return columnLogic.find((item) => {\r\n            return item.id === columnId;\r\n        })\r\n    }\r\n\r\n    statusCL(r, c, newV) {\r\n\r\n        if (!this.state.newRowAdded) {\r\n            //edit mode\r\n            const rule = this.ruleExtractor('status');\r\n            rule.rules.map((item) => {\r\n                if (item.columnValue === newV) {\r\n                    this.hot.setDataAtRowProp(r, item.changedId, item.changedValue);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    newAggregSiteCL(r, c, value) {\r\n        // column logic\r\n\r\n        const properties = this.ruleExtractor('newAggregSite');\r\n        const {methodName, rules} = properties;\r\n\r\n        const isExist = this.callRestApiMethod(methodName, {value});\r\n        console.log(isExist);\r\n\r\n        if (value === 'Error') {\r\n            this.showMessage(this.errorBoxTitle, this.errorMessages.aggregSiteNotExists, true);\r\n\r\n        } else {\r\n\r\n            rules.map((item) => {\r\n\r\n                const ind =this.findIndexOfColumn(r, item.changedId);\r\n                // retrieve data from DB view\r\n                const data = ['Test1', 'Test2', 'Test3', 'Test4'];\r\n                this.hot.setCellMeta(r, ind, 'source', data);\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    radioSiteCL(r, c, value) {\r\n\r\n        const dbResponse = \"Test\"; // at this point we need check the name exists in db\r\n\r\n        this.radioSite.value = value;\r\n        this.radioSite.isExists = (dbResponse === value);\r\n    }\r\n\r\n    mwVendorCL(r, c, value) {\r\n\r\n        /* Sample data */\r\n        const ericsson = ['TAN-0049', 'TAN-0006', 'TAN-0036'];\r\n        const huawei = ['HUA-0049', 'HUA-0006', 'HUA-0036'];\r\n\r\n        let source;\r\n\r\n        switch (value) {\r\n            case \"ERICSSON\" : source = ericsson; break;\r\n            case \"Huawei\" : source = huawei; break;\r\n            default: source = []\r\n        }\r\n        /* Sample data end*/\r\n\r\n        const rule = this.ruleExtractor('mwVendor'); // get this column rules\r\n\r\n        rule.rules.map((item) => {\r\n            const ind =this.findIndexOfColumn(r, item.changedId);\r\n            // retrieve data from DB view\r\n            this.hot.setCellMeta(r, ind, 'source', source);\r\n        });\r\n    }\r\n\r\n    mwEquipCL(r, c, value) {\r\n\r\n        /* Sample Data */\r\n        const ericsson = ['Port3 FE', 'Port4 FE'];\r\n        const huawei = ['Port99 FE', 'Port88 FE'];\r\n\r\n        let source;\r\n\r\n        switch (value) {\r\n            case \"TAN-0049\" : source = ericsson; break;\r\n            case \"HUA-0049\" : source = huawei; break;\r\n            default: source = []\r\n        }\r\n        /* Sample Data end */\r\n\r\n        const rule = this.ruleExtractor('mwEquip');\r\n        rule.rules.map((item) => {\r\n            const ind =this.findIndexOfColumn(r, item.changedId);\r\n            // retrieve data from DB view\r\n            this.hot.setCellMeta(r, ind, 'source', source);\r\n        });\r\n    }\r\n\r\n    preAggregSiteCL(r, c, value) {\r\n\r\n        const dbResponse = 'ABC';\r\n        this.preAggregSite.value = value;\r\n\r\n        // preAggregSite exist\r\n        this.preAggregSite.isExists = (dbResponse === value);\r\n\r\n        const rule = this.ruleExtractor('preAggregSite');\r\n        rule.rules.map((item) => {\r\n            const ind =this.findIndexOfColumn(r, item.changedId);\r\n\r\n            let source = []; // retrieve data from DB view\r\n\r\n            switch (item.changedId) {\r\n                // retrieve from db\r\n                case 'mwPreAggregEquip': {\r\n                    source = this.preAggregSite.isExists\r\n                        ? ['AAM20P Port Geth Dir YOU-0009', 'AAM10P Port', 'AAM550P', 'AAM10P']\r\n                        : [];\r\n                } break;\r\n                case 'raccordmentOsnA': source = ['AB1', 'AB2', 'AB3', 'ABC4']; break;\r\n            }\r\n\r\n            this.hot.setCellMeta(r, ind, 'source', source);\r\n        });\r\n\r\n    }\r\n\r\n    mwPreAggregEquipCL(r, c, value) {\r\n\r\n        /* Sample Data */\r\n        const s1 = ['Port3 FE', 'Port4 FE'];\r\n        const s2 = ['Port99 FE', 'Port88 FE'];\r\n\r\n        let source;\r\n\r\n        switch (value) {\r\n            case \"AAM10P\" : source = s1; break;\r\n            case \"AAM550P\" : source = s2; break;\r\n            default: source = []\r\n        }\r\n        /* Sample Data end */\r\n\r\n        const rule = this.ruleExtractor('mwPreAggregEquip');\r\n        rule.rules.map((item) => {\r\n            const ind =this.findIndexOfColumn(r, item.changedId);\r\n            // retrieve data from DB view\r\n            this.hot.setCellMeta(r, ind, 'source', source);\r\n        });\r\n    }\r\n\r\n    showMessage(title, message, validatorClose) {\r\n        confirmAlert({\r\n            title: 'Validation Warning',\r\n            message: message,\r\n            closeOnEscape: false,\r\n            closeOnClickOutside: false,\r\n            customUI: ({ onClose }) => {\r\n\r\n                const closeAction = () => {\r\n                    if (validatorClose) {\r\n                        this.hot.selectCell(this.validatedCell.r, this.validatedCell.c);\r\n                        this.hot.getActiveEditor().beginEditing();\r\n                        onClose();\r\n\r\n                    } else {\r\n                        this.cancelEdit();\r\n                        onClose();\r\n                    }\r\n                }\r\n                return (\r\n                    <div className=\"card\">\r\n                        <div className=\"card-header\">\r\n                            {title}\r\n\r\n                            <button type=\"button\" className=\"close\"\r\n                                    onClick={closeAction}\r\n                                    aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                            <div className={'card-text text-danger'}>{message}</div>\r\n                        </div>\r\n                        <div className=\"card-footer\">\r\n                            <button className={'btn btn-warning'} onClick={closeAction}>\r\n                                Ok\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    handleColumnHeaders() {\r\n        const headerMap = JSON.parse(JSON.stringify(groupingMap));\r\n\r\n        headerMap.map((item) => {\r\n            item.columns.map(c => {\r\n                this.titles.push(c.label);\r\n                c.editor = false; // default readonly\r\n\r\n                if (typeof c.validator !== \"undefined\") {\r\n\r\n                    if (c.validator === 'ipValidator') {\r\n                        c.validator = (value, callback) => {\r\n                            this.ipValidate(value, callback)\r\n                        }\r\n                    }\r\n\r\n                    if (c.validator === 'isNumeric') {\r\n                        c.validator = (value, callback) => {\r\n                            this.numericValidate(value, callback)\r\n                        }\r\n                    }\r\n                }\r\n\r\n            });\r\n            item.colspan = item.columns.length;\r\n            this.columns = [...this.columns, ...item.columns];\r\n            delete item.columns;\r\n        })\r\n\r\n        this.columnHeaders.push(headerMap);\r\n        this.columnHeaders.push(this.titles);\r\n        //console.log(this.columnHeaders);\r\n    }\r\n\r\n    headerColoring(col, TH) {\r\n\r\n        const TR = TH.parentNode;\r\n        const THEAD = TR.parentNode;\r\n\r\n        const b = THEAD.childNodes.length;\r\n        const n = Array.prototype.indexOf.call(THEAD.childNodes, TR);\r\n        const headerLevel = (-1) * b + n;\r\n\r\n        function applyClass(elem, className) {\r\n            if (!Handsontable.dom.hasClass(elem, className)) {\r\n                Handsontable.dom.addClass(elem, className);\r\n            }\r\n        }\r\n\r\n        if (headerLevel === -1 || headerLevel === -2) {\r\n\r\n            if (col >=0 && col <= 1) {\r\n                applyClass(TH, 'abis');\r\n            }\r\n\r\n            if (col >=2 && col <= 8) {\r\n                applyClass(TH, 'primary');\r\n            }\r\n\r\n            if (col === 9) {\r\n                applyClass(TH, 'info');\r\n            }\r\n\r\n            if (col >=10 && col <= 18) {\r\n                applyClass(TH, 'dates');\r\n            }\r\n\r\n            if (col >=19 && col <= 23) {\r\n                applyClass(TH, 'radio');\r\n            }\r\n\r\n            if (col >=24 && col <= 27) {\r\n                applyClass(TH, 'local');\r\n            }\r\n\r\n            if (col >=28 && col <= 35) {\r\n                applyClass(TH, 'nodal');\r\n            }\r\n\r\n            if (col >=36 && col <= 43) {\r\n                applyClass(TH, 'site3g');\r\n            }\r\n\r\n            if (col >=44 && col <= 51) {\r\n                applyClass(TH, 'site4g');\r\n            }\r\n\r\n            if (col >=52 && col <= 55) {\r\n                applyClass(TH, 'bsc');\r\n            }\r\n\r\n            if (col >=56 && col <= 57) {\r\n                applyClass(TH, 'rnc');\r\n            }\r\n\r\n            if (col >=58 && col <= 63) {\r\n                applyClass(TH, 'site2g');\r\n            }\r\n        }\r\n    }\r\n\r\n    columnEvents(r, c, newV) {\r\n\r\n        switch (c) {\r\n            case 'newAggregSite' : {\r\n                this.validatedCell.r = r;\r\n                this.validatedCell.c = c;\r\n                this.newAggregSiteCL(r, c, newV);\r\n            } break;\r\n            case 'status' : this.statusCL(r, c, newV); break;\r\n            case 'radioSite' : this.radioSiteCL(r, c, newV); break;\r\n            case 'mwVendor' : this.mwVendorCL(r, c, newV); break;\r\n            case 'mwEquip' : this.mwEquipCL(r, c, newV); break;\r\n            case 'preAggregSite' : this.preAggregSiteCL(r, c, newV); break;\r\n            case 'mwPreAggregEquip' : this.mwPreAggregEquipCL(r, c, newV); break;\r\n\r\n        }\r\n    }\r\n\r\n    callRestApiMethod(method, params) {\r\n        const endpoint = `${this.props.serverPath}/${this.serviceName}/${method}`;\r\n\r\n        return new Promise((res, rej) => {\r\n\r\n            axios({\r\n                method: \"POST\",\r\n                url: endpoint,\r\n                data: params\r\n            }).then((response) => {\r\n                console.log(response)\r\n                res(response.data);\r\n            }).catch((err) => {\r\n                console.log(err);\r\n                rej(err)\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        const {maximize, language, contentCSS} = this.props;\r\n\r\n        if (language) {\r\n            this.errorBoxTitle = language.validationMessageBoxTitle;\r\n            this.errorMessages = language.validationErrorMessages;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Header/>\r\n                <div className=\"row h-100\">\r\n                    <Sidebar maximize={maximize}/>\r\n                    <div className={contentCSS}>\r\n                        <Toolbar\r\n                            newRowAdded={this.state.newRowAdded}\r\n                            newClick={this.handleNewRowClick.bind(this)}\r\n                            editClick={this.handleEditClick.bind(this)}\r\n                            cancelClick={this.handleCancelClick.bind(this)}\r\n                            saveClick={this.handleSaveClick.bind(this)}\r\n                            saveHistoryClick={this.handleSaveHistoryClick.bind(this)}\r\n                            historyToggle={this.handleHistoryToggle.bind(this)}\r\n                        />\r\n\r\n                        <div className={'card mt-3 fixedCard'}>\r\n                            <div className=\"card-body\">\r\n                                <HotTable ref={this.hotTableComponent} id={'hot'}\r\n                                          rowHeaders={true}\r\n                                          licenseKey={'non-commercial-and-evaluation'}\r\n                                          nestedHeaders={this.columnHeaders}\r\n                                          columns={this.columns}\r\n                                          stretchH={'all'}\r\n                                          dropdownMenu={true}\r\n                                          filters={true}\r\n                                          manualColumnResize={true}\r\n                                          width={'100%'}\r\n                                          height={'100%'}\r\n                                          fixedColumnsLeft={2}\r\n                                          columnSorting={true}\r\n                                          currentRowClassName={['bg-primary', 'text-white']}\r\n                                          enterBeginsEditing={false}\r\n                                          outsideClickDeselects={false}\r\n                                          enterMoves={this.disableMoves}\r\n                                          fillHandle={this.disableMoves()}\r\n                                          afterValidate={(isValid, value, row, prop) => {\r\n                                              //console.log(isValid, value, row, prop)\r\n                                              this.validatedCell.r = row;\r\n                                              this.validatedCell.c = prop;\r\n                                          }}\r\n                                          afterGetColHeader={(col, TH) => {\r\n                                              this.headerColoring(col, TH)\r\n                                          }}\r\n                                          afterCreateRow={(index, amount, source) => {\r\n                                              console.log(index, amount, source)\r\n                                          }}\r\n                                          afterChange={(changes) =>{\r\n\r\n                                              if (changes) {\r\n                                                  const [r, c, oldV, newV] = changes[0];\r\n                                                  this.columnEvents(r, c, newV);\r\n                                              }\r\n\r\n                                          }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <ModalTemplate/>\r\n                <ModalExportTemplate/>\r\n                <Spinner/>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        language: state.language,\r\n        serverPath: state.serverPath,\r\n        maximize: state.maximize,\r\n        contentCSS: state.contentCSS\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setEdit: () => dispatch(editOnToggle()),\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Matrix);"]},"metadata":{},"sourceType":"module"}