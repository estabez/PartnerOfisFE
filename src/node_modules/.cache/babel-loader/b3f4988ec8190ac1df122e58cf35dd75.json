{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import{connect}from\"react-redux\";import MaximizeContent from\"./MaximizeContent\";import{Row,Col,Card,CardBody,Button,ButtonGroup}from'reactstrap';import{modalImportToggle,modalExportToggle}from\"../redux/actions\";import SelectRegion from'./SelectRegion';var ToolbarMatrix=/*#__PURE__*/function(_React$Component){_inherits(ToolbarMatrix,_React$Component);function ToolbarMatrix(){_classCallCheck(this,ToolbarMatrix);return _possibleConstructorReturn(this,_getPrototypeOf(ToolbarMatrix).apply(this,arguments));}_createClass(ToolbarMatrix,[{key:\"render\",value:function render(){var _this=this;var _this$props=this.props,language=_this$props.language,wrapper=_this$props.wrapper;if(language){return React.createElement(Card,{className:wrapper},React.createElement(CardBody,null,React.createElement(Row,null,React.createElement(Col,{xs:3},React.createElement(SelectRegion,{handleRegionChange:this.props.handleRegionChange.bind(this)})),React.createElement(Col,{xs:9,className:\"text-right tools\"},React.createElement(ButtonGroup,null,language.matrixViewToolbar.map(function(item,key){if(item.clickEvent==='edit'||item.id==='saveOptions'){item.showMe=!_this.props.editOn;}// disable buttons if edit mode on\nvar disableAttr=_this.props.editOn?item.showMe:false;// if data empty just import button can be clickable\nif(!_this.props.isDataExist){disableAttr=!(item.clickEvent==='import');}if(item.id!=='saveOptions'){return React.createElement(Button,{key:key,\"data-tip\":item.title,\"data-place\":'top',disabled:disableAttr,className:item.showMe?undefined:'d-none',onClick:item.clickEvent==='import'?_this.props.setModalImport:item.clickEvent==='edit'?_this.props.editClick:item.clickEvent==='new'?_this.props.newClick:item.clickEvent==='history'?_this.props.historyToggle:item.clickEvent==='export'?_this.props.setModalExport:undefined,color:item.btnClass},React.createElement(\"i\",{className:\"icon \".concat(item.icon)}));}else if(item.id==='saveOptions'&&_this.props.editOn){return React.createElement(\"div\",{className:\"dropdown\",key:key},React.createElement(Button,{\"data-tip\":item.title,\"data-place\":'top',color:item.btnClass,\"data-toggle\":\"dropdown\"},React.createElement(\"i\",{className:\"icon \".concat(item.icon)})),React.createElement(\"div\",{className:\"dropdown-menu dropdown-menu-right\"},item.children.map(function(child,childKey){var showOption=_this.props.newRowAdded===true?child.showOnNewRow:true;var divClass=\"\".concat(child.class,\" \").concat(showOption?'':' d-none');return React.createElement(\"div\",{className:divClass,onClick:child.clickEvent==='cancel'?_this.props.cancelClick:child.clickEvent==='save-history'?_this.props.saveHistoryClick:child.clickEvent==='save'?_this.props.saveClick:undefined,key:childKey},React.createElement(\"i\",{className:\"icon \".concat(child.icon,\" mr-2\")}),child.title);})));}})),React.createElement(MaximizeContent,null)))));}else{return React.createElement(React.Fragment,null);}}}]);return ToolbarMatrix;}(React.Component);function mapStateToProps(state){return{language:state.language,editOn:state.editOn};}function mapDispatchToProps(dispatch){return{setModalImport:function setModalImport(){return dispatch(modalImportToggle());},setModalExport:function setModalExport(){return dispatch(modalExportToggle());}};}export default connect(mapStateToProps,mapDispatchToProps)(ToolbarMatrix);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/ToolbarMatrix.jsx"],"names":["React","connect","MaximizeContent","Row","Col","Card","CardBody","Button","ButtonGroup","modalImportToggle","modalExportToggle","SelectRegion","ToolbarMatrix","props","language","wrapper","handleRegionChange","bind","matrixViewToolbar","map","item","key","clickEvent","id","showMe","editOn","disableAttr","isDataExist","title","undefined","setModalImport","editClick","newClick","historyToggle","setModalExport","btnClass","icon","children","child","childKey","showOption","newRowAdded","showOnNewRow","divClass","class","cancelClick","saveHistoryClick","saveClick","Component","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport MaximizeContent from \"./MaximizeContent\";\r\nimport {Row, Col, Card, CardBody, Button, ButtonGroup} from 'reactstrap';\r\nimport {modalImportToggle, modalExportToggle} from \"../redux/actions\";\r\nimport SelectRegion from './SelectRegion';\r\n\r\nclass ToolbarMatrix extends React.Component {\r\n\r\n    render() {\r\n\r\n        const {language, wrapper} = this.props;\r\n\r\n        if (language) {\r\n\r\n            return (\r\n                <Card className={wrapper}>\r\n                    <CardBody>\r\n\r\n                        <Row>\r\n                            <Col xs={3}>\r\n                                <SelectRegion\r\n                                    handleRegionChange={this.props.handleRegionChange.bind(this)}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col xs={9} className=\"text-right tools\">\r\n\r\n                                <ButtonGroup>\r\n                                {\r\n                                language.matrixViewToolbar.map((item, key) => {\r\n\r\n                                    if ((item.clickEvent === 'edit' ||\r\n                                        item.id === 'saveOptions')) {\r\n                                        item.showMe = !this.props.editOn\r\n                                    }\r\n\r\n                                    // disable buttons if edit mode on\r\n                                    let disableAttr = this.props.editOn ? item.showMe : false;\r\n\r\n                                    // if data empty just import button can be clickable\r\n                                    if (!this.props.isDataExist) {\r\n                                        disableAttr = !(item.clickEvent === 'import');\r\n\r\n                                    }\r\n\r\n                                    if (item.id !== 'saveOptions') {\r\n                                        return (\r\n                                            <Button key={key}\r\n                                                    data-tip={item.title}\r\n                                                    data-place={'top'}\r\n                                                    disabled={disableAttr}\r\n                                                    className={item.showMe\r\n                                                        ? undefined\r\n                                                        : 'd-none'\r\n                                                    }\r\n                                                    onClick={item.clickEvent === 'import'\r\n                                                        ? this.props.setModalImport\r\n                                                        : item.clickEvent === 'edit'\r\n                                                            ? this.props.editClick\r\n                                                            : item.clickEvent === 'new'\r\n                                                                ? this.props.newClick\r\n                                                                : item.clickEvent === 'history'\r\n                                                                    ? this.props.historyToggle\r\n                                                                    : item.clickEvent === 'export'\r\n                                                                        ? this.props.setModalExport\r\n                                                                        : undefined\r\n                                                    }\r\n                                                    color={item.btnClass}>\r\n                                                <i className={`icon ${item.icon}`}/>\r\n                                            </Button>\r\n                                        )\r\n                                    } else if (item.id === 'saveOptions' && this.props.editOn) {\r\n\r\n                                        return (\r\n\r\n                                            <div className=\"dropdown\" key={key}>\r\n                                                <Button data-tip={item.title}\r\n                                                        data-place={'top'}\r\n                                                        color={item.btnClass}\r\n                                                        data-toggle=\"dropdown\">\r\n                                                    <i className={`icon ${item.icon}`}/>\r\n                                                </Button>\r\n                                                <div className=\"dropdown-menu dropdown-menu-right\">\r\n                                                    {item.children.map((child, childKey) => {\r\n\r\n                                                        const showOption = this.props.newRowAdded === true\r\n                                                            ? child.showOnNewRow\r\n                                                            : true;\r\n\r\n                                                        const divClass = `${child.class} ${\r\n                                                            (showOption) ? '' : ' d-none'\r\n                                                            }`;\r\n\r\n                                                        return (\r\n                                                            <div className={divClass}\r\n                                                               onClick={child.clickEvent === 'cancel'\r\n                                                                   ? this.props.cancelClick\r\n                                                                   : child.clickEvent === 'save-history'\r\n                                                                       ? this.props.saveHistoryClick\r\n                                                                       : child.clickEvent === 'save'\r\n                                                                           ? this.props.saveClick\r\n                                                                           : undefined\r\n                                                               }\r\n                                                               key={childKey}>\r\n                                                                <i className={`icon ${child.icon} mr-2`}/>\r\n                                                                {child.title}\r\n                                                            </div>\r\n                                                        )\r\n                                                    })\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                })\r\n                                }\r\n                                </ButtonGroup>\r\n\r\n                                <MaximizeContent/>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        language: state.language,\r\n        editOn: state.editOn\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModalImport: () => dispatch(modalImportToggle()),\r\n        setModalExport: () => dispatch(modalExportToggle())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToolbarMatrix);"]},"metadata":{},"sourceType":"module"}