{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soperasyon27\\\\Desktop\\\\FE\\\\src18mart\\\\src\\\\src\\\\components\\\\ModalImport.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { modalImportToggle, spinnerToggle, setImportPolling } from \"../redux/actions\";\nimport FileUploadProgress from 'react-fileupload-progress';\nimport XLSX from \"xlsx\";\nimport { groupingMap } from '../matrixDataMap';\nimport RestApiModule from '../RestApiModule';\nimport { Row, Col, Card, CardBody, CardTitle, CardText, CardHeader, Alert, Button } from 'reactstrap';\nimport { saveAs } from 'file-saver'; // Alert module import\n\nimport AlertModule from '../AlertModule';\n\nclass ModalImport extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: null,\n      isExcelHeadersValid: null,\n      progress: -1,\n      showButton1: true,\n      showButton2: false,\n      showButton3: false,\n      showLongWaitMessage: false\n    };\n    this.fileJSON = {};\n    this.data = [];\n    this.cols = []; //const {REACT_APP_API_GATEWAY, REACT_APP_MATRIX_SERVICE} = process.env;\n    //`${REACT_APP_API_GATEWAY}${REACT_APP_MATRIX_SERVICE}/ImportDataMatrixFromExcel`;\n\n    this.restApi = new RestApiModule();\n    this.alert = new AlertModule();\n    this.fileInput = React.createRef();\n    this.uploadFileUrl = this.restApi.getImportEndpoint('importData');\n    this.styleBar = {\n      width: 0\n    };\n    this.progressAction = null; // handle interval\n\n    this.timePassed = 0;\n  }\n\n  handleSelectFile(e) {\n    function checkFileType(file) {\n      const allowedTypes = process.env.REACT_APP_ACCEPTED_IMPORT_FILE_EXT.split(\",\");\n      const extension = file.name.substring(file.name.lastIndexOf('.'));\n      return allowedTypes.includes(extension);\n    }\n\n    const files = e.target.files;\n    if (files && files[0]) if (checkFileType(files[0])) {\n      this.setState({\n        file: files[0],\n        showButton2: true,\n        isExcelHeadersValid: null\n      });\n    } else {\n      const {\n        language\n      } = this.props;\n      this.alert.showMessage(\"error\", language.importSection.wrongFileExtTitle, language.importSection.wrongFileExt, false);\n    }\n  }\n\n  handleFile() {\n    /* Boilerplate to set up FileReader */\n    this.props.setSpinner();\n\n    try {\n      const reader = new FileReader();\n      const rABS = !!reader.readAsBinaryString;\n\n      reader.onload = e => {\n        /* Parse data */\n        const bstr = e.target.result;\n        const wb = XLSX.read(bstr, {\n          type: rABS ? 'binary' : 'array',\n          bookVBA: true,\n          sheetRows: 0\n        });\n        /* Get first worksheet */\n\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n\n        const data = XLSX.utils.sheet_to_json(ws, {\n          header: 1,\n          defval: \"\"\n        });\n        /* Store the json data */\n\n        this.fileJSON = JSON.stringify(data, null, 2);\n        this.handleJSONHeaders();\n        this.props.setSpinner();\n      };\n\n      if (rABS) {\n        reader.readAsBinaryString(this.state.file);\n      } else {\n        reader.readAsArrayBuffer(this.state.file);\n      }\n    } catch (e) {\n      this.setState({\n        showButton3: false\n      });\n      this.props.setSpinner();\n    }\n  }\n\n  handleJSONHeaders() {\n    const headerMap = JSON.parse(JSON.stringify(groupingMap));\n    const excelHeadersArray = JSON.parse(this.fileJSON)[1];\n    const columnsMap = headerMap.reduce((fullArr, item) => {\n      const cols = item.columns.reduce((arr, col) => {\n        if (col.importColumnId !== undefined) arr.push(col.importColumnId);\n        return arr;\n      }, []);\n      return [...fullArr, ...cols];\n    }, []);\n    const isSame = JSON.stringify(excelHeadersArray).replace(/ /g, '').toLowerCase() === JSON.stringify(columnsMap).toLowerCase();\n    this.setState({\n      isExcelHeadersValid: isSame,\n      showButton3: isSame,\n      showButton2: !isSame\n    });\n\n    if (!isSame) {\n      this.setState({\n        file: null,\n        showButton2: false\n      });\n    }\n  }\n\n  downloadLogFile() {\n    const {\n      importActionResponse\n    } = this.state;\n\n    if (importActionResponse) {\n      const today = new Date();\n      const todayDate = '_' + today.getDate() + today.toLocaleString('default', {\n        month: 'long'\n      }) + today.getFullYear();\n      const {\n        importResult\n      } = JSON.parse(importActionResponse);\n      const {\n        log\n      } = importResult[0];\n      const blob = new Blob([log], {\n        type: \"text/plain;charset=utf-8\"\n      });\n      saveAs(blob, `importDetailedLog${todayDate}.txt`);\n    }\n  }\n\n  toggle() {\n    this.setState({\n      file: null,\n      isExcelHeadersValid: null,\n      importActionResponse: null,\n      showButton2: false,\n      showButton3: false,\n      progress: -1\n    });\n    this.props.setModalImport();\n  }\n\n  customFormRenderer(onSubmit) {\n    const {\n      language,\n      token\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: 'success',\n      size: \"lg\",\n      block: true,\n      hidden: !this.state.showButton3,\n      onClick: e => {\n        this.restApi.callApi(\"getLocksCount\", {\n          token\n        }).then(res => {\n          const {\n            count\n          } = res.locksCount;\n          const lockCountMessage = language.importSection.locksCountForLastStep.replace('{count}', count);\n          this.alert.getConfirmation(\"warning\", language.importSection.warningTitleForLastStep, `${language.importSection.warningMessageForLastStep}<br><br>${lockCountMessage}`).then(response => {\n            if (response === true) {\n              // if user start an import action do not make observable request for check import status\n              this.props.setImportPolling(false);\n              this.restApi.callApi('getImportStatus', {\n                token\n              }).then(response => {\n                const {\n                  islock,\n                  uname\n                } = response.isImportOngoing;\n\n                if (!islock) {\n                  this.setState({\n                    showButton3: false\n                  });\n                  onSubmit(e);\n                } else {\n                  const message = language.importSection.ongoingImportText.replace('{username}', uname);\n                  this.alert.showMessage('warning', language.importSection.ongoingImportTitle, message);\n                }\n              });\n            }\n          });\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }\n    }, language.upload, /*#__PURE__*/React.createElement(\"i\", {\n      className: `icon icon-upload ml-2`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n  formGetter() {\n    return JSON.stringify({\n      token: this.props.token,\n      importedExcelAsJSON: this.fileJSON\n    });\n  }\n\n  customProgressRenderer(progressFile, hasError, cancelHandler) {\n    const {\n      language\n    } = this.props;\n\n    function countOfRowsText(count) {\n      return +count > 1 ? `${count} ${language.importSection.rows}` : `${count} ${language.importSection.rows.slice(0, -1)}`;\n    }\n\n    const {\n      progress\n    } = this.state;\n\n    if (hasError || progress > -1) {\n      let progressBar = Object.assign({}, this.styleBar);\n      progressBar.width = `${progress}%`;\n      let result = null;\n      const {\n        importActionResponse,\n        showLongWaitMessage\n      } = this.state;\n\n      if (importActionResponse && progress === 100) {\n        const jsonResponse = JSON.parse(importActionResponse);\n        const {\n          importResult,\n          exec_status,\n          error_code,\n          error_message\n        } = jsonResponse;\n        if (importResult) result = importResult[0];\n\n        if (exec_status === \"error\") {\n          this.setState({\n            progress: 0,\n            showLongWaitMessage: false\n          });\n          const message = error_message ? error_message : \"Null exception\";\n\n          if (+error_code === 10) {\n            this.alert.showMessage('error', 'Error', message, true);\n          } else {\n            this.alert.showMessage('error', 'Error', message, false);\n          }\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, null, !hasError && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"progressWrapper text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 37\n        }\n      }, \"Import progress: \", `${progress}%`), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"progressBar\",\n        style: progressBar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 37\n        }\n      })))), showLongWaitMessage && /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Alert, {\n        color: \"warning\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 33\n        }\n      }, language.importSection.longTimeWaitMessageForUpload)))), hasError && /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Alert, {\n        color: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"icon icon-triangle-warning mr-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 33\n        }\n      }), language.importSection.progressError))), progress === 100 && result && !hasError && /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        body: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(CardHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 33\n        }\n      }, language.importSection.summaryLabel), /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        color: \"primary\",\n        inverse: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(CardTitle, {\n        tag: \"h5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 53\n        }\n      }, language.importSection.totalRowCount), /*#__PURE__*/React.createElement(CardText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 53\n        }\n      }, language.importSection.totalRowText), /*#__PURE__*/React.createElement(Alert, {\n        tag: \"h4\",\n        color: \"info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 53\n        }\n      }, countOfRowsText(result.totalcount))))), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        color: \"success\",\n        inverse: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(CardTitle, {\n        tag: \"h5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 53\n        }\n      }, language.importSection.successRowCount), /*#__PURE__*/React.createElement(CardText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 53\n        }\n      }, language.importSection.successRowText), /*#__PURE__*/React.createElement(Alert, {\n        tag: \"h4\",\n        color: \"info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 53\n        }\n      }, countOfRowsText(result.successCount))))), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        color: \"danger\",\n        inverse: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(CardTitle, {\n        tag: \"h5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 53\n        }\n      }, language.importSection.failedRowCount), /*#__PURE__*/React.createElement(CardText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 53\n        }\n      }, language.importSection.failedRowText), /*#__PURE__*/React.createElement(Alert, {\n        tag: \"h4\",\n        color: \"info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 53\n        }\n      }, countOfRowsText(result.errorcount)))))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        color: \"primary\",\n        className: \"mt-3\",\n        block: true,\n        size: \"lg\",\n        onClick: this.downloadLogFile.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 45\n        }\n      }, language.importSection.downloadLogFile, /*#__PURE__*/React.createElement(\"i\", {\n        className: `icon icon-download-save ml-2`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 49\n        }\n      })))))))));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n  render() {\n    const {\n      language,\n      loadAfterImport\n    } = this.props;\n\n    if (language) {\n      return /*#__PURE__*/React.createElement(Modal, {\n        isOpen: this.props.open,\n        size: 'lg',\n        centered: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ModalHeader, {\n        toggle: this.toggle.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 21\n        }\n      }, language.importDataMatrixFile), /*#__PURE__*/React.createElement(ModalBody, {\n        className: 'import-file',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        ref: fileInput => this.fileInput = fileInput,\n        type: \"file\",\n        accept: process.env.REACT_APP_ACCEPTED_IMPORT_FILE_TYPE,\n        onChange: this.handleSelectFile.bind(this),\n        hidden: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: '12',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 29\n        }\n      }, !this.state.file && /*#__PURE__*/React.createElement(\"div\", {\n        className: 'choose-file-wrapper',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"chose-file\",\n        onClick: () => this.fileInput.click(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 37\n        }\n      }, language.chooseFile)), this.state.file && /*#__PURE__*/React.createElement(\"div\", {\n        className: 'choose-file-wrapper',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 37\n        }\n      }, language.importSection.selectedFileLabel, this.state.file.name))), /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 29\n        }\n      }, this.state.showButton2 && /*#__PURE__*/React.createElement(Button, {\n        color: 'primary',\n        className: 'mt-3 mb-3',\n        size: \"lg\",\n        block: true,\n        onClick: this.handleFile.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 33\n        }\n      }, language.validate, /*#__PURE__*/React.createElement(\"i\", {\n        className: `icon icon-file ml-2`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 37\n        }\n      })), this.state.isExcelHeadersValid === true && /*#__PURE__*/React.createElement(Alert, {\n        color: \"success\",\n        className: 'mt-2',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: `icon icon-check mr-2`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 37\n        }\n      }), language.importSection.selectedFileValid), this.state.isExcelHeadersValid === false && /*#__PURE__*/React.createElement(Alert, {\n        color: \"danger\",\n        className: 'mt-2',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: `icon icon-cross mr-2`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 37\n        }\n      }), language.importSection.selectedFileNotValid))), /*#__PURE__*/React.createElement(FileUploadProgress, {\n        url: this.uploadFileUrl,\n        method: \"POST\",\n        beforeSend: request => {\n          this.props.setSpinner();\n          this.setState({\n            progress: Math.floor(Math.random() * 8) + 5\n          });\n          request.setRequestHeader('Content-Type', 'application/json;charset=UTF-8'); // Wee need that workaround because we dont know when server will give response.\n\n          this.progressAction = setInterval(() => {\n            this.timePassed += 2500;\n            console.log(this.timePassed);\n\n            if (this.timePassed > 60000) {\n              this.setState({\n                showLongWaitMessage: true\n              });\n            }\n\n            if (this.state.progress <= 92) {\n              let increase = Math.floor(Math.random() * 2) + 3;\n              this.setState({\n                progress: increase + +this.state.progress\n              });\n            }\n          }, 2500);\n          return request;\n        },\n        onProgress: (e, request, progress) => {// empty event, maybe we need this event for later\n        },\n        onLoad: (e, request) => {\n          clearInterval(this.progressAction);\n          setTimeout(() => {\n            // Wait a little time to get correct data structure from response\n            this.setState({\n              progress: 100,\n              showLongWaitMessage: false,\n              importActionResponse: request.response\n            }, () => {\n              // After set state execute load data action\n              const {\n                exec_status\n              } = JSON.parse(this.state.importActionResponse);\n\n              if (exec_status === \"success\") {\n                // Import finish successfully, then reload the data.\n                if (this.state.progress === 100) {\n                  loadAfterImport(); // app should restart make observable request for control import status\n\n                  this.props.setImportPolling(true);\n                }\n              }\n\n              this.props.setSpinner();\n            });\n          }, 200);\n        },\n        onError: (e, request) => {\n          this.setState({\n            progress: 0,\n            showLongWaitMessage: false\n          }, () => {\n            clearInterval(this.progressAction);\n            this.props.setSpinner();\n          });\n        },\n        onAbort: (e, request) => {\n          this.setState({\n            progress: 0,\n            showLongWaitMessage: false\n          }, () => {\n            clearInterval(this.progressAction);\n            this.props.setSpinner();\n          });\n        },\n        formGetter: this.formGetter.bind(this),\n        formRenderer: this.customFormRenderer.bind(this),\n        progressRenderer: this.customProgressRenderer.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 25\n        }\n      })));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    open: state.modalImportToggle,\n    import: state.import,\n    language: state.language,\n    token: state.token\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setModalImport: () => dispatch(modalImportToggle()),\n    setSpinner: () => dispatch(spinnerToggle()),\n    setImportPolling: data => dispatch(setImportPolling(data))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalImport);","map":{"version":3,"sources":["C:/Users/soperasyon27/Desktop/FE/src18mart/src/src/components/ModalImport.jsx"],"names":["React","connect","Modal","ModalHeader","ModalBody","modalImportToggle","spinnerToggle","setImportPolling","FileUploadProgress","XLSX","groupingMap","RestApiModule","Row","Col","Card","CardBody","CardTitle","CardText","CardHeader","Alert","Button","saveAs","AlertModule","ModalImport","Component","constructor","props","state","file","isExcelHeadersValid","progress","showButton1","showButton2","showButton3","showLongWaitMessage","fileJSON","data","cols","restApi","alert","fileInput","createRef","uploadFileUrl","getImportEndpoint","styleBar","width","progressAction","timePassed","handleSelectFile","e","checkFileType","allowedTypes","process","env","REACT_APP_ACCEPTED_IMPORT_FILE_EXT","split","extension","name","substring","lastIndexOf","includes","files","target","setState","language","showMessage","importSection","wrongFileExtTitle","wrongFileExt","handleFile","setSpinner","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","sheetRows","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","defval","JSON","stringify","handleJSONHeaders","readAsArrayBuffer","headerMap","parse","excelHeadersArray","columnsMap","reduce","fullArr","item","columns","arr","col","importColumnId","undefined","push","isSame","replace","toLowerCase","downloadLogFile","importActionResponse","today","Date","todayDate","getDate","toLocaleString","month","getFullYear","importResult","log","blob","Blob","toggle","setModalImport","customFormRenderer","onSubmit","token","callApi","then","res","count","locksCount","lockCountMessage","locksCountForLastStep","getConfirmation","warningTitleForLastStep","warningMessageForLastStep","response","islock","uname","isImportOngoing","message","ongoingImportText","ongoingImportTitle","upload","formGetter","importedExcelAsJSON","customProgressRenderer","progressFile","hasError","cancelHandler","countOfRowsText","rows","slice","progressBar","Object","assign","jsonResponse","exec_status","error_code","error_message","longTimeWaitMessageForUpload","progressError","summaryLabel","totalRowCount","totalRowText","totalcount","successRowCount","successRowText","successCount","failedRowCount","failedRowText","errorcount","bind","render","loadAfterImport","open","importDataMatrixFile","REACT_APP_ACCEPTED_IMPORT_FILE_TYPE","click","chooseFile","selectedFileLabel","validate","selectedFileValid","selectedFileNotValid","request","Math","floor","random","setRequestHeader","setInterval","console","increase","clearInterval","setTimeout","mapStateToProps","import","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Modal, ModalHeader, ModalBody} from 'reactstrap';\r\nimport {modalImportToggle, spinnerToggle, setImportPolling} from \"../redux/actions\";\r\nimport FileUploadProgress from 'react-fileupload-progress';\r\nimport XLSX from \"xlsx\";\r\nimport {groupingMap} from '../matrixDataMap';\r\nimport RestApiModule from '../RestApiModule';\r\nimport {Row, Col, Card, CardBody, CardTitle, CardText, CardHeader, Alert, Button} from 'reactstrap';\r\nimport {saveAs} from 'file-saver';\r\n\r\n// Alert module import\r\nimport AlertModule from '../AlertModule'\r\n\r\nclass ModalImport extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file: null,\r\n            isExcelHeadersValid: null,\r\n            progress: -1,\r\n            showButton1: true,\r\n            showButton2: false,\r\n            showButton3: false,\r\n            showLongWaitMessage: false\r\n        }\r\n\r\n        this.fileJSON = {};\r\n        this.data = [];\r\n        this.cols = [];\r\n        //const {REACT_APP_API_GATEWAY, REACT_APP_MATRIX_SERVICE} = process.env;\r\n        //`${REACT_APP_API_GATEWAY}${REACT_APP_MATRIX_SERVICE}/ImportDataMatrixFromExcel`;\r\n\r\n        this.restApi = new RestApiModule();\r\n        this.alert = new AlertModule();\r\n\r\n        this.fileInput = React.createRef();\r\n        this.uploadFileUrl = this.restApi.getImportEndpoint('importData');\r\n\r\n        this.styleBar = {\r\n            width: 0,\r\n        }\r\n\r\n        this.progressAction = null; // handle interval\r\n        this.timePassed = 0;\r\n\r\n    }\r\n\r\n    handleSelectFile(e) {\r\n        function checkFileType(file) {\r\n            const allowedTypes = process.env.REACT_APP_ACCEPTED_IMPORT_FILE_EXT.split(\",\");\r\n            const extension = file.name.substring(file.name.lastIndexOf('.'));\r\n            return allowedTypes.includes(extension);\r\n        }\r\n\r\n        const files = e.target.files;\r\n\r\n        if (files && files[0])\r\n            if (checkFileType(files[0])) {\r\n                this.setState({\r\n                    file: files[0],\r\n                    showButton2: true,\r\n                    isExcelHeadersValid: null\r\n                });\r\n            } else {\r\n                const {language} = this.props;\r\n                this.alert.showMessage(\"error\",\r\n                    language.importSection.wrongFileExtTitle,\r\n                    language.importSection.wrongFileExt,\r\n                    false)\r\n            }\r\n    };\r\n\r\n    handleFile() {\r\n        /* Boilerplate to set up FileReader */\r\n        this.props.setSpinner();\r\n        try {\r\n\r\n            const reader = new FileReader();\r\n            const rABS = !!reader.readAsBinaryString;\r\n            reader.onload = (e) => {\r\n                /* Parse data */\r\n                const bstr = e.target.result;\r\n                const wb = XLSX.read(bstr, {type: rABS ? 'binary' : 'array', bookVBA: true, sheetRows: 0});\r\n                /* Get first worksheet */\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n\r\n                /* Convert array of arrays */\r\n                const data = XLSX.utils.sheet_to_json(ws, {\r\n                    header: 1,\r\n                    defval: \"\"\r\n                });\r\n\r\n                /* Store the json data */\r\n                this.fileJSON = JSON.stringify(data, null, 2);\r\n\r\n                this.handleJSONHeaders();\r\n\r\n                this.props.setSpinner();\r\n            };\r\n\r\n            if (rABS) {\r\n                reader.readAsBinaryString(this.state.file);\r\n            } else {\r\n                reader.readAsArrayBuffer(this.state.file);\r\n            }\r\n\r\n\r\n        } catch (e) {\r\n            this.setState({showButton3: false})\r\n            this.props.setSpinner();\r\n        }\r\n\r\n    }\r\n\r\n    handleJSONHeaders() {\r\n\r\n        const headerMap = JSON.parse(JSON.stringify(groupingMap));\r\n        const excelHeadersArray = (JSON.parse(this.fileJSON))[1];\r\n\r\n        const columnsMap = headerMap.reduce((fullArr, item) => {\r\n            const cols = item.columns.reduce((arr, col) => {\r\n                if (col.importColumnId !== undefined) arr.push(col.importColumnId)\r\n                return arr;\r\n            }, []);\r\n            return [...fullArr, ...cols]\r\n        }, [])\r\n\r\n        const isSame = JSON.stringify(excelHeadersArray).replace(/ /g, '').toLowerCase() === JSON.stringify(columnsMap).toLowerCase();\r\n        this.setState({isExcelHeadersValid: isSame, showButton3: isSame, showButton2: !isSame});\r\n\r\n        if (!isSame) {\r\n            this.setState({file: null, showButton2: false})\r\n        }\r\n    }\r\n\r\n    downloadLogFile() {\r\n        const {importActionResponse} = this.state;\r\n        if (importActionResponse) {\r\n            const today = new Date();\r\n            const todayDate = '_' + today.getDate() + (today.toLocaleString('default', {month: 'long'})) + today.getFullYear();\r\n\r\n            const {importResult} = JSON.parse(importActionResponse);\r\n            const {log} = importResult[0];\r\n\r\n            const blob = new Blob([log], {type: \"text/plain;charset=utf-8\"});\r\n            saveAs(blob, `importDetailedLog${todayDate}.txt`);\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            file: null,\r\n            isExcelHeadersValid: null,\r\n            importActionResponse: null,\r\n            showButton2: false,\r\n            showButton3: false,\r\n            progress: -1\r\n        })\r\n        this.props.setModalImport();\r\n    }\r\n\r\n    customFormRenderer(onSubmit) {\r\n        const {language, token} = this.props;\r\n\r\n        return (\r\n            <Row>\r\n                <Col>\r\n                    <Button color={'success'} size={\"lg\"} block\r\n                            hidden={!this.state.showButton3}\r\n                            onClick={(e) => {\r\n\r\n                                this.restApi.callApi(\"getLocksCount\", {\r\n                                    token\r\n                                }).then(res => {\r\n\r\n                                    const {count} = res.locksCount;\r\n                                    const lockCountMessage = language.importSection.locksCountForLastStep.replace('{count}', count);\r\n\r\n                                    this.alert.getConfirmation(\r\n                                        \"warning\",\r\n                                        language.importSection.warningTitleForLastStep,\r\n                                        `${language.importSection.warningMessageForLastStep}<br><br>${lockCountMessage}`\r\n                                    ).then(response => {\r\n\r\n                                        if (response === true) {\r\n\r\n                                            // if user start an import action do not make observable request for check import status\r\n                                            this.props.setImportPolling(false);\r\n\r\n                                            this.restApi.callApi('getImportStatus', {\r\n                                                token\r\n                                            }).then(response => {\r\n\r\n                                                const {islock, uname} = response.isImportOngoing\r\n\r\n                                                if (!islock) {\r\n                                                    this.setState({showButton3: false});\r\n                                                    onSubmit(e)\r\n                                                } else {\r\n\r\n                                                    const message = language.importSection.ongoingImportText.replace('{username}', uname);\r\n\r\n                                                    this.alert.showMessage(\r\n                                                        'warning',\r\n                                                        language.importSection.ongoingImportTitle,\r\n                                                        message\r\n                                                    )\r\n                                                }\r\n                                            })\r\n                                        }\r\n                                    })\r\n                                })\r\n                            }}>\r\n                        {language.upload}\r\n                        <i className={`icon icon-upload ml-2`}/>\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    formGetter() {\r\n        return JSON.stringify({\r\n            token: this.props.token,\r\n            importedExcelAsJSON: this.fileJSON\r\n        });\r\n    }\r\n\r\n    customProgressRenderer(progressFile, hasError, cancelHandler) {\r\n        const {language} = this.props;\r\n\r\n        function countOfRowsText(count) {\r\n            return +count > 1\r\n                ? `${count} ${language.importSection.rows}`\r\n                : `${count} ${language.importSection.rows.slice(0, -1)}`\r\n        }\r\n\r\n        const {progress} = this.state;\r\n\r\n        if (hasError || progress > -1) {\r\n\r\n            let progressBar = Object.assign({}, this.styleBar);\r\n            progressBar.width = `${progress}%`;\r\n\r\n            let result = null;\r\n            const {importActionResponse, showLongWaitMessage} = this.state;\r\n\r\n            if (importActionResponse && progress === 100) {\r\n\r\n                const jsonResponse = JSON.parse(importActionResponse);\r\n                const {importResult, exec_status, error_code, error_message} = jsonResponse;\r\n\r\n                if (importResult) result = importResult[0];\r\n\r\n                if (exec_status === \"error\") {\r\n\r\n                    this.setState({progress: 0, showLongWaitMessage: false})\r\n\r\n                    const message = error_message ? error_message : \"Null exception\";\r\n\r\n                    if (+error_code === 10) {\r\n                        this.alert.showMessage('error', 'Error', message, true);\r\n                    } else {\r\n                        this.alert.showMessage('error', 'Error', message, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    {!hasError &&\r\n                    <>\r\n                        <Row>\r\n                            <Col>\r\n                                <div className={\"progressWrapper text-center\"}>\r\n                                    <span>Import progress: {`${progress}%`}</span>\r\n                                    <div className={\"progressBar\"} style={progressBar}/>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        {showLongWaitMessage &&\r\n                        <Row>\r\n                            <Col>\r\n                                <Alert color={\"warning\"}>\r\n                                    {language.importSection.longTimeWaitMessageForUpload}\r\n                                </Alert>\r\n                            </Col>\r\n                        </Row>\r\n                        }\r\n                    </>\r\n                    }\r\n\r\n                    {hasError &&\r\n                    <Row>\r\n                        <Col>\r\n                            <Alert color={\"danger\"}>\r\n                                <i className=\"icon icon-triangle-warning mr-2\"/>\r\n                                {language.importSection.progressError}\r\n                            </Alert>\r\n                        </Col>\r\n                    </Row>\r\n                    }\r\n\r\n                    {(progress === 100 && result && !hasError) &&\r\n                    <Row>\r\n                        <Col>\r\n                            <Card body={false}>\r\n                                <CardHeader>\r\n                                    {language.importSection.summaryLabel}\r\n                                </CardHeader>\r\n                                <CardBody>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Card color={\"primary\"} inverse>\r\n                                                <CardBody>\r\n                                                    <CardTitle tag={\"h5\"}>\r\n                                                        {language.importSection.totalRowCount}\r\n                                                    </CardTitle>\r\n                                                    <CardText>{language.importSection.totalRowText}</CardText>\r\n                                                    <Alert tag={\"h4\"} color={\"info\"}>\r\n                                                        {countOfRowsText(result.totalcount)}\r\n                                                    </Alert>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Card color={\"success\"} inverse>\r\n                                                <CardBody>\r\n                                                    <CardTitle tag={\"h5\"}>\r\n                                                        {language.importSection.successRowCount}\r\n                                                    </CardTitle>\r\n                                                    <CardText>{language.importSection.successRowText}</CardText>\r\n                                                    <Alert tag={\"h4\"} color={\"info\"}>\r\n                                                        {countOfRowsText(result.successCount)}\r\n                                                    </Alert>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Card color={\"danger\"} inverse>\r\n                                                <CardBody>\r\n                                                    <CardTitle tag={\"h5\"}>\r\n                                                        {language.importSection.failedRowCount}\r\n                                                    </CardTitle>\r\n                                                    <CardText>{language.importSection.failedRowText}</CardText>\r\n                                                    <Alert tag={\"h4\"} color={\"info\"}>\r\n                                                        {countOfRowsText(result.errorcount)}\r\n                                                    </Alert>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <hr/>\r\n                                            <Button color={\"primary\"} className={\"mt-3\"} block size={\"lg\"}\r\n                                                    onClick={this.downloadLogFile.bind(this)}>\r\n                                                {language.importSection.downloadLogFile}\r\n                                                <i className={`icon icon-download-save ml-2`}/>\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                    }\r\n                </>\r\n            );\r\n\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {language, loadAfterImport} = this.props;\r\n\r\n        if (language) {\r\n            return (\r\n                <Modal isOpen={this.props.open} size={'lg'} centered={true}>\r\n                    <ModalHeader toggle={this.toggle.bind(this)}>{language.importDataMatrixFile}</ModalHeader>\r\n                    <ModalBody className={'import-file'}>\r\n\r\n                        <input ref={fileInput => this.fileInput = fileInput} type=\"file\"\r\n                               accept={process.env.REACT_APP_ACCEPTED_IMPORT_FILE_TYPE}\r\n                               onChange={this.handleSelectFile.bind(this)} hidden={true}/>\r\n\r\n                        <Row>\r\n                            <Col md={'12'}>\r\n                                {!this.state.file &&\r\n                                <div className={'choose-file-wrapper'}>\r\n                                    <Button className={\"chose-file\"} onClick={() => this.fileInput.click()}>\r\n                                        {language.chooseFile}\r\n                                    </Button>\r\n                                </div>\r\n                                }\r\n                                {this.state.file &&\r\n                                <div className={'choose-file-wrapper'}>\r\n                                    <h4>\r\n                                        {language.importSection.selectedFileLabel}\r\n                                        {this.state.file.name}\r\n                                    </h4>\r\n                                </div>\r\n                                }\r\n                            </Col>\r\n                            <hr/>\r\n                            <Col>\r\n                                {this.state.showButton2 &&\r\n                                <Button color={'primary'} className={'mt-3 mb-3'} size={\"lg\"} block\r\n                                        onClick={this.handleFile.bind(this)}>\r\n                                    {language.validate}\r\n                                    <i className={`icon icon-file ml-2`}/>\r\n                                </Button>\r\n                                }\r\n                                {this.state.isExcelHeadersValid === true &&\r\n                                <Alert color=\"success\" className={'mt-2'}>\r\n                                    <i className={`icon icon-check mr-2`}/>\r\n                                    {language.importSection.selectedFileValid}\r\n                                </Alert>\r\n                                }\r\n                                {this.state.isExcelHeadersValid === false &&\r\n                                <Alert color=\"danger\" className={'mt-2'}>\r\n                                    <i className={`icon icon-cross mr-2`}/>\r\n                                    {language.importSection.selectedFileNotValid}\r\n                                </Alert>\r\n                                }\r\n                            </Col>\r\n\r\n                        </Row>\r\n\r\n                        <FileUploadProgress\r\n                            url={this.uploadFileUrl}\r\n                            method={\"POST\"}\r\n                            beforeSend={(request) => {\r\n                                this.props.setSpinner();\r\n                                this.setState({progress: Math.floor(Math.random() * 8) + 5});\r\n                                request.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\r\n\r\n                                // Wee need that workaround because we dont know when server will give response.\r\n                                this.progressAction = setInterval(() => {\r\n\r\n                                    this.timePassed += 2500;\r\n                                    console.log(this.timePassed);\r\n                                    if (this.timePassed > 60000) {\r\n                                        this.setState({showLongWaitMessage: true})\r\n                                    }\r\n\r\n                                    if (this.state.progress <= 92) {\r\n                                        let increase = Math.floor(Math.random() * 2) + 3;\r\n                                        this.setState({\r\n                                            progress: increase + +this.state.progress\r\n                                        });\r\n                                    }\r\n                                }, 2500)\r\n\r\n                                return request\r\n                            }}\r\n                            onProgress={(e, request, progress) => {\r\n                                // empty event, maybe we need this event for later\r\n                            }}\r\n                            onLoad={(e, request) => {\r\n                                clearInterval(this.progressAction);\r\n\r\n                                setTimeout(() => {\r\n                                    // Wait a little time to get correct data structure from response\r\n                                    this.setState(\r\n                                        {\r\n                                            progress: 100,\r\n                                            showLongWaitMessage: false,\r\n                                            importActionResponse: request.response\r\n                                        }, () => {\r\n                                            // After set state execute load data action\r\n                                            const {exec_status} = JSON.parse(this.state.importActionResponse);\r\n\r\n                                            if (exec_status === \"success\") {\r\n                                                // Import finish successfully, then reload the data.\r\n                                                if (this.state.progress === 100) {\r\n                                                    loadAfterImport();\r\n\r\n                                                    // app should restart make observable request for control import status\r\n                                                    this.props.setImportPolling(true);\r\n\r\n                                                }\r\n                                            }\r\n                                            this.props.setSpinner();\r\n                                        });\r\n                                }, 200);\r\n                            }}\r\n                            onError={(e, request) => {\r\n                                this.setState({progress: 0, showLongWaitMessage: false}, () => {\r\n                                    clearInterval(this.progressAction);\r\n                                    this.props.setSpinner();\r\n                                })\r\n                            }}\r\n                            onAbort={(e, request) => {\r\n                                this.setState({progress: 0, showLongWaitMessage: false}, () => {\r\n                                    clearInterval(this.progressAction);\r\n                                    this.props.setSpinner();\r\n                                })\r\n                            }}\r\n                            formGetter={this.formGetter.bind(this)}\r\n                            formRenderer={this.customFormRenderer.bind(this)}\r\n                            progressRenderer={this.customProgressRenderer.bind(this)}\r\n\r\n                        />\r\n                    </ModalBody>\r\n\r\n                </Modal>\r\n            )\r\n        } else {\r\n            return (<></>)\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        open: state.modalImportToggle,\r\n        import: state.import,\r\n        language: state.language,\r\n        token: state.token\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModalImport: () => dispatch(modalImportToggle()),\r\n        setSpinner: () => dispatch(spinnerToggle()),\r\n        setImportPolling: (data) => dispatch(setImportPolling(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalImport);"]},"metadata":{},"sourceType":"module"}