{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\components\\\\TopologyToolbar.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport MaximizeContent from \"./MaximizeContent\";\nimport { Button, Card, CardBody, Row, Col, Input } from 'reactstrap';\nimport html2canvas from \"html2canvas\";\nimport { saveAs } from 'file-saver';\nimport 'canvas-toBlob';\nimport dataURLtoBlob from 'blueimp-canvas-to-blob';\n\nclass TopologyToolbar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  handleSnapshotClick() {\n    const _this$props = this.props,\n          diagramAreaId = _this$props.diagramAreaId,\n          snapshotFileName = _this$props.snapshotFileName,\n          topologyLevel = _this$props.topologyLevel;\n    const elem = document.getElementById(diagramAreaId);\n\n    if (elem) {\n      const nav = elem.querySelector('.vis-navigation');\n      let card = null;\n\n      if (topologyLevel === 2) {\n        card = elem.querySelector('.card');\n        card.classList.add('d-none');\n      }\n\n      nav.classList.add('d-none');\n      html2canvas(elem).then(function (canvas) {\n        const blob = dataURLtoBlob(canvas.toDataURL());\n        saveAs(blob, snapshotFileName);\n        nav.classList.remove('d-none');\n        if (topologyLevel === 2) card.classList.remove('d-none');\n      });\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          language = _this$props2.language,\n          labels = _this$props2.labels,\n          topologyLevel = _this$props2.topologyLevel,\n          wrapper = _this$props2.wrapper,\n          handleAggregSiteChange = _this$props2.handleAggregSiteChange,\n          handleRegionChange = _this$props2.handleRegionChange,\n          handleSelectNode = _this$props2.handleSelectNode;\n    const snapShotButtonOffset = topologyLevel === 1 ? 'offset-6' : 'offset-8';\n\n    if (language && labels !== null) {\n      return React.createElement(Card, {\n        className: wrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, topologyLevel === 1 && React.createElement(Col, {\n        xs: 4,\n        sm: 3,\n        md: 2,\n        lg: 2,\n        xl: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: 'select',\n        className: 'custom-select',\n        onChange: ev => handleRegionChange(ev.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Load by Region\"), React.createElement(\"option\", {\n        value: \"Agadir\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Agadir\"), React.createElement(\"option\", {\n        value: \"Casablanca\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Casablanca\"), React.createElement(\"option\", {\n        value: \"Marrackech\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Marrackech\"), React.createElement(\"option\", {\n        value: \"Tanger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Tanger\"))), topologyLevel === 1 && React.createElement(Col, {\n        xs: 4,\n        sm: 3,\n        md: 2,\n        lg: 2,\n        xl: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: 'select',\n        className: 'custom-select',\n        onChange: ev => handleAggregSiteChange(ev.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Aggre Site\"), labels.map((value, index) => {\n        return React.createElement(\"option\", {\n          value: value,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, value);\n      }))), topologyLevel !== 1 && React.createElement(Col, {\n        xs: 4,\n        sm: 3,\n        md: 2,\n        lg: 2,\n        xl: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, labels && React.createElement(Input, {\n        type: 'select',\n        className: 'custom-select',\n        onChange: ev => handleSelectNode(ev.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Select a node\"), labels.map((value, index) => {\n        return React.createElement(\"option\", {\n          value: value,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, value);\n      }))), React.createElement(Col, {\n        xs: 4,\n        sm: 3,\n        md: 2,\n        lg: 2,\n        xl: 2,\n        className: `${snapShotButtonOffset} text-right`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Button, {\n        \"data-place\": 'top',\n        \"data-tip\": 'Snapshot',\n        color: 'primary',\n        onClick: this.handleSnapshotClick.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: `icon icon-camera-photo`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      })), topologyLevel !== 2 && React.createElement(MaximizeContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })))));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    language: state.language\n  };\n}\n\nexport default connect(mapStateToProps)(TopologyToolbar);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/TopologyToolbar.jsx"],"names":["React","connect","MaximizeContent","Button","Card","CardBody","Row","Col","Input","html2canvas","saveAs","dataURLtoBlob","TopologyToolbar","Component","constructor","props","handleSnapshotClick","diagramAreaId","snapshotFileName","topologyLevel","elem","document","getElementById","nav","querySelector","card","classList","add","then","canvas","blob","toDataURL","remove","render","language","labels","wrapper","handleAggregSiteChange","handleRegionChange","handleSelectNode","snapShotButtonOffset","ev","target","value","map","index","bind","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport MaximizeContent from \"./MaximizeContent\";\r\nimport {Button, Card, CardBody, Row, Col, Input} from 'reactstrap';\r\nimport html2canvas from \"html2canvas\";\r\nimport {saveAs} from 'file-saver';\r\nimport 'canvas-toBlob';\r\n\r\nimport dataURLtoBlob from 'blueimp-canvas-to-blob';\r\n\r\nclass TopologyToolbar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    handleSnapshotClick(){\r\n        const {diagramAreaId, snapshotFileName, topologyLevel} = this.props;\r\n\r\n        const elem = document.getElementById(diagramAreaId);\r\n\r\n        if (elem) {\r\n\r\n            const nav = elem.querySelector('.vis-navigation');\r\n\r\n            let card = null;\r\n            if (topologyLevel === 2) {\r\n                card = elem.querySelector('.card');\r\n\r\n                card.classList.add('d-none');\r\n            }\r\n\r\n            nav.classList.add('d-none');\r\n            html2canvas(elem).then(function(canvas) {\r\n                const blob = dataURLtoBlob(canvas.toDataURL());\r\n                saveAs(blob, snapshotFileName);\r\n                nav.classList.remove('d-none');\r\n\r\n                if (topologyLevel === 2) card.classList.remove('d-none');\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {language, labels, topologyLevel, wrapper,\r\n            handleAggregSiteChange, handleRegionChange, handleSelectNode} = this.props;\r\n\r\n        const snapShotButtonOffset = topologyLevel === 1 ? 'offset-6' : 'offset-8';\r\n\r\n        if (language && labels !== null) {\r\n\r\n            return (\r\n\r\n                <Card className={wrapper}>\r\n                    <CardBody>\r\n                        <Row>\r\n                            {topologyLevel === 1 &&\r\n                            <Col xs={4} sm={3} md={2} lg={2} xl={2}>\r\n                                <Input type={'select'} className={'custom-select'}\r\n                                       onChange={ev => handleRegionChange(ev.target.value)}>\r\n                                    <option value=\"0\">Load by Region</option>\r\n                                    <option value=\"Agadir\">Agadir</option>\r\n                                    <option value=\"Casablanca\">Casablanca</option>\r\n                                    <option value=\"Marrackech\">Marrackech</option>\r\n                                    <option value=\"Tanger\">Tanger</option>\r\n                                </Input>\r\n                            </Col>\r\n                            }\r\n\r\n                            {topologyLevel === 1 &&\r\n                            <Col xs={4} sm={3} md={2} lg={2} xl={2}>\r\n                                <Input type={'select'} className={'custom-select'}\r\n                                       onChange={ev => handleAggregSiteChange(ev.target.value)}>\r\n                                    <option value=\"0\">Aggre Site</option>\r\n                                    {labels.map((value, index) => {\r\n                                        return <option value={value} key={index}>{value}</option>\r\n                                    })}\r\n                                </Input>\r\n                            </Col>\r\n                            }\r\n\r\n                            {topologyLevel !== 1 &&\r\n                            <Col xs={4} sm={3} md={2} lg={2} xl={2}>\r\n                                {labels &&\r\n                                <Input type={'select'} className={'custom-select'}\r\n                                       onChange={ev => handleSelectNode(ev.target.value)}>\r\n                                    <option value=\"0\" >Select a node</option>\r\n                                    {labels.map((value, index) => {\r\n                                        return <option value={value} key={index}>{value}</option>\r\n                                    })}\r\n                                </Input>\r\n                                }\r\n                            </Col>\r\n                            }\r\n\r\n                            <Col xs={4} sm={3} md={2} lg={2} xl={2} className={`${snapShotButtonOffset} text-right`}>\r\n                                <Button data-place={'top'}\r\n                                        data-tip={'Snapshot'}\r\n                                        color={'primary'}\r\n                                        onClick={this.handleSnapshotClick.bind(this)}>\r\n                                    <i className={`icon icon-camera-photo`}/>\r\n                                </Button>\r\n\r\n                                {topologyLevel !== 2 &&\r\n                                <MaximizeContent/>\r\n                                }\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        language: state.language\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TopologyToolbar);"]},"metadata":{},"sourceType":"module"}