{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\components\\\\ToolbarMatrix.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport MaximizeContent from \"./MaximizeContent\";\nimport { Row, Col, Card, CardBody, Button, ButtonGroup } from 'reactstrap';\nimport { modalImportToggle } from \"../redux/actions\";\nimport SelectRegion from './SelectRegion';\nimport SelectRadioSite from './SelectRadioSite';\nimport ReactTooltip from 'react-tooltip'; // REST\n\nimport RestApiModule from '../RestApiModule'; // Alert\n\nimport AlertModule from '../AlertModule';\n\nclass ToolbarMatrix extends React.Component {\n  constructor(props) {\n    super(props);\n    this.restApi = new RestApiModule();\n    this.alert = new AlertModule();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    ReactTooltip.rebuild();\n  }\n\n  openImportModal() {\n    const _this$props = this.props,\n          token = _this$props.token,\n          setModalImport = _this$props.setModalImport,\n          language = _this$props.language;\n    this.restApi.callApi('getImportStatus', {\n      token\n    }).then(response => {\n      const isImportOngoing = response.isImportOngoing,\n            user = response.user;\n\n      if (!isImportOngoing) {\n        setModalImport();\n      } else {\n        const message = language.importSection.ongoingImportText.replace('{username}', user);\n        this.alert.showMessage('warning', language.importSection.ongoingImportTitle, message, false);\n      }\n    });\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          language = _this$props2.language,\n          wrapper = _this$props2.wrapper,\n          tooltipPlacement = _this$props2.tooltipPlacement;\n\n    if (language) {\n      return React.createElement(Card, {\n        className: wrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(SelectRegion, {\n        handleRegionChange: this.props.handleRegionChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      })), React.createElement(Col, {\n        xs: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(SelectRadioSite, {\n        handleRadioSiteChange: this.props.handleRadioSiteChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      })), React.createElement(Col, {\n        xs: 8,\n        className: \"text-right tools\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(ButtonGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, language.matrixViewToolbar.map((item, key) => {\n        if (item.clickEvent === 'edit' || item.id === 'saveOptions') {\n          item.showMe = !this.props.editOn;\n        } // disable buttons if edit mode on\n\n\n        let disableAttr = this.props.editOn ? item.showMe : false; // if data empty just import button can be clickable\n\n        if (!this.props.isDataExist) {\n          disableAttr = !(item.clickEvent === 'import');\n        }\n\n        if (item.id !== 'saveOptions') {\n          return React.createElement(Button, {\n            key: key,\n            \"data-tip\": item.title,\n            \"data-place\": tooltipPlacement,\n            disabled: disableAttr,\n            className: item.showMe ? undefined : 'd-none',\n            onClick: item.clickEvent === 'import' ? this.openImportModal.bind(this) : this.props[item.clickEvent],\n            color: item.btnClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 96\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: `icon ${item.icon}`,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109\n            },\n            __self: this\n          }));\n        } else if (item.id === 'saveOptions' && this.props.editOn) {\n          return React.createElement(\"div\", {\n            className: \"dropdown\",\n            key: key,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116\n            },\n            __self: this\n          }, React.createElement(Button, {\n            \"data-tip\": item.title,\n            \"data-place\": tooltipPlacement,\n            color: item.btnClass,\n            \"data-toggle\": \"dropdown\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: `icon ${item.icon}`,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121\n            },\n            __self: this\n          })), React.createElement(\"div\", {\n            className: \"dropdown-menu dropdown-menu-right\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123\n            },\n            __self: this\n          }, item.children.map((child, childKey) => {\n            const showOption = this.props.newRowAdded === true ? child.showOnNewRow : true;\n            const divClass = `${child.class} ${showOption ? '' : ' d-none'}`;\n            return React.createElement(\"div\", {\n              className: divClass,\n              onClick: this.props[child.clickEvent],\n              key: childKey,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 135\n              },\n              __self: this\n            }, React.createElement(\"i\", {\n              className: `icon ${child.icon} mr-2`,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 138\n              },\n              __self: this\n            }), child.title);\n          })));\n        }\n      })), React.createElement(MaximizeContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      })))));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.token,\n    language: state.language,\n    editOn: state.editOn,\n    maximize: state.maximize,\n    tooltipPlacement: state.tooltipPlacement\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setModalImport: () => dispatch(modalImportToggle())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToolbarMatrix);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/ToolbarMatrix.jsx"],"names":["React","connect","MaximizeContent","Row","Col","Card","CardBody","Button","ButtonGroup","modalImportToggle","SelectRegion","SelectRadioSite","ReactTooltip","RestApiModule","AlertModule","ToolbarMatrix","Component","constructor","props","restApi","alert","componentDidUpdate","prevProps","prevState","snapshot","rebuild","openImportModal","token","setModalImport","language","callApi","then","response","isImportOngoing","user","message","importSection","ongoingImportText","replace","showMessage","ongoingImportTitle","render","wrapper","tooltipPlacement","handleRegionChange","bind","handleRadioSiteChange","matrixViewToolbar","map","item","key","clickEvent","id","showMe","editOn","disableAttr","isDataExist","title","undefined","btnClass","icon","children","child","childKey","showOption","newRowAdded","showOnNewRow","divClass","class","mapStateToProps","state","maximize","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport MaximizeContent from \"./MaximizeContent\";\r\nimport {Row, Col, Card, CardBody, Button, ButtonGroup} from 'reactstrap';\r\nimport {modalImportToggle} from \"../redux/actions\";\r\nimport SelectRegion from './SelectRegion';\r\nimport SelectRadioSite from './SelectRadioSite';\r\nimport ReactTooltip from 'react-tooltip'\r\n\r\n// REST\r\nimport RestApiModule from '../RestApiModule'\r\n// Alert\r\nimport AlertModule from '../AlertModule'\r\n\r\nclass ToolbarMatrix extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.restApi = new RestApiModule();\r\n        this.alert = new AlertModule();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        ReactTooltip.rebuild();\r\n    }\r\n\r\n    openImportModal() {\r\n\r\n        const {token, setModalImport, language} = this.props\r\n\r\n        this.restApi.callApi('getImportStatus', {\r\n            token\r\n        }).then(response => {\r\n\r\n            const {isImportOngoing, user} = response;\r\n\r\n            if (!isImportOngoing) {\r\n                setModalImport()\r\n            } else {\r\n                const message = language.importSection.ongoingImportText.replace('{username}', user);\r\n\r\n                this.alert.showMessage(\r\n                    'warning',\r\n                    language.importSection.ongoingImportTitle,\r\n                    message,\r\n                    false)\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const {language, wrapper, tooltipPlacement} = this.props;\r\n\r\n        if (language) {\r\n\r\n            return (\r\n                <Card className={wrapper}>\r\n                    <CardBody>\r\n\r\n                        <Row>\r\n                            <Col xs={2}>\r\n                                <SelectRegion\r\n                                    handleRegionChange={this.props.handleRegionChange.bind(this)}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col xs={2}>\r\n                                <SelectRadioSite\r\n                                    handleRadioSiteChange={this.props.handleRadioSiteChange.bind(this)}\r\n                                />\r\n                            </Col>\r\n                            <Col xs={8} className=\"text-right tools\">\r\n\r\n                                <ButtonGroup>\r\n                                {\r\n                                language.matrixViewToolbar.map((item, key) => {\r\n\r\n                                    if ((item.clickEvent === 'edit' ||\r\n                                        item.id === 'saveOptions')) {\r\n                                        item.showMe = !this.props.editOn\r\n                                    }\r\n\r\n                                    // disable buttons if edit mode on\r\n                                    let disableAttr = this.props.editOn ? item.showMe : false;\r\n\r\n                                    // if data empty just import button can be clickable\r\n                                    if (!this.props.isDataExist) {\r\n                                        disableAttr = !(item.clickEvent === 'import');\r\n\r\n                                    }\r\n\r\n                                    if (item.id !== 'saveOptions') {\r\n                                        return (\r\n                                            <Button key={key}\r\n                                                    data-tip={item.title}\r\n                                                    data-place={tooltipPlacement}\r\n                                                    disabled={disableAttr}\r\n                                                    className={item.showMe\r\n                                                        ? undefined\r\n                                                        : 'd-none'\r\n                                                    }\r\n                                                    onClick={item.clickEvent === 'import'\r\n                                                        ? this.openImportModal.bind(this)\r\n                                                        : this.props[item.clickEvent]\r\n                                                    }\r\n                                                    color={item.btnClass}>\r\n                                                <i className={`icon ${item.icon}`}/>\r\n                                            </Button>\r\n                                        )\r\n                                    } else if (item.id === 'saveOptions' && this.props.editOn) {\r\n\r\n                                        return (\r\n\r\n                                            <div className=\"dropdown\" key={key}>\r\n                                                <Button data-tip={item.title}\r\n                                                        data-place={tooltipPlacement}\r\n                                                        color={item.btnClass}\r\n                                                        data-toggle=\"dropdown\">\r\n                                                    <i className={`icon ${item.icon}`}/>\r\n                                                </Button>\r\n                                                <div className=\"dropdown-menu dropdown-menu-right\">\r\n                                                    {item.children.map((child, childKey) => {\r\n\r\n                                                        const showOption = this.props.newRowAdded === true\r\n                                                            ? child.showOnNewRow\r\n                                                            : true;\r\n\r\n                                                        const divClass = `${child.class} ${\r\n                                                            (showOption) ? '' : ' d-none'\r\n                                                            }`;\r\n\r\n                                                        return (\r\n                                                            <div className={divClass}\r\n                                                               onClick={this.props[child.clickEvent]}\r\n                                                               key={childKey}>\r\n                                                                <i className={`icon ${child.icon} mr-2`}/>\r\n                                                                {child.title}\r\n                                                            </div>\r\n                                                        )\r\n                                                    })\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                })\r\n                                }\r\n                                </ButtonGroup>\r\n\r\n                                <MaximizeContent/>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        language: state.language,\r\n        editOn: state.editOn,\r\n        maximize: state.maximize,\r\n        tooltipPlacement: state.tooltipPlacement\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModalImport: () => dispatch(modalImportToggle())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToolbarMatrix);"]},"metadata":{},"sourceType":"module"}