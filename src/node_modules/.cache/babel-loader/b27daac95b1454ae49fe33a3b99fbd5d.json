{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { SET_LANG, SET_AUTH_USER, SET_MAXIMIZE, SET_REGIONS, SET_TOKEN, MODAL_TOGGLE, MODAL_TITLE, MODAL_IMPORT_TOGGLE, SET_TOPOLOGY_FIRST_LEVEL, SET_TOPOLOGY_SECOND_LEVEL, EDIT_ON_TOGGLE, SPINNER_TOGGLE, MODAL_EXPORT_TOGGLE, SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS } from '../actions';\nconst initialState = {\n  language: null,\n  lang: 'en',\n  // default language\n  maximize: false,\n  contentCSS: 'col-11 content',\n  // default content area css\n  token: null,\n  modalToggle: false,\n  editOn: false,\n  spinnerToggle: false,\n  topologyFirstLevel: null,\n  topologySecondLevel: null,\n  topologySecondLevelDropdownLabels: null,\n  topologySelectedNodeFontSize: 18 // selectedNode font size default is 13\n\n};\n\nconst reducers = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_LANG:\n      {\n        const _action$payload = action.payload,\n              langFile = _action$payload.langFile,\n              lang = _action$payload.lang;\n        return _objectSpread({}, state, {}, {\n          language: langFile,\n          lang: lang\n        });\n      }\n\n    case SET_AUTH_USER:\n      {\n        if (action.user !== null) {\n          localStorage.setItem('user', action.user.name);\n        } else {\n          localStorage.removeItem('user');\n        }\n\n        return _objectSpread({}, state, {}, {\n          user: action.user\n        });\n      }\n\n    case SET_TOKEN:\n      {\n        if (action.token !== null) {\n          localStorage.setItem('e2eToken', action.token);\n        } else {\n          localStorage.removeItem('e2eToken');\n        }\n\n        return _objectSpread({}, state, {}, {\n          token: action.token\n        });\n      }\n\n    case SET_REGIONS:\n      {\n        return _objectSpread({}, state, {}, {\n          regions: action.regions\n        });\n      }\n\n    case SET_MAXIMIZE:\n      {\n        const newValue = !state.maximize;\n        const contentCSS = newValue ? 'col-12 maximized' : initialState.contentCSS;\n        return _objectSpread({}, state, {}, {\n          maximize: newValue,\n          contentCSS\n        });\n      }\n\n    case MODAL_TOGGLE:\n      {\n        return _objectSpread({}, state, {}, {\n          modalToggle: !state.modalToggle\n        });\n      }\n\n    case MODAL_TITLE:\n      {\n        return _objectSpread({}, state, {}, {\n          modalTitle: action.title\n        });\n      }\n\n    case MODAL_IMPORT_TOGGLE:\n      {\n        return _objectSpread({}, state, {}, {\n          modalImportToggle: !state.modalImportToggle\n        });\n      }\n\n    case MODAL_EXPORT_TOGGLE:\n      {\n        return _objectSpread({}, state, {}, {\n          modalExportToggle: !state.modalExportToggle\n        });\n      }\n\n    case SPINNER_TOGGLE:\n      {\n        return _objectSpread({}, state, {}, {\n          spinnerToggle: !state.spinnerToggle\n        });\n      }\n\n    case SET_TOPOLOGY_FIRST_LEVEL:\n      {\n        const data = action.payload.data;\n        return _objectSpread({}, state, {}, {\n          topologyFirstLevel: data\n        });\n      }\n\n    case SET_TOPOLOGY_SECOND_LEVEL:\n      {\n        const data = action.payload.data;\n        return _objectSpread({}, state, {}, {\n          topologySecondLevel: data\n        });\n      }\n\n    case SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS:\n      {\n        const data = action.payload.data;\n        return _objectSpread({}, state, {}, {\n          topologySecondLevelDropdownLabels: data\n        });\n      }\n\n    case EDIT_ON_TOGGLE:\n      {\n        return _objectSpread({}, state, {}, {\n          editOn: !state.editOn\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducers;","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/redux/reducer/index.js"],"names":["SET_LANG","SET_AUTH_USER","SET_MAXIMIZE","SET_REGIONS","SET_TOKEN","MODAL_TOGGLE","MODAL_TITLE","MODAL_IMPORT_TOGGLE","SET_TOPOLOGY_FIRST_LEVEL","SET_TOPOLOGY_SECOND_LEVEL","EDIT_ON_TOGGLE","SPINNER_TOGGLE","MODAL_EXPORT_TOGGLE","SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS","initialState","language","lang","maximize","contentCSS","token","modalToggle","editOn","spinnerToggle","topologyFirstLevel","topologySecondLevel","topologySecondLevelDropdownLabels","topologySelectedNodeFontSize","reducers","state","action","type","payload","langFile","user","localStorage","setItem","name","removeItem","regions","newValue","modalTitle","title","modalImportToggle","modalExportToggle","data"],"mappings":"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","sourcesContent":["import {\r\n    SET_LANG,\r\n    SET_AUTH_USER,\r\n    SET_MAXIMIZE,\r\n    SET_REGIONS,\r\n    SET_TOKEN, MODAL_TOGGLE, MODAL_TITLE, MODAL_IMPORT_TOGGLE,\r\n    SET_TOPOLOGY_FIRST_LEVEL, SET_TOPOLOGY_SECOND_LEVEL,\r\n    EDIT_ON_TOGGLE, SPINNER_TOGGLE, MODAL_EXPORT_TOGGLE,\r\n    SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS\r\n}\r\n    from '../actions'\r\n\r\nconst initialState = {\r\n    language: null,\r\n    lang: 'en', // default language\r\n    maximize: false,\r\n    contentCSS: 'col-11 content', // default content area css\r\n    token: null,\r\n    modalToggle: false,\r\n    editOn: false,\r\n    spinnerToggle: false,\r\n    topologyFirstLevel: null,\r\n    topologySecondLevel: null,\r\n    topologySecondLevelDropdownLabels: null,\r\n    topologySelectedNodeFontSize: 18 // selectedNode font size default is 13\r\n};\r\n\r\nconst reducers = (state = initialState, action) =>  {\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_LANG: {\r\n            const {langFile, lang} = action.payload;\r\n            return {...state, ...{language: langFile, lang: lang}}\r\n        }\r\n        case SET_AUTH_USER: {\r\n            if (action.user !== null) {\r\n                localStorage.setItem('user', action.user.name);\r\n            } else {\r\n                localStorage.removeItem('user');\r\n            }\r\n            return {...state, ...{user: action.user}}\r\n        }\r\n        case SET_TOKEN: {\r\n            if (action.token !== null) {\r\n                localStorage.setItem('e2eToken', action.token);\r\n            } else {\r\n                localStorage.removeItem('e2eToken');\r\n            }\r\n            return {...state, ...{token: action.token}}\r\n        }\r\n        case SET_REGIONS: {\r\n            return {...state, ...{regions: action.regions}}\r\n        }\r\n        case SET_MAXIMIZE: {\r\n            const newValue = !state.maximize;\r\n            const contentCSS = newValue ? 'col-12 maximized' : initialState.contentCSS;\r\n            return {...state, ...{maximize: newValue, contentCSS}}\r\n        }\r\n        case MODAL_TOGGLE: {\r\n            return {...state, ...{modalToggle: !state.modalToggle}}\r\n        }\r\n        case MODAL_TITLE: {\r\n            return {...state, ...{modalTitle: action.title}}\r\n        }\r\n        case MODAL_IMPORT_TOGGLE: {\r\n            return {...state, ...{modalImportToggle: !state.modalImportToggle}}\r\n        }\r\n        case MODAL_EXPORT_TOGGLE: {\r\n            return {...state, ...{modalExportToggle: !state.modalExportToggle}}\r\n        }\r\n        case SPINNER_TOGGLE: {\r\n            return {...state, ...{spinnerToggle: !state.spinnerToggle}}\r\n        }\r\n        case SET_TOPOLOGY_FIRST_LEVEL: {\r\n            const {data} = action.payload;\r\n            return {...state, ...{topologyFirstLevel: data}}\r\n        }\r\n        case SET_TOPOLOGY_SECOND_LEVEL: {\r\n            const {data} = action.payload;\r\n            return {...state, ...{topologySecondLevel: data}}\r\n        }\r\n        case SET_TOPOLOGY_SECOND_LEVEL_DROPDOWN_LABELS: {\r\n            const {data} = action.payload;\r\n            return {...state, ...{topologySecondLevelDropdownLabels: data}}\r\n        }\r\n        case EDIT_ON_TOGGLE: {\r\n            return {...state, ...{editOn: !state.editOn}}\r\n        }\r\n        default: return state;\r\n    }\r\n} \r\n\r\nexport default reducers"]},"metadata":{},"sourceType":"module"}