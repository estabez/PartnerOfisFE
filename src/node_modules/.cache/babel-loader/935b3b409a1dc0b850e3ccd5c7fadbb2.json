{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\SSCM\\\\ss\\\\src\\\\src\\\\views\\\\Main.jsx\";\nimport React, { createRef } from 'react';\nimport { connect } from \"react-redux\";\nimport Axios from 'axios';\nimport { HotTable } from '@handsontable/react';\nimport 'handsontable/dist/handsontable.full.css';\nimport { Row, Col, Card, CardBody, CardFooter } from 'reactstrap';\nimport Header from '../components/Header';\nimport Sidebar from \"../components/Sidebar\";\nimport RestApiModule from '../RestApiModule';\nimport Spinner from '../components/Spinner';\nimport { editOnToggle, spinnerToggle } from \"../redux/actions\";\nimport Handsontable from \"handsontable\";\nimport { groupingMap } from \"../DataMap\";\n\nclass WDM extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.hotTableComponent = createRef();\n    this.hot = null;\n    this.columns = [];\n    this.restApi = new RestApiModule();\n    this.state = {\n      columns: [],\n      data: [],\n      newArrColumns: [],\n      newArrData: [],\n      newArrDataForPair: [],\n      columnOptions: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.setSpinner();\n    this.restApi.callApi('exceldata', {}).then(response => {\n      console.log(\"aaaa\");\n      const json = response.data[0];\n      const jsonBig = response.data;\n\n      for (let key in json) {\n        if (json.hasOwnProperty(key)) {\n          this.state.newArrColumns.push(key);\n        }\n      }\n\n      for (let a = 0; a < jsonBig.length; a++) {\n        const jsonPair = response.data[a];\n\n        for (let key in jsonPair) {\n          if (jsonPair.hasOwnProperty(key)) {\n            this.state.newArrData.push(jsonPair[key]);\n          }\n        }\n\n        this.state.data.push(this.state.newArrData);\n        this.state.newArrData = [];\n      }\n      /*const options = {\r\n          color : \"color10\",\r\n          label : \"x\"\r\n      };\r\n      for(let k = 0; k<10; k++){\r\n            this.state.columnOptions.push(options);\r\n        }*/\n\n\n      console.log(this.state.columnOptions);\n      this.state.columns.push(this.state.newArrColumns);\n      this.forceUpdate();\n      this.hot = this.hotTableComponent.current.hotInstance;\n      console.log(this.hot); //this.hot.setCellMeta(1, 4, \"className\", 'bg-primary text-white');\n      //this.hot.render();\n\n      /* var rows=this.hot.countRows();  // get the count of the rows in the table\r\n       var cols=this.hot.countCols();  // get the count of the columns in the table.\r\n       for(var row=0; row<rows; row++){  // go through each row of the table\r\n                 var cell = this.hot.getCell(row,1);\r\n               cell.style.background = \"#00FF90\";\r\n         }\r\n         console.log(this.hot.getSettings())*/\n      //  this.hot.render();\n      // Create a copy of map file\n\n      const headerMap = JSON.parse(JSON.stringify(groupingMap)); // set each and every column defaults\n\n      const cols = headerMap.map(item => {\n        return item.columns.map(c => {\n          c.color = item.color;\n          c.editor = false; // default readonly\n\n          return c;\n        });\n      }); // spread the columns into single object\n\n      cols.map(c => {\n        this.columns = [...this.columns, ...c];\n      });\n      console.log(this.columns);\n    }).catch(err => {\n      console.log(err);\n    });\n    this.props.setSpinner();\n    /*\r\n            //console.log(this.state.columns);\r\n            Axios({\r\n                //PLEASE FIX URL BASED ON YOUR LOCAL MACHINE PORT WHICH SET FOR BACKEND NODE\r\n                method: 'POST',\r\n                url: `http://localhost:8777/test-jersey-rest-maven-tomcat/rest/testservice/test12/`,\r\n                data: null,\r\n                headers: {\r\n                    'Content-Type' : 'application/json'\r\n                }\r\n            }).then(async (response) => {\r\n                console.log(\"aaaa\");\r\n    \r\n                const json = response.data[0].variants[0];\r\n                const jsonBig = response.data[0].variants;\r\n                for (let key in json) {\r\n                    if (json.hasOwnProperty(key)) {\r\n                        this.state.newArrColumns.push(key);\r\n                    }\r\n                }\r\n    \r\n                for(let a=0; a<jsonBig.length; a++){\r\n                    const jsonPair = response.data[0].variants[a];\r\n                    for(let key in jsonPair){\r\n                        if (jsonPair.hasOwnProperty(key)) {\r\n                            this.state.newArrData.push(jsonPair[key]);\r\n                        }\r\n                    }\r\n                    this.state.data.push(this.state.newArrData);\r\n                    this.state.newArrData = [];\r\n                }\r\n                this.state.columns.push(this.state.newArrColumns);\r\n                this.forceUpdate();\r\n    \r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })*/\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      className: \"h-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Sidebar, {\n      maximize: this.props.maximize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Col, {\n      className: this.props.contentCSS,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: 'mt-1 fixedCard',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(HotTable, {\n      ref: this.hotTableComponent,\n      id: 'hot',\n      data: this.state.data,\n      autoRowSize: true,\n      autoWrapRow: true,\n      dropdownMenu: true,\n      filters: true,\n      manualColumnResize: true,\n      columnSorting: true,\n      colHeaders: this.state.columns[0],\n      columns: this.columns,\n      rowHeaders: true,\n      width: \"1900\",\n      height: \"600\",\n      licenseKey: \"non-commercial-and-evaluation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 33\n      }\n    }))))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.token,\n    language: state.language,\n    maximize: state.maximize,\n    contentCSS: state.contentCSS,\n    fontSize: state.topologySelectedNodeFontSize,\n    spinnerToggle: state.spinnerToggle\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setSpinner: () => dispatch(spinnerToggle())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WDM);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/SSCM/ss/src/src/views/Main.jsx"],"names":["React","createRef","connect","Axios","HotTable","Row","Col","Card","CardBody","CardFooter","Header","Sidebar","RestApiModule","Spinner","editOnToggle","spinnerToggle","Handsontable","groupingMap","WDM","Component","constructor","props","_isMounted","hotTableComponent","hot","columns","restApi","state","data","newArrColumns","newArrData","newArrDataForPair","columnOptions","componentDidMount","setSpinner","callApi","then","response","console","log","json","jsonBig","key","hasOwnProperty","push","a","length","jsonPair","forceUpdate","current","hotInstance","headerMap","JSON","parse","stringify","cols","map","item","c","color","editor","catch","err","render","maximize","contentCSS","mapStateToProps","token","language","fontSize","topologySelectedNodeFontSize","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {createRef} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Axios from 'axios';\r\nimport { HotTable } from '@handsontable/react';\r\nimport 'handsontable/dist/handsontable.full.css';\r\nimport {Row, Col, Card, CardBody, CardFooter} from 'reactstrap';\r\nimport Header from '../components/Header';\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport RestApiModule from '../RestApiModule';\r\nimport Spinner from '../components/Spinner';\r\nimport {editOnToggle, spinnerToggle} from \"../redux/actions\";\r\nimport Handsontable from \"handsontable\";\r\nimport {groupingMap} from \"../DataMap\";\r\n\r\n\r\nclass WDM extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.hotTableComponent = createRef();\r\n        this.hot = null;\r\n        this.columns = [];\r\n        this.restApi = new RestApiModule();\r\n        this.state = {\r\n            columns: [\r\n            ],\r\n            data: [\r\n            ],\r\n            newArrColumns: [],\r\n            newArrData: [],\r\n            newArrDataForPair: [],\r\n            columnOptions: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.props.setSpinner();\r\n        this.restApi.callApi('exceldata', {\r\n\r\n        }).then(response => {\r\n            console.log(\"aaaa\");\r\n\r\n            const json = response.data[0];\r\n            const jsonBig = response.data;\r\n            for (let key in json) {\r\n                if (json.hasOwnProperty(key)) {\r\n                    this.state.newArrColumns.push(key);\r\n\r\n                }\r\n            }\r\n\r\n            for(let a=0; a<jsonBig.length; a++){\r\n                const jsonPair = response.data[a];\r\n                for(let key in jsonPair){\r\n                    if (jsonPair.hasOwnProperty(key)) {\r\n                        this.state.newArrData.push(jsonPair[key]);\r\n                    }\r\n                }\r\n                this.state.data.push(this.state.newArrData);\r\n                this.state.newArrData = [];\r\n            }\r\n\r\n\r\n            /*const options = {\r\n                color : \"color10\",\r\n                label : \"x\"\r\n            };\r\n            for(let k = 0; k<10; k++){\r\n\r\n                this.state.columnOptions.push(options);\r\n\r\n            }*/\r\n\r\n\r\n            console.log(this.state.columnOptions);\r\n            this.state.columns.push(this.state.newArrColumns);\r\n            this.forceUpdate();\r\n\r\n            this.hot = this.hotTableComponent.current.hotInstance;\r\n\r\n            console.log(this.hot)\r\n            //this.hot.setCellMeta(1, 4, \"className\", 'bg-primary text-white');\r\n            //this.hot.render();\r\n           /* var rows=this.hot.countRows();  // get the count of the rows in the table\r\n            var cols=this.hot.countCols();  // get the count of the columns in the table.\r\n            for(var row=0; row<rows; row++){  // go through each row of the table\r\n\r\n                    var cell = this.hot.getCell(row,1);\r\n                    cell.style.background = \"#00FF90\";\r\n\r\n            }\r\n\r\n            console.log(this.hot.getSettings())*/\r\n\r\n          //  this.hot.render();\r\n\r\n\r\n\r\n\r\n\r\n            // Create a copy of map file\r\n            const headerMap = JSON.parse(JSON.stringify(groupingMap));\r\n\r\n\r\n\r\n            // set each and every column defaults\r\n            const cols = headerMap.map((item) => {\r\n\r\n                return item.columns.map(c => {\r\n\r\n\r\n\r\n                    c.color = item.color;\r\n\r\n                    c.editor = false; // default readonly\r\n\r\n                    return c;\r\n                });\r\n            })\r\n\r\n\r\n            // spread the columns into single object\r\n            cols.map((c) => {\r\n\r\n                this.columns = [...this.columns, ...c];\r\n            })\r\n            console.log(this.columns);\r\n\r\n\r\n        }).catch((err) => {\r\n    console.log(err);\r\n})\r\n\r\n        this.props.setSpinner();\r\n\r\n/*\r\n        //console.log(this.state.columns);\r\n        Axios({\r\n            //PLEASE FIX URL BASED ON YOUR LOCAL MACHINE PORT WHICH SET FOR BACKEND NODE\r\n            method: 'POST',\r\n            url: `http://localhost:8777/test-jersey-rest-maven-tomcat/rest/testservice/test12/`,\r\n            data: null,\r\n            headers: {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }).then(async (response) => {\r\n            console.log(\"aaaa\");\r\n\r\n            const json = response.data[0].variants[0];\r\n            const jsonBig = response.data[0].variants;\r\n            for (let key in json) {\r\n                if (json.hasOwnProperty(key)) {\r\n                    this.state.newArrColumns.push(key);\r\n                }\r\n            }\r\n\r\n            for(let a=0; a<jsonBig.length; a++){\r\n                const jsonPair = response.data[0].variants[a];\r\n                for(let key in jsonPair){\r\n                    if (jsonPair.hasOwnProperty(key)) {\r\n                        this.state.newArrData.push(jsonPair[key]);\r\n                    }\r\n                }\r\n                this.state.data.push(this.state.newArrData);\r\n                this.state.newArrData = [];\r\n            }\r\n            this.state.columns.push(this.state.newArrColumns);\r\n            this.forceUpdate();\r\n\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        })*/\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <Header/>\r\n                <Row className=\"h-100\">\r\n                    <Sidebar maximize={this.props.maximize}/>\r\n                    <Col className={this.props.contentCSS}>\r\n\r\n                        <Card className={'mt-1 fixedCard'}>\r\n                            <CardBody>\r\n                                <HotTable  ref={this.hotTableComponent} id={'hot'} data={this.state.data}  autoRowSize={true}  autoWrapRow={true} dropdownMenu={true} filters={true} manualColumnResize={true} columnSorting={true} colHeaders={this.state.columns[0]} columns={this.columns} rowHeaders={true} width=\"1900\" height=\"600\" licenseKey=\"non-commercial-and-evaluation\"\r\n\r\n                                />\r\n\r\n                            </CardBody>\r\n\r\n\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        language: state.language,\r\n        maximize: state.maximize,\r\n        contentCSS: state.contentCSS,\r\n        fontSize: state.topologySelectedNodeFontSize,\r\n        spinnerToggle: state.spinnerToggle,\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n\r\n        setSpinner: () => dispatch(spinnerToggle()),\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(WDM);"]},"metadata":{},"sourceType":"module"}