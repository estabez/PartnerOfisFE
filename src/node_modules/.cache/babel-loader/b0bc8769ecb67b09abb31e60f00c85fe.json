{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\SSCM\\\\ss\\\\src\\\\src\\\\components\\\\Toolbar.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport MaximizeContent from \"./MaximizeContent\";\nimport { Row, Col, Card, CardBody, Button, ButtonGroup } from 'reactstrap';\nimport { modalImportToggle, setShowRevision } from \"../redux/actions\";\nimport SelectRegion from './SelectRegion';\nimport SelectRadioSite from './SelectRadioSite';\nimport ReactTooltip from 'react-tooltip';\nimport Switch from \"react-switch\"; // REST\n\nimport RestApiModule from '../RestApiModule'; // Alert\n\nimport AlertModule from '../AlertModule';\n\nclass Toolbar extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.restApi = new RestApiModule();\n    this.alert = new AlertModule();\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    ReactTooltip.rebuild();\n  }\n\n  openImportModal() {\n    const {\n      token,\n      setModalImport,\n      language\n    } = this.props;\n    this.restApi.callApi('getImportStatus', {\n      token\n    }).then(response => {\n      console.log(response);\n      const {\n        isImportOngoing\n      } = response;\n\n      if (!isImportOngoing.isLock) {\n        setModalImport();\n      } else {\n        const message = language.importSection.ongoingImportText.replace('{username}', isImportOngoing.uname);\n        this.alert.showMessage('warning', language.importSection.ongoingImportTitle, message, false);\n      }\n    });\n  }\n\n  handleChange() {\n    this.props.setShowRevision();\n    this.props.revision();\n  }\n\n  render() {\n    const {\n      language,\n      wrapper,\n      tooltipPlacement,\n      showRevision,\n      editOn,\n      isDataExist\n    } = this.props;\n\n    if (language && this._isMounted) {\n      return /*#__PURE__*/React.createElement(Card, {\n        className: wrapper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CardBody, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        xs: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        xs: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        xs: 8,\n        className: \"text-right tools\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: 'mr-2',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        onChange: this.handleChange.bind(this),\n        disabled: false,\n        checked: showRevision,\n        checkedIcon: false,\n        uncheckedIcon: false,\n        height: 20,\n        width: 36,\n        onColor: '#1174E6',\n        className: 'align-middle',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 37\n        }\n      }), \" \", language.showRevisionText), Object.entries(language.matrixToolbar).map((group, ind, arr) => {\n        return /*#__PURE__*/React.createElement(ButtonGroup, {\n          className: 'mr-2',\n          key: group[0],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 45\n          }\n        }, group[1].map((item, key) => {\n          if (item.clickEvent === 'edit' || item.id === 'saveOptions') {\n            item.showMe = !editOn;\n          } // disable buttons if edit mode on\n\n\n          let disableAttr = editOn ? item.showMe : false; // if data empty just import button can be clickable\n\n          if (!isDataExist) {\n            disableAttr = !(item.clickEvent === 'import');\n          }\n\n          if (item.id !== 'saveOptions') {\n            return /*#__PURE__*/React.createElement(Button, {\n              key: key,\n              \"data-tip\": item.title,\n              \"data-place\": tooltipPlacement,\n              disabled: disableAttr,\n              className: item.showMe ? undefined : 'd-none',\n              onClick: item.clickEvent === 'import' ? this.openImportModal.bind(this) : this.props[item.clickEvent],\n              color: item.btnClass,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 61\n              }\n            }, /*#__PURE__*/React.createElement(\"i\", {\n              className: `icon ${item.icon}`,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 65\n              }\n            }));\n          } else if (item.id === 'saveOptions' && editOn) {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              className: \"dropdown\",\n              key: key,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 61\n              }\n            }, /*#__PURE__*/React.createElement(Button, {\n              \"data-tip\": item.title,\n              \"data-place\": tooltipPlacement,\n              color: item.btnClass,\n              \"data-toggle\": \"dropdown\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 65\n              }\n            }, /*#__PURE__*/React.createElement(\"i\", {\n              className: `icon ${item.icon}`,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 69\n              }\n            })), /*#__PURE__*/React.createElement(\"div\", {\n              className: \"dropdown-menu dropdown-menu-right\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 65\n              }\n            }, item.children.map((child, childKey) => {\n              const showOption = this.props.newRowAdded === true ? child.showOnNewRow : true;\n              const divClass = `${child.class} ${showOption ? '' : ' d-none'}`;\n              return /*#__PURE__*/React.createElement(\"div\", {\n                className: divClass,\n                onClick: this.props[child.clickEvent],\n                key: childKey,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 77\n                }\n              }, /*#__PURE__*/React.createElement(\"i\", {\n                className: `icon ${child.icon} mr-2`,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 81\n                }\n              }), child.title);\n            })));\n          }\n        }));\n      }), /*#__PURE__*/React.createElement(MaximizeContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 33\n        }\n      })))));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.token,\n    language: state.language,\n    editOn: state.editOn,\n    maximize: state.maximize,\n    tooltipPlacement: state.tooltipPlacement,\n    showRevision: state.showRevision\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setModalImport: () => dispatch(modalImportToggle()),\n    setShowRevision: () => dispatch(setShowRevision())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/SSCM/ss/src/src/components/Toolbar.jsx"],"names":["React","connect","MaximizeContent","Row","Col","Card","CardBody","Button","ButtonGroup","modalImportToggle","setShowRevision","SelectRegion","SelectRadioSite","ReactTooltip","Switch","RestApiModule","AlertModule","Toolbar","Component","constructor","props","_isMounted","restApi","alert","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","rebuild","openImportModal","token","setModalImport","language","callApi","then","response","console","log","isImportOngoing","isLock","message","importSection","ongoingImportText","replace","uname","showMessage","ongoingImportTitle","handleChange","revision","render","wrapper","tooltipPlacement","showRevision","editOn","isDataExist","bind","showRevisionText","Object","entries","matrixToolbar","map","group","ind","arr","item","key","clickEvent","id","showMe","disableAttr","title","undefined","btnClass","icon","children","child","childKey","showOption","newRowAdded","showOnNewRow","divClass","class","mapStateToProps","state","maximize","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport MaximizeContent from \"./MaximizeContent\";\r\nimport {Row, Col, Card, CardBody, Button, ButtonGroup} from 'reactstrap';\r\nimport {modalImportToggle, setShowRevision} from \"../redux/actions\";\r\nimport SelectRegion from './SelectRegion';\r\nimport SelectRadioSite from './SelectRadioSite';\r\nimport ReactTooltip from 'react-tooltip'\r\nimport Switch from \"react-switch\";\r\n\r\n// REST\r\nimport RestApiModule from '../RestApiModule'\r\n// Alert\r\nimport AlertModule from '../AlertModule'\r\n\r\nclass Toolbar extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.restApi = new RestApiModule();\r\n        this.alert = new AlertModule();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        ReactTooltip.rebuild();\r\n    }\r\n\r\n\r\n    openImportModal() {\r\n\r\n        const {token, setModalImport, language} = this.props\r\n\r\n        this.restApi.callApi('getImportStatus', {\r\n            token\r\n        }).then(response => {\r\n\r\n            console.log(response);\r\n            const {isImportOngoing} = response;\r\n\r\n            if (!isImportOngoing.isLock) {\r\n                setModalImport()\r\n\r\n            } else {\r\n                const message = language.importSection.ongoingImportText.replace('{username}', isImportOngoing.uname);\r\n\r\n                this.alert.showMessage(\r\n                    'warning',\r\n                    language.importSection.ongoingImportTitle,\r\n                    message,\r\n                    false)\r\n            }\r\n        })\r\n    }\r\n\r\n    handleChange() {\r\n        this.props.setShowRevision();\r\n        this.props.revision();\r\n    }\r\n\r\n    render() {\r\n\r\n        const {language, wrapper, tooltipPlacement, showRevision, editOn, isDataExist} = this.props;\r\n\r\n        if (language && this._isMounted) {\r\n\r\n\r\n            return (\r\n                <Card className={wrapper}>\r\n                    <CardBody>\r\n\r\n                        <Row>\r\n                            <Col xs={2}>\r\n\r\n                            </Col>\r\n\r\n                            <Col xs={2}>\r\n\r\n                            </Col>\r\n                            <Col xs={8} className=\"text-right tools\">\r\n                                <span className={'mr-2'}>\r\n                                    <Switch onChange={this.handleChange.bind(this)}\r\n                                            disabled={false}\r\n                                            checked={showRevision}\r\n                                            checkedIcon={false}\r\n                                            uncheckedIcon={false}\r\n                                            height={20}\r\n                                            width={36}\r\n                                            onColor={'#1174E6'}\r\n                                            className={'align-middle'}\r\n                                    /> {language.showRevisionText}\r\n                                </span>\r\n\r\n                                {\r\n                                    Object.entries(language.matrixToolbar).map((group, ind, arr) => {\r\n                                        return (\r\n                                            <ButtonGroup className={'mr-2'} key={group[0]}>\r\n                                                {group[1].map((item, key) => {\r\n\r\n                                                    if ((item.clickEvent === 'edit' ||\r\n                                                        item.id === 'saveOptions')) {\r\n                                                        item.showMe = !editOn\r\n                                                    }\r\n\r\n                                                    // disable buttons if edit mode on\r\n                                                    let disableAttr = editOn ? item.showMe : false;\r\n\r\n                                                    // if data empty just import button can be clickable\r\n                                                    if (!isDataExist) {\r\n                                                        disableAttr = !(item.clickEvent === 'import');\r\n                                                    }\r\n\r\n                                                    if (item.id !== 'saveOptions') {\r\n                                                        return (\r\n                                                            <Button key={key}\r\n                                                                    data-tip={item.title}\r\n                                                                    data-place={tooltipPlacement}\r\n                                                                    disabled={disableAttr}\r\n                                                                    className={item.showMe\r\n                                                                        ? undefined\r\n                                                                        : 'd-none'\r\n                                                                    }\r\n                                                                    onClick={item.clickEvent === 'import'\r\n                                                                        ? this.openImportModal.bind(this)\r\n                                                                        : this.props[item.clickEvent]\r\n                                                                    }\r\n                                                                    color={item.btnClass}>\r\n                                                                <i className={`icon ${item.icon}`}/>\r\n                                                            </Button>\r\n                                                        )\r\n                                                    } else if (item.id === 'saveOptions' && editOn) {\r\n\r\n                                                        return (\r\n\r\n                                                            <div className=\"dropdown\" key={key}>\r\n                                                                <Button data-tip={item.title}\r\n                                                                        data-place={tooltipPlacement}\r\n                                                                        color={item.btnClass}\r\n                                                                        data-toggle=\"dropdown\">\r\n                                                                    <i className={`icon ${item.icon}`}/>\r\n                                                                </Button>\r\n                                                                <div className=\"dropdown-menu dropdown-menu-right\">\r\n                                                                    {item.children.map((child, childKey) => {\r\n\r\n                                                                        const showOption = this.props.newRowAdded === true\r\n                                                                            ? child.showOnNewRow\r\n                                                                            : true;\r\n\r\n                                                                        const divClass = `${child.class} ${\r\n                                                                            (showOption) ? '' : ' d-none'\r\n                                                                        }`;\r\n\r\n                                                                        return (\r\n                                                                            <div className={divClass}\r\n                                                                                 onClick={this.props[child.clickEvent]}\r\n                                                                                 key={childKey}>\r\n                                                                                <i className={`icon ${child.icon} mr-2`}/>\r\n                                                                                {child.title}\r\n                                                                            </div>\r\n                                                                        )\r\n                                                                    })\r\n                                                                    }\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        )\r\n                                                    }\r\n                                                })\r\n                                                }\r\n                                            </ButtonGroup>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                <MaximizeContent/>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            )\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        language: state.language,\r\n        editOn: state.editOn,\r\n        maximize: state.maximize,\r\n        tooltipPlacement: state.tooltipPlacement,\r\n        showRevision: state.showRevision\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        setModalImport: () => dispatch(modalImportToggle()),\r\n        setShowRevision: () => dispatch(setShowRevision())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);"]},"metadata":{},"sourceType":"module"}