{"ast":null,"code":"/*\r\n* Rest Api module\r\n* Use for call rest api methods from one hand\r\n* It includes error handler\r\n*\r\n*/\nimport axios from 'axios';\n\nclass RestApiModule {\n  constructor() {\n    this.serverPath = process.env.REACT_APP_API_GATEWAY;\n    this.endpoints = {\n      ranFirst: {\n        serviceName: process.env.REACT_APP_RAN_SERVICE,\n        methodName: \"/GetRANTopologyFirstLevelforRegion\"\n      },\n      ranSecond: {\n        serviceName: process.env.REACT_APP_RAN_SERVICE,\n        methodName: \"/GetRANTopologySecondLevelforAggregSite\"\n      },\n      core: {\n        serviceName: process.env.REACT_APP_CORE_SERVICE,\n        methodName: \"/CoreTopologyView\"\n      },\n      wdm: {\n        serviceName: process.env.REACT_APP_WDM_SERVICE,\n        methodName: \"/WDMTopologyView\"\n      }\n    };\n  }\n\n  callApi(endpoint, dto) {\n    return new Promise((res, rej) => {\n      const _this$endpoints$endpo = this.endpoints[endpoint],\n            serviceName = _this$endpoints$endpo.serviceName,\n            methodName = _this$endpoints$endpo.methodName;\n      axios({\n        method: \"POST\",\n        url: `${this.serverPath}${serviceName}${methodName}`,\n        data: dto\n      }).then(async response => {\n        //console.log(response);\n        if (response.data.exec_status === 'success') {\n          res(response.data);\n        }\n\n        if (response.data.exec_status === 'error') {\n          rej(response.error_message);\n        }\n      }).catch(err => {\n        rej(err);\n      });\n    });\n  }\n\n  errorHandler() {}\n\n}\n\nexport default RestApiModule;","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/RestApiModule.js"],"names":["axios","RestApiModule","constructor","serverPath","process","env","REACT_APP_API_GATEWAY","endpoints","ranFirst","serviceName","REACT_APP_RAN_SERVICE","methodName","ranSecond","core","REACT_APP_CORE_SERVICE","wdm","REACT_APP_WDM_SERVICE","callApi","endpoint","dto","Promise","res","rej","method","url","data","then","response","exec_status","error_message","catch","err","errorHandler"],"mappings":"AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,aAAN,CAAoB;AAEhBC,EAAAA,WAAW,GAAG;AACV,SAAKC,UAAL,GAAkBC,OAAO,CAACC,GAAR,CAAYC,qBAA9B;AACA,SAAKC,SAAL,GAAiB;AACbC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,WAAW,EAAEL,OAAO,CAACC,GAAR,CAAYK,qBADnB;AAENC,QAAAA,UAAU,EAAE;AAFN,OADG;AAMbC,MAAAA,SAAS,EAAE;AACPH,QAAAA,WAAW,EAAEL,OAAO,CAACC,GAAR,CAAYK,qBADlB;AAEPC,QAAAA,UAAU,EAAE;AAFL,OANE;AAWbE,MAAAA,IAAI,EAAE;AACFJ,QAAAA,WAAW,EAAEL,OAAO,CAACC,GAAR,CAAYS,sBADvB;AAEFH,QAAAA,UAAU,EAAE;AAFV,OAXO;AAebI,MAAAA,GAAG,EAAE;AACDN,QAAAA,WAAW,EAAEL,OAAO,CAACC,GAAR,CAAYW,qBADxB;AAEDL,QAAAA,UAAU,EAAE;AAFX;AAfQ,KAAjB;AAoBH;;AAEDM,EAAAA,OAAO,CAACC,QAAD,EAAWC,GAAX,EAAgB;AAEnB,WAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAAA,oCACK,KAAKf,SAAL,CAAeW,QAAf,CADL;AAAA,YACtBT,WADsB,yBACtBA,WADsB;AAAA,YACTE,UADS,yBACTA,UADS;AAG7BX,MAAAA,KAAK,CAAC;AACFuB,QAAAA,MAAM,EAAE,MADN;AAEFC,QAAAA,GAAG,EAAG,GAAE,KAAKrB,UAAW,GAAEM,WAAY,GAAEE,UAAW,EAFjD;AAGFc,QAAAA,IAAI,EAAEN;AAHJ,OAAD,CAAL,CAIGO,IAJH,CAIQ,MAAOC,QAAP,IAAoB;AAExB;AAEA,YAAIA,QAAQ,CAACF,IAAT,CAAcG,WAAd,KAA8B,SAAlC,EAA6C;AACzCP,UAAAA,GAAG,CAACM,QAAQ,CAACF,IAAV,CAAH;AACH;;AAED,YAAIE,QAAQ,CAACF,IAAT,CAAcG,WAAd,KAA8B,OAAlC,EAA2C;AACvCN,UAAAA,GAAG,CAACK,QAAQ,CAACE,aAAV,CAAH;AACH;AAEJ,OAhBD,EAgBGC,KAhBH,CAgBUC,GAAD,IAAS;AAEdT,QAAAA,GAAG,CAACS,GAAD,CAAH;AACH,OAnBD;AAoBH,KAvBM,CAAP;AAyBH;;AAEDC,EAAAA,YAAY,GAAG,CAEd;;AAzDe;;AA4DpB,eAAe/B,aAAf","sourcesContent":["/*\r\n* Rest Api module\r\n* Use for call rest api methods from one hand\r\n* It includes error handler\r\n*\r\n*/\r\n\r\nimport axios from 'axios';\r\n\r\nclass RestApiModule {\r\n\r\n    constructor() {\r\n        this.serverPath = process.env.REACT_APP_API_GATEWAY;\r\n        this.endpoints = {\r\n            ranFirst: {\r\n                serviceName: process.env.REACT_APP_RAN_SERVICE,\r\n                methodName: \"/GetRANTopologyFirstLevelforRegion\",\r\n\r\n            },\r\n            ranSecond: {\r\n                serviceName: process.env.REACT_APP_RAN_SERVICE,\r\n                methodName: \"/GetRANTopologySecondLevelforAggregSite\"\r\n\r\n            },\r\n            core: {\r\n                serviceName: process.env.REACT_APP_CORE_SERVICE,\r\n                methodName: \"/CoreTopologyView\"\r\n            },\r\n            wdm: {\r\n                serviceName: process.env.REACT_APP_WDM_SERVICE,\r\n                methodName: \"/WDMTopologyView\"\r\n            }\r\n        }\r\n    }\r\n\r\n    callApi(endpoint, dto) {\r\n\r\n        return new Promise((res, rej) => {\r\n            const {serviceName, methodName} = this.endpoints[endpoint];\r\n\r\n            axios({\r\n                method: \"POST\",\r\n                url: `${this.serverPath}${serviceName}${methodName}`,\r\n                data: dto\r\n            }).then(async (response) => {\r\n\r\n                //console.log(response);\r\n\r\n                if (response.data.exec_status === 'success') {\r\n                    res(response.data);\r\n                }\r\n\r\n                if (response.data.exec_status === 'error') {\r\n                    rej(response.error_message)\r\n                }\r\n\r\n            }).catch((err) => {\r\n\r\n                rej(err)\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    errorHandler() {\r\n\r\n    }\r\n}\r\n\r\nexport default RestApiModule;"]},"metadata":{},"sourceType":"module"}