{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\SSCM\\\\ss\\\\src\\\\src\\\\views\\\\Main.jsx\";\nimport React, { createRef } from 'react';\nimport { connect } from \"react-redux\";\nimport Axios from 'axios';\nimport { HotTable } from '@handsontable/react';\nimport 'handsontable/dist/handsontable.full.css';\nimport { Row, Col, Card, CardBody, CardFooter } from 'reactstrap';\nimport Header from '../components/Header';\nimport Sidebar from \"../components/Sidebar\";\nimport RestApiModule from '../RestApiModule';\nimport Spinner from '../components/Spinner';\nimport { editOnToggle, spinnerToggle } from \"../redux/actions\";\nimport Handsontable from \"handsontable\";\nimport { groupingMap } from \"../matrixDataMap\";\n\nclass WDM extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.hotTableComponent = createRef();\n    this.hot = null;\n    this.titles = [];\n    this.handleColumnHeaders();\n    this.restApi = new RestApiModule();\n    this.state = {\n      columns: [],\n      data: [],\n      newArrColumns: [],\n      newArrData: [],\n      newArrDataForPair: [],\n      columnOptions: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.setSpinner();\n    this.restApi.callApi('exceldata', {}).then(response => {\n      console.log(\"aaaa\");\n      const json = response.data[0];\n      const jsonBig = response.data;\n\n      for (let key in json) {\n        if (json.hasOwnProperty(key)) {\n          this.state.newArrColumns.push(key);\n          const options = {\n            color: \"color9\",\n            label: \"x\"\n          };\n          this.state.columnOptions.push(options);\n        }\n      }\n\n      for (let a = 0; a < jsonBig.length; a++) {\n        const jsonPair = response.data[a];\n\n        for (let key in jsonPair) {\n          if (jsonPair.hasOwnProperty(key)) {\n            this.state.newArrData.push(jsonPair[key]);\n          }\n        }\n\n        this.state.data.push(this.state.newArrData);\n        this.state.newArrData = [];\n      }\n\n      console.log(this.state.columnOptions);\n      this.state.columns.push(this.state.newArrColumns);\n      this.forceUpdate();\n      this.hot = this.hotTableComponent.current.hotInstance; //console.log(this.hot)\n      //this.hot.setCellMeta(1, 4, \"className\", 'bg-primary text-white');\n      //this.hot.render();\n\n      /* var rows=this.hot.countRows();  // get the count of the rows in the table\r\n       var cols=this.hot.countCols();  // get the count of the columns in the table.\r\n       for(var row=0; row<rows; row++){  // go through each row of the table\r\n                 var cell = this.hot.getCell(row,1);\r\n               cell.style.background = \"#00FF90\";\r\n         }*/\n      // console.log(this.hot.getSettings())\n\n      this.hot.render();\n    }).catch(err => {\n      console.log(err);\n    });\n    this.props.setSpinner();\n    /*\r\n            //console.log(this.state.columns);\r\n            Axios({\r\n                //PLEASE FIX URL BASED ON YOUR LOCAL MACHINE PORT WHICH SET FOR BACKEND NODE\r\n                method: 'POST',\r\n                url: `http://localhost:8777/test-jersey-rest-maven-tomcat/rest/testservice/test12/`,\r\n                data: null,\r\n                headers: {\r\n                    'Content-Type' : 'application/json'\r\n                }\r\n            }).then(async (response) => {\r\n                console.log(\"aaaa\");\r\n    \r\n                const json = response.data[0].variants[0];\r\n                const jsonBig = response.data[0].variants;\r\n                for (let key in json) {\r\n                    if (json.hasOwnProperty(key)) {\r\n                        this.state.newArrColumns.push(key);\r\n                    }\r\n                }\r\n    \r\n                for(let a=0; a<jsonBig.length; a++){\r\n                    const jsonPair = response.data[0].variants[a];\r\n                    for(let key in jsonPair){\r\n                        if (jsonPair.hasOwnProperty(key)) {\r\n                            this.state.newArrData.push(jsonPair[key]);\r\n                        }\r\n                    }\r\n                    this.state.data.push(this.state.newArrData);\r\n                    this.state.newArrData = [];\r\n                }\r\n                this.state.columns.push(this.state.newArrColumns);\r\n                this.forceUpdate();\r\n    \r\n            }).catch((err) => {\r\n                console.log(err);\r\n            })*/\n  }\n\n  handleColumnHeaders() {\n    // Create a copy of map file\n    const headerMap = JSON.parse(JSON.stringify(groupingMap)); // Set the header groups for table\n\n    const headerGrouping = headerMap.filter(item => {\n      item.colspan = item.columns.length;\n      return typeof item.columns === \"object\";\n    }); // set each and every column defaults\n\n    const cols = headerMap.map(item => {\n      return item.columns.map(c => {\n        this.titles.push(c.label);\n        c.color = item.color;\n        c.editor = false; // default readonly\n\n        if (typeof c.validator !== \"undefined\") {\n          if (c.validator === 'ipValidator') {\n            c.validator = (value, callback) => {\n              this.ipValidate(value, callback);\n            };\n          }\n\n          if (c.validator === 'isNumeric') {\n            c.validator = (value, callback) => {\n              this.numericValidate(value, callback);\n            };\n          }\n        }\n\n        if (typeof c.type !== \"undefined\") {\n          if (c.type === 'dropdown') {\n            this.setPickList(c.data).then(list => {\n              c.source = list;\n            });\n          }\n        }\n\n        return c;\n      });\n    }); // spread the columns into single object\n\n    cols.map(c => {\n      this.columns = [...this.columns, ...c];\n    }); // Pushing header group const to related vars\n\n    this.columnHeaders.push(headerGrouping);\n    this.columnHeaders.push(this.titles);\n    console.log(this.columnHeaders);\n    console.log(this.columns);\n  } // Finished colouring header\n\n\n  headerColoring(col, TH) {\n    const TR = TH.parentNode;\n    const THEAD = TR.parentNode;\n    const b = THEAD.childNodes.length;\n    const n = Array.prototype.indexOf.call(THEAD.childNodes, TR);\n    const headerLevel = -1 * b + n;\n\n    function applyClass(elem, className) {\n      if (!Handsontable.dom.hasClass(elem, className)) Handsontable.dom.addClass(elem, className);\n    }\n\n    if (headerLevel === -1 || headerLevel === -2) {\n      if (col in this.columns) {\n        const {\n          color\n        } = this.columns[col];\n        if (color) applyClass(TH, color);\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      className: \"h-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Sidebar, {\n      maximize: this.props.maximize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Col, {\n      className: this.props.contentCSS,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: 'mt-1 fixedCard',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(HotTable, {\n      ref: this.hotTableComponent,\n      id: 'hot',\n      colHeaders: this.state.newArrColumns,\n      columns: this.columns,\n      autoRowSize: true,\n      autoWrapRow: true,\n      dropdownMenu: true,\n      filters: true,\n      manualColumnResize: true,\n      columnSorting: true,\n      rowHeaders: true,\n      width: \"1900\",\n      height: \"600\",\n      licenseKey: \"non-commercial-and-evaluation\",\n      afterGetColHeader: (col, TH) => {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 33\n      }\n    }))))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.token,\n    language: state.language,\n    maximize: state.maximize,\n    contentCSS: state.contentCSS,\n    fontSize: state.topologySelectedNodeFontSize,\n    spinnerToggle: state.spinnerToggle\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setSpinner: () => dispatch(spinnerToggle())\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WDM);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/SSCM/ss/src/src/views/Main.jsx"],"names":["React","createRef","connect","Axios","HotTable","Row","Col","Card","CardBody","CardFooter","Header","Sidebar","RestApiModule","Spinner","editOnToggle","spinnerToggle","Handsontable","groupingMap","WDM","Component","constructor","props","_isMounted","hotTableComponent","hot","titles","handleColumnHeaders","restApi","state","columns","data","newArrColumns","newArrData","newArrDataForPair","columnOptions","componentDidMount","setSpinner","callApi","then","response","console","log","json","jsonBig","key","hasOwnProperty","push","options","color","label","a","length","jsonPair","forceUpdate","current","hotInstance","render","catch","err","headerMap","JSON","parse","stringify","headerGrouping","filter","item","colspan","cols","map","c","editor","validator","value","callback","ipValidate","numericValidate","type","setPickList","list","source","columnHeaders","headerColoring","col","TH","TR","parentNode","THEAD","b","childNodes","n","Array","prototype","indexOf","call","headerLevel","applyClass","elem","className","dom","hasClass","addClass","maximize","contentCSS","mapStateToProps","token","language","fontSize","topologySelectedNodeFontSize","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {createRef} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Axios from 'axios';\r\nimport { HotTable } from '@handsontable/react';\r\nimport 'handsontable/dist/handsontable.full.css';\r\nimport {Row, Col, Card, CardBody, CardFooter} from 'reactstrap';\r\nimport Header from '../components/Header';\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport RestApiModule from '../RestApiModule';\r\nimport Spinner from '../components/Spinner';\r\nimport {editOnToggle, spinnerToggle} from \"../redux/actions\";\r\nimport Handsontable from \"handsontable\";\r\nimport {groupingMap} from \"../matrixDataMap\";\r\n\r\nclass WDM extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.hotTableComponent = createRef();\r\n        this.hot = null;\r\n        this.titles = [];\r\n        this.handleColumnHeaders();\r\n        this.restApi = new RestApiModule();\r\n        this.state = {\r\n            columns: [\r\n            ],\r\n            data: [\r\n            ],\r\n            newArrColumns: [],\r\n            newArrData: [],\r\n            newArrDataForPair: [],\r\n            columnOptions: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.props.setSpinner();\r\n        this.restApi.callApi('exceldata', {\r\n\r\n        }).then(response => {\r\n            console.log(\"aaaa\");\r\n\r\n            const json = response.data[0];\r\n            const jsonBig = response.data;\r\n            for (let key in json) {\r\n                if (json.hasOwnProperty(key)) {\r\n                    this.state.newArrColumns.push(key);\r\n                    const options = {\r\n                    color : \"color9\",\r\n                    label : \"x\"\r\n                    };\r\n                    this.state.columnOptions.push(options)\r\n                }\r\n            }\r\n\r\n            for(let a=0; a<jsonBig.length; a++){\r\n                const jsonPair = response.data[a];\r\n                for(let key in jsonPair){\r\n                    if (jsonPair.hasOwnProperty(key)) {\r\n                        this.state.newArrData.push(jsonPair[key]);\r\n                    }\r\n                }\r\n                this.state.data.push(this.state.newArrData);\r\n                this.state.newArrData = [];\r\n            }\r\n            console.log(this.state.columnOptions);\r\n\r\n            this.state.columns.push(this.state.newArrColumns);\r\n            this.forceUpdate();\r\n\r\n            this.hot = this.hotTableComponent.current.hotInstance;\r\n\r\n\r\n            //console.log(this.hot)\r\n            //this.hot.setCellMeta(1, 4, \"className\", 'bg-primary text-white');\r\n            //this.hot.render();\r\n           /* var rows=this.hot.countRows();  // get the count of the rows in the table\r\n            var cols=this.hot.countCols();  // get the count of the columns in the table.\r\n            for(var row=0; row<rows; row++){  // go through each row of the table\r\n\r\n                    var cell = this.hot.getCell(row,1);\r\n                    cell.style.background = \"#00FF90\";\r\n\r\n            }*/\r\n\r\n           // console.log(this.hot.getSettings())\r\n\r\n            this.hot.render();\r\n\r\n\r\n        }).catch((err) => {\r\n    console.log(err);\r\n})\r\n\r\n        this.props.setSpinner();\r\n\r\n/*\r\n        //console.log(this.state.columns);\r\n        Axios({\r\n            //PLEASE FIX URL BASED ON YOUR LOCAL MACHINE PORT WHICH SET FOR BACKEND NODE\r\n            method: 'POST',\r\n            url: `http://localhost:8777/test-jersey-rest-maven-tomcat/rest/testservice/test12/`,\r\n            data: null,\r\n            headers: {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }).then(async (response) => {\r\n            console.log(\"aaaa\");\r\n\r\n            const json = response.data[0].variants[0];\r\n            const jsonBig = response.data[0].variants;\r\n            for (let key in json) {\r\n                if (json.hasOwnProperty(key)) {\r\n                    this.state.newArrColumns.push(key);\r\n                }\r\n            }\r\n\r\n            for(let a=0; a<jsonBig.length; a++){\r\n                const jsonPair = response.data[0].variants[a];\r\n                for(let key in jsonPair){\r\n                    if (jsonPair.hasOwnProperty(key)) {\r\n                        this.state.newArrData.push(jsonPair[key]);\r\n                    }\r\n                }\r\n                this.state.data.push(this.state.newArrData);\r\n                this.state.newArrData = [];\r\n            }\r\n            this.state.columns.push(this.state.newArrColumns);\r\n            this.forceUpdate();\r\n\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        })*/\r\n    }\r\n\r\n    handleColumnHeaders() {\r\n\r\n        // Create a copy of map file\r\n        const headerMap = JSON.parse(JSON.stringify(groupingMap));\r\n\r\n        // Set the header groups for table\r\n        const headerGrouping = headerMap.filter((item) => {\r\n            item.colspan = item.columns.length;\r\n            return typeof item.columns === \"object\"\r\n        })\r\n\r\n        // set each and every column defaults\r\n        const cols = headerMap.map((item) => {\r\n\r\n            return item.columns.map(c => {\r\n\r\n                this.titles.push(c.label);\r\n\r\n                c.color = item.color;\r\n\r\n                c.editor = false; // default readonly\r\n\r\n                if (typeof c.validator !== \"undefined\") {\r\n\r\n                    if (c.validator === 'ipValidator') {\r\n                        c.validator = (value, callback) => {\r\n                            this.ipValidate(value, callback)\r\n                        }\r\n                    }\r\n\r\n                    if (c.validator === 'isNumeric') {\r\n                        c.validator = (value, callback) => {\r\n                            this.numericValidate(value, callback)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (typeof c.type !== \"undefined\") {\r\n                    if (c.type === 'dropdown') {\r\n                        this.setPickList(c.data).then((list) => {\r\n                            c.source = list;\r\n                        });\r\n                    }\r\n                }\r\n\r\n                \r\n\r\n                return c;\r\n            });\r\n        })\r\n\r\n        // spread the columns into single object\r\n        cols.map((c) => {\r\n            this.columns = [...this.columns, ...c];\r\n        })\r\n\r\n\r\n\r\n        // Pushing header group const to related vars\r\n        this.columnHeaders.push(headerGrouping);\r\n        this.columnHeaders.push(this.titles);\r\n\r\n        console.log(this.columnHeaders);\r\n        console.log(this.columns);\r\n    }\r\n\r\n    // Finished colouring header\r\n    headerColoring(col, TH) {\r\n\r\n        const TR = TH.parentNode;\r\n        const THEAD = TR.parentNode;\r\n\r\n        const b = THEAD.childNodes.length;\r\n        const n = Array.prototype.indexOf.call(THEAD.childNodes, TR);\r\n        const headerLevel = (-1) * b + n;\r\n\r\n        function applyClass(elem, className) {\r\n            if (!Handsontable.dom.hasClass(elem, className))\r\n                Handsontable.dom.addClass(elem, className);\r\n        }\r\n\r\n        if (headerLevel === -1 || headerLevel === -2) {\r\n\r\n            if (col in this.columns) {\r\n                const {color} = this.columns[col];\r\n                if (color) applyClass(TH, color);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <Header/>\r\n                <Row className=\"h-100\">\r\n                    <Sidebar maximize={this.props.maximize}/>\r\n                    <Col className={this.props.contentCSS}>\r\n\r\n                        <Card className={'mt-1 fixedCard'}>\r\n                            <CardBody>\r\n                                <HotTable  ref={this.hotTableComponent} id={'hot'} colHeaders={this.state.newArrColumns}\r\n                                           columns={this.columns}\r\n                                           autoRowSize={true}\r\n                                           autoWrapRow={true}\r\n                                           dropdownMenu={true}\r\n                                           filters={true}\r\n                                           manualColumnResize={true}\r\n                                           columnSorting={true}\r\n                                           rowHeaders={true} width=\"1900\" height=\"600\" licenseKey=\"non-commercial-and-evaluation\"\r\n                                           afterGetColHeader={(col, TH) => {\r\n\r\n                                           }}\r\n                                />\r\n\r\n                            </CardBody>\r\n\r\n\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        token: state.token,\r\n        language: state.language,\r\n        maximize: state.maximize,\r\n        contentCSS: state.contentCSS,\r\n        fontSize: state.topologySelectedNodeFontSize,\r\n        spinnerToggle: state.spinnerToggle,\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n\r\n        setSpinner: () => dispatch(spinnerToggle()),\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(WDM);"]},"metadata":{},"sourceType":"module"}