{"ast":null,"code":"/*\r\n* Crypto module\r\n* Use for encrypt-decrypt data\r\n*\r\n*/\nimport CryptoJS from 'crypto-js';\n\nclass CryptoModule {\n  constructor() {\n    this.key = CryptoJS.enc.Latin1.parse('hVmYq3t6w9z$C&E)');\n    this.iv = CryptoJS.enc.Latin1.parse('hVmYq3t6w9z$C&E)');\n    this.padding = CryptoJS.pad.ZeroPadding;\n    this.mode = CryptoJS.mode.CBC;\n    this.utf8 = CryptoJS.enc.Utf8;\n  }\n\n  encrypt(data) {\n    try {\n      return CryptoJS.AES.encrypt(data, this.key, {\n        iv: this.iv,\n        mode: this.mode,\n        padding: this.padding\n      }).toString();\n    } catch (e) {\n      return e;\n    }\n  }\n\n  decrypt(data) {\n    try {\n      return CryptoJS.AES.decrypt(data, this.key, {\n        iv: this.iv,\n        padding: this.padding\n      }).toString(this.utf8);\n    } catch (e) {\n      return e;\n    }\n  }\n\n}\n\nexport default CryptoModule;","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/CryptoModule.js"],"names":["CryptoJS","CryptoModule","constructor","key","enc","Latin1","parse","iv","padding","pad","ZeroPadding","mode","CBC","utf8","Utf8","encrypt","data","AES","toString","e","decrypt"],"mappings":"AAAA;;;;;AAMA,OAAOA,QAAP,MAAqB,WAArB;;AAEA,MAAMC,YAAN,CAAmB;AAEfC,EAAAA,WAAW,GAAG;AACV,SAAKC,GAAL,GAAWH,QAAQ,CAACI,GAAT,CAAaC,MAAb,CAAoBC,KAApB,CAA0B,kBAA1B,CAAX;AACA,SAAKC,EAAL,GAAUP,QAAQ,CAACI,GAAT,CAAaC,MAAb,CAAoBC,KAApB,CAA0B,kBAA1B,CAAV;AACA,SAAKE,OAAL,GAAeR,QAAQ,CAACS,GAAT,CAAaC,WAA5B;AACA,SAAKC,IAAL,GAAYX,QAAQ,CAACW,IAAT,CAAcC,GAA1B;AACA,SAAKC,IAAL,GAAYb,QAAQ,CAACI,GAAT,CAAaU,IAAzB;AACH;;AAEDC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACV,QAAI;AACA,aAAOhB,QAAQ,CAACiB,GAAT,CAAaF,OAAb,CAAqBC,IAArB,EAA2B,KAAKb,GAAhC,EAAqC;AACxCI,QAAAA,EAAE,EAAE,KAAKA,EAD+B;AAExCI,QAAAA,IAAI,EAAE,KAAKA,IAF6B;AAGxCH,QAAAA,OAAO,EAAE,KAAKA;AAH0B,OAArC,EAIJU,QAJI,EAAP;AAKH,KAND,CAME,OAAOC,CAAP,EAAU;AACR,aAAOA,CAAP;AACH;AACJ;;AAEDC,EAAAA,OAAO,CAACJ,IAAD,EAAO;AACV,QAAI;AACA,aAAOhB,QAAQ,CAACiB,GAAT,CAAaG,OAAb,CAAqBJ,IAArB,EAA2B,KAAKb,GAAhC,EAAqC;AAACI,QAAAA,EAAE,EAAE,KAAKA,EAAV;AAAcC,QAAAA,OAAO,EAAE,KAAKA;AAA5B,OAArC,EAA2EU,QAA3E,CAAoF,KAAKL,IAAzF,CAAP;AAEH,KAHD,CAGE,OAAOM,CAAP,EAAU;AACR,aAAOA,CAAP;AACH;AACJ;;AA7Bc;;AAgCnB,eAAelB,YAAf","sourcesContent":["/*\r\n* Crypto module\r\n* Use for encrypt-decrypt data\r\n*\r\n*/\r\n\r\nimport CryptoJS from 'crypto-js'\r\n\r\nclass CryptoModule {\r\n\r\n    constructor() {\r\n        this.key = CryptoJS.enc.Latin1.parse('hVmYq3t6w9z$C&E)');\r\n        this.iv = CryptoJS.enc.Latin1.parse('hVmYq3t6w9z$C&E)');\r\n        this.padding = CryptoJS.pad.ZeroPadding;\r\n        this.mode = CryptoJS.mode.CBC;\r\n        this.utf8 = CryptoJS.enc.Utf8;\r\n    }\r\n\r\n    encrypt(data) {\r\n        try {\r\n            return CryptoJS.AES.encrypt(data, this.key, {\r\n                iv: this.iv,\r\n                mode: this.mode,\r\n                padding: this.padding\r\n            }).toString();\r\n        } catch (e) {\r\n            return e;\r\n        }\r\n    }\r\n\r\n    decrypt(data) {\r\n        try {\r\n            return CryptoJS.AES.decrypt(data, this.key, {iv: this.iv, padding: this.padding}).toString(this.utf8);\r\n\r\n        } catch (e) {\r\n            return e;\r\n        }\r\n    }\r\n}\r\n\r\nexport default CryptoModule;"]},"metadata":{},"sourceType":"module"}