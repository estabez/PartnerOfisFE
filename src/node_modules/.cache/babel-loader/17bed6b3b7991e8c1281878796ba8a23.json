{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezerdon\\\\Desktop\\\\INWI\\\\svn reps\\\\E2E_Topology\\\\E2ETopologyFrontend\\\\src\\\\src\\\\components\\\\SelectRegion.jsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { Input } from 'reactstrap';\nimport RestApiModule from '../RestApiModule';\n\nclass SelectRegion extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n    this.state = {\n      regions: null\n    };\n    this.regions = null;\n    this.restApi = new RestApiModule();\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.restApi.callApi('getRegions', {\n      token: this.props.token\n    }).then(response => {\n      if (this._isMounted) {\n        const regions = response.regions.map(item => {\n          return item.Region;\n        });\n        this.setState({\n          regions\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const language = this.props.language;\n\n    if (language && this.state.regions) {\n      return React.createElement(Input, {\n        type: 'select',\n        className: 'custom-select',\n        onChange: ev => this.props.handleRegionChange(ev.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, language.loadByRegion), this.state.regions.map(value => {\n        return React.createElement(\"option\", {\n          key: value,\n          value: value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, value);\n      }));\n    } else {\n      return React.createElement(React.Fragment, null);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    language: state.language,\n    token: state.token\n  };\n}\n\nexport default connect(mapStateToProps)(SelectRegion);","map":{"version":3,"sources":["C:/Users/ezerdon/Desktop/INWI/svn reps/E2E_Topology/E2ETopologyFrontend/src/src/components/SelectRegion.jsx"],"names":["React","connect","Input","RestApiModule","SelectRegion","Component","constructor","props","_isMounted","state","regions","restApi","componentDidMount","callApi","token","then","response","map","item","Region","setState","componentWillUnmount","render","language","ev","handleRegionChange","target","value","loadByRegion","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,KAAR,QAAoB,YAApB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;;AAEA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA2C;AAGvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAFnBC,UAEmB,GAFN,KAEM;AAGf,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb;AAIA,SAAKA,OAAL,GAAe,IAAf;AACA,SAAKC,OAAL,GAAe,IAAIR,aAAJ,EAAf;AACH;;AAEDS,EAAAA,iBAAiB,GAAG;AAEhB,SAAKJ,UAAL,GAAkB,IAAlB;AAEA,SAAKG,OAAL,CAAaE,OAAb,CAAqB,YAArB,EAAmC;AAC/BC,MAAAA,KAAK,EAAE,KAAKP,KAAL,CAAWO;AADa,KAAnC,EAEGC,IAFH,CAESC,QAAD,IAAc;AAElB,UAAI,KAAKR,UAAT,EAAqB;AAEjB,cAAME,OAAO,GAAGM,QAAQ,CAACN,OAAT,CAAiBO,GAAjB,CAAsBC,IAAD,IAAU;AAC3C,iBAAOA,IAAI,CAACC,MAAZ;AACH,SAFe,CAAhB;AAIA,aAAKC,QAAL,CAAc;AAACV,UAAAA;AAAD,SAAd;AACH;AACJ,KAZD;AAaH;;AAEDW,EAAAA,oBAAoB,GAAG;AACnB,SAAKb,UAAL,GAAkB,KAAlB;AACH;;AAEDc,EAAAA,MAAM,GAAG;AAAA,UACEC,QADF,GACc,KAAKhB,KADnB,CACEgB,QADF;;AAGL,QAAIA,QAAQ,IAAI,KAAKd,KAAL,CAAWC,OAA3B,EAAoC;AAEhC,aACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAE,QAAb;AAAuB,QAAA,SAAS,EAAE,eAAlC;AACO,QAAA,QAAQ,EAAEc,EAAE,IAAI,KAAKjB,KAAL,CAAWkB,kBAAX,CAA8BD,EAAE,CAACE,MAAH,CAAUC,KAAxC,CADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI;AAAQ,QAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmBJ,QAAQ,CAACK,YAA5B,CAFJ,EAII,KAAKnB,KAAL,CAAWC,OAAX,CAAmBO,GAAnB,CAAwBU,KAAD,IAAW;AAC9B,eAAQ;AAAQ,UAAA,GAAG,EAAEA,KAAb;AAAoB,UAAA,KAAK,EAAEA,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAmCA,KAAnC,CAAR;AACH,OAFD,CAJJ,CADJ;AAYH,KAdD,MAcO;AACH,aACI,yCADJ;AAGH;AACJ;;AA3DsC;;AA8D3C,SAASE,eAAT,CAAyBpB,KAAzB,EAAgC;AAC5B,SAAO;AACHc,IAAAA,QAAQ,EAAEd,KAAK,CAACc,QADb;AAEHT,IAAAA,KAAK,EAAEL,KAAK,CAACK;AAFV,GAAP;AAIH;;AAED,eAAeb,OAAO,CAAC4B,eAAD,CAAP,CAAyBzB,YAAzB,CAAf","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Input} from 'reactstrap';\r\nimport RestApiModule from '../RestApiModule'\r\n\r\nclass SelectRegion extends React.Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            regions: null\r\n        }\r\n\r\n        this.regions = null;\r\n        this.restApi = new RestApiModule();\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this._isMounted = true;\r\n\r\n        this.restApi.callApi('getRegions', {\r\n            token: this.props.token\r\n        }).then((response) => {\r\n\r\n            if (this._isMounted) {\r\n\r\n                const regions = response.regions.map((item) => {\r\n                    return item.Region;\r\n                });\r\n\r\n                this.setState({regions})\r\n            }\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    render() {\r\n        const {language} = this.props;\r\n\r\n        if (language && this.state.regions) {\r\n\r\n            return (\r\n                <Input type={'select'} className={'custom-select'}\r\n                       onChange={ev => this.props.handleRegionChange(ev.target.value)}>\r\n                    <option value=\"0\">{language.loadByRegion}</option>\r\n                    {\r\n                    this.state.regions.map((value) => {\r\n                        return (<option key={value} value={value}>{value}</option>)\r\n                    })\r\n                    }\r\n                </Input>\r\n            )\r\n\r\n        } else {\r\n            return (\r\n                <></>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        language: state.language,\r\n        token: state.token\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(SelectRegion);"]},"metadata":{},"sourceType":"module"}